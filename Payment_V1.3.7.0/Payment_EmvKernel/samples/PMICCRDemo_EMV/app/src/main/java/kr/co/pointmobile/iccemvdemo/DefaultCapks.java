package kr.co.pointmobile.iccemvdemo;

import android.util.Log;

import vpos.emvkernel.EMVCAPK;
import vpos.emvkernel.EmvKernel;

/**
 * 
 * @author jsy
 *
 *默认提供的capk
 */
public class DefaultCapks {
	
	/**<
	 * TODO : 사용하지 않는 CAPK는 정리요망
	 * @param liveOpt : true : real key, false : test key
	 */
	public static int addAllEMVCapk(boolean liveOpt) {
		if(liveOpt) {
			int i=0;
			i = setDefaultLiveCAPK1ST();    // 40개 CAPK
			i = setDefaultLiveCAPK2ND(i);   // 40개 CAPK
			return setDefaultLiveCAPK3RD(i);   // 2개 CAPK (현재)
		}
		else {
			setDefaultTestCAPK1st();
			setDefaultTestCAPK2nd();
		}
		
		return 0;
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t94());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t95());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t96());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t97());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t98());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t99());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_v01());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_v03());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_v05());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_v07());
//		/*
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_v02());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_v03());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_v04());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tEF());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF0());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF1());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF2());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF3());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF4());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF8());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_eurocheque_tF8());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tFE());
//		 * EmvKernel.EmvLib_AddCapk(get_capk_eurocheque_tFE());
//		 */
//		EmvKernel.EmvLib_AddCapk(get_capk_jcb_t08());
//		EmvKernel.EmvLib_AddCapk(get_capk_jcb_t01());
//		EmvKernel.EmvLib_AddCapk(get_capk_jcb_t02());
//		EmvKernel.EmvLib_AddCapk(get_capk_jcb_t03());
//		EmvKernel.EmvLib_AddCapk(get_capk_cup_t01());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboctest_t08());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboctest_t80());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v01());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v02());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v03());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v04());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v08());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v09());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v0A());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v0B());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v0C());
//		EmvKernel.EmvLib_AddCapk(get_capk_visatest_t50());
//		EmvKernel.EmvLib_AddCapk(get_capk_visatest_t51());
//		EmvKernel.EmvLib_AddCapk(get_capk_visatest_t53());
//		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE1());
//		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE2());
//		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE3());
//		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE4());
//		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE5());
//		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE6());
//		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFE());
//		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFC());
//		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFA());
//		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFB());
//		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFD());
//		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFF());
//		EmvKernel.EmvLib_AddCapk(get_capk_jcbtest_t02());
//		EmvKernel.EmvLib_AddCapk(get_capk_jcbtest_t03());
//		EmvKernel.EmvLib_AddCapk(get_capk_amextest_t60());
//		EmvKernel.EmvLib_AddCapk(get_capk_amextest_t61());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t50());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t51());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t53());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t54());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t57());
//		EmvKernel.EmvLib_AddCapk(get_capk_visa_t58());
//		EmvKernel.EmvLib_AddCapk(get_capk_discover_tD0());
//		EmvKernel.EmvLib_AddCapk(get_capk_discover_tD1());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_vC0());
//		EmvKernel.EmvLib_AddCapk(get_capk_pboc_vC1());
	}
	

	////////////////////////////////////////////////////////////////////////////////////////////////
	public static EMVCAPK[]    capk = new EMVCAPK[128];
	
	public static int setDefaultLiveCAPK1ST() {
		int i = 0;

		//01. VISA(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},/*RID*/
				(byte)0x01,/*key index*/
				(byte)0x01,/*HASH index*/
				(byte)0x01,/*arith index*/
				(byte)0x80,/*modules length*/
				new byte[]{(byte)0xC6, (byte)0x96, (byte)0x03, (byte)0x42, (byte)0x13, (byte)0xD7, (byte)0xD8, (byte)0x54,
						(byte)0x69, (byte)0x84, (byte)0x57, (byte)0x9D, (byte)0x1D, (byte)0x0F, (byte)0x0E, (byte)0xA5,
						(byte)0x19, (byte)0xCF, (byte)0xF8, (byte)0xDE, (byte)0xFF, (byte)0xC4, (byte)0x29, (byte)0x35,
						(byte)0x4C, (byte)0xF3, (byte)0xA8, (byte)0x71, (byte)0xA6, (byte)0xF7, (byte)0x18, (byte)0x3F,
						(byte)0x12, (byte)0x28, (byte)0xDA, (byte)0x5C, (byte)0x74, (byte)0x70, (byte)0xC0, (byte)0x55,
						(byte)0x38, (byte)0x71, (byte)0x00, (byte)0xCB, (byte)0x93, (byte)0x5A, (byte)0x71, (byte)0x2C,
						(byte)0x4E, (byte)0x28, (byte)0x64, (byte)0xDF, (byte)0x5D, (byte)0x64, (byte)0xBA, (byte)0x93,
						(byte)0xFE, (byte)0x7E, (byte)0x63, (byte)0xE7, (byte)0x1F, (byte)0x25, (byte)0xB1, (byte)0xE5,
						(byte)0xF5, (byte)0x29, (byte)0x85, (byte)0x75, (byte)0xEB, (byte)0xE1, (byte)0xC6, (byte)0x3A,
						(byte)0xA6, (byte)0x17, (byte)0x70, (byte)0x69, (byte)0x17, (byte)0x91, (byte)0x1D, (byte)0xC2,
						(byte)0xA7, (byte)0x5A, (byte)0xC2, (byte)0x8B, (byte)0x25, (byte)0x1C, (byte)0x7E, (byte)0xF4,
						(byte)0x0F, (byte)0x23, (byte)0x65, (byte)0x91, (byte)0x24, (byte)0x90, (byte)0xB9, (byte)0x39,
						(byte)0xBC, (byte)0xA2, (byte)0x12, (byte)0x4A, (byte)0x30, (byte)0xA2, (byte)0x8F, (byte)0x54,
						(byte)0x40, (byte)0x2C, (byte)0x34, (byte)0xAE, (byte)0xCA, (byte)0x33, (byte)0x1A, (byte)0xB6,
						(byte)0x7E, (byte)0x1E, (byte)0x79, (byte)0xB2, (byte)0x85, (byte)0xDD, (byte)0x57, (byte)0x71,
						(byte)0xB5, (byte)0xD9, (byte)0xFF, (byte)0x79, (byte)0xEA, (byte)0x63, (byte)0x0B, (byte)0x75},/*modules*/
				(byte)0x01,/*exponent length*/
				new byte[]{(byte)0x03},/*exponent*/
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xD3, (byte)0x4A, (byte)0x6A, (byte)0x77, (byte)0x60, (byte)0x11, (byte)0xC7, (byte)0xE7,
						(byte)0xCE, (byte)0x3A, (byte)0xEC, (byte)0x5F, (byte)0x03, (byte)0xAD, (byte)0x2F, (byte)0x8C,
						(byte)0xFC, (byte)0x55, (byte)0x03, (byte)0xCC}/*HASH*/
		);
		//02. VISA(non KOCES)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},
				(byte)0x03,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)112,
				new byte[]{(byte)0xB3, (byte)0xE5, (byte)0xE6, (byte)0x67, (byte)0x50, (byte)0x6C, (byte)0x47, (byte)0xCA,
						(byte)0xAF, (byte)0xB1, (byte)0x2A, (byte)0x26, (byte)0x33, (byte)0x81, (byte)0x93, (byte)0x50,
						(byte)0x84, (byte)0x66, (byte)0x97, (byte)0xDD, (byte)0x65, (byte)0xA7, (byte)0x96, (byte)0xE5,
						(byte)0xCE, (byte)0x77, (byte)0xC5, (byte)0x7C, (byte)0x62, (byte)0x6A, (byte)0x66, (byte)0xF7,
						(byte)0x0B, (byte)0xB6, (byte)0x30, (byte)0x91, (byte)0x16, (byte)0x12, (byte)0xAD, (byte)0x28,
						(byte)0x32, (byte)0x90, (byte)0x9B, (byte)0x80, (byte)0x62, (byte)0x29, (byte)0x1B, (byte)0xEC,
						(byte)0xA4, (byte)0x6C, (byte)0xD3, (byte)0x3B, (byte)0x66, (byte)0xA6, (byte)0xF9, (byte)0xC9,
						(byte)0xD4, (byte)0x8C, (byte)0xED, (byte)0x8B, (byte)0x4F, (byte)0xC8, (byte)0x56, (byte)0x1C,
						(byte)0x8A, (byte)0x1D, (byte)0x8F, (byte)0xB1, (byte)0x58, (byte)0x62, (byte)0xC9, (byte)0xEB,
						(byte)0x60, (byte)0x17, (byte)0x8D, (byte)0xEA, (byte)0x2B, (byte)0xE1, (byte)0xF8, (byte)0x22,
						(byte)0x36, (byte)0xFF, (byte)0xCF, (byte)0xF4, (byte)0xF3, (byte)0x84, (byte)0x3C, (byte)0x27,
						(byte)0x21, (byte)0x79, (byte)0xDC, (byte)0xDD, (byte)0x38, (byte)0x4D, (byte)0x54, (byte)0x10,
						(byte)0x53, (byte)0xDA, (byte)0x6A, (byte)0x6A, (byte)0x0D, (byte)0x3C, (byte)0xE4, (byte)0x8F,
						(byte)0xDC, (byte)0x2D, (byte)0xC4, (byte)0xE3, (byte)0xE0, (byte)0xEE, (byte)0xE1, (byte)0x5F},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xFE, (byte)0x70, (byte)0xAB, (byte)0x3B, (byte)0x4D, (byte)0x5A, (byte)0x1B, (byte)0x99,
						(byte)0x24, (byte)0x22, (byte)0x8A, (byte)0xDF, (byte)0x80, (byte)0x27, (byte)0xC7, (byte)0x58,
						(byte)0x48, (byte)0x3A, (byte)0x8B, (byte)0x7E}/*HASH*/
		);
		// 03. VISA(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},/*RID*/
				(byte)0x07,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,/*modules length*/
				new byte[]{(byte)0xA8, (byte)0x9F, (byte)0x25, (byte)0xA5, (byte)0x6F, (byte)0xA6, (byte)0xDA, (byte)0x25,
						(byte)0x8C, (byte)0x8C, (byte)0xA8, (byte)0xB4, (byte)0x04, (byte)0x27, (byte)0xD9, (byte)0x27,
						(byte)0xB4, (byte)0xA1, (byte)0xEB, (byte)0x4D, (byte)0x7E, (byte)0xA3, (byte)0x26, (byte)0xBB,
						(byte)0xB1, (byte)0x2F, (byte)0x97, (byte)0xDE, (byte)0xD7, (byte)0x0A, (byte)0xE5, (byte)0xE4,
						(byte)0x48, (byte)0x0F, (byte)0xC9, (byte)0xC5, (byte)0xE8, (byte)0xA9, (byte)0x72, (byte)0x17,
						(byte)0x71, (byte)0x10, (byte)0xA1, (byte)0xCC, (byte)0x31, (byte)0x8D, (byte)0x06, (byte)0xD2,
						(byte)0xF8, (byte)0xF5, (byte)0xC4, (byte)0x84, (byte)0x4A, (byte)0xC5, (byte)0xFA, (byte)0x79,
						(byte)0xA4, (byte)0xDC, (byte)0x47, (byte)0x0B, (byte)0xB1, (byte)0x1E, (byte)0xD6, (byte)0x35,
						(byte)0x69, (byte)0x9C, (byte)0x17, (byte)0x08, (byte)0x1B, (byte)0x90, (byte)0xF1, (byte)0xB9,
						(byte)0x84, (byte)0xF1, (byte)0x2E, (byte)0x92, (byte)0xC1, (byte)0xC5, (byte)0x29, (byte)0x27,
						(byte)0x6D, (byte)0x8A, (byte)0xF8, (byte)0xEC, (byte)0x7F, (byte)0x28, (byte)0x49, (byte)0x20,
						(byte)0x97, (byte)0xD8, (byte)0xCD, (byte)0x5B, (byte)0xEC, (byte)0xEA, (byte)0x16, (byte)0xFE,
						(byte)0x40, (byte)0x88, (byte)0xF6, (byte)0xCF, (byte)0xAB, (byte)0x4A, (byte)0x1B, (byte)0x42,
						(byte)0x32, (byte)0x8A, (byte)0x1B, (byte)0x99, (byte)0x6F, (byte)0x92, (byte)0x78, (byte)0xB0,
						(byte)0xB7, (byte)0xE3, (byte)0x31, (byte)0x1C, (byte)0xA5, (byte)0xEF, (byte)0x85, (byte)0x6C,
						(byte)0x2F, (byte)0x88, (byte)0x84, (byte)0x74, (byte)0xB8, (byte)0x36, (byte)0x12, (byte)0xA8,
						(byte)0x2E, (byte)0x4E, (byte)0x00, (byte)0xD0, (byte)0xCD, (byte)0x40, (byte)0x69, (byte)0xA6,
						(byte)0x78, (byte)0x31, (byte)0x40, (byte)0x43, (byte)0x3D, (byte)0x50, (byte)0x72, (byte)0x5F},/*modules*/
				(byte)0x01,/*exponent length*/
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},/*exponent*/
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xB4, (byte)0xBC, (byte)0x56, (byte)0xCC, (byte)0x4E, (byte)0x88, (byte)0x32, (byte)0x49,
						(byte)0x32, (byte)0xCB, (byte)0xC6, (byte)0x43, (byte)0xD6, (byte)0x89, (byte)0x8F, (byte)0x6F,
						(byte)0xE5, (byte)0x93, (byte)0xB1, (byte)0x72}/*HASH*/

		);
		// 04. VISA(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},/*RID*/
				(byte)0x08,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,/*modules length*/
				new byte[]{(byte)0xD9, (byte)0xFD, (byte)0x6E, (byte)0xD7, (byte)0x5D, (byte)0x51, (byte)0xD0, (byte)0xE3,
						(byte)0x06, (byte)0x64, (byte)0xBD, (byte)0x15, (byte)0x70, (byte)0x23, (byte)0xEA, (byte)0xA1,
						(byte)0xFF, (byte)0xA8, (byte)0x71, (byte)0xE4, (byte)0xDA, (byte)0x65, (byte)0x67, (byte)0x2B,
						(byte)0x86, (byte)0x3D, (byte)0x25, (byte)0x5E, (byte)0x81, (byte)0xE1, (byte)0x37, (byte)0xA5,
						(byte)0x1D, (byte)0xE4, (byte)0xF7, (byte)0x2B, (byte)0xCC, (byte)0x9E, (byte)0x44, (byte)0xAC,
						(byte)0xE1, (byte)0x21, (byte)0x27, (byte)0xF8, (byte)0x7E, (byte)0x26, (byte)0x3D, (byte)0x3A,
						(byte)0xF9, (byte)0xDD, (byte)0x9C, (byte)0xF3, (byte)0x5C, (byte)0xA4, (byte)0xA7, (byte)0xB0,
						(byte)0x1E, (byte)0x90, (byte)0x70, (byte)0x00, (byte)0xBA, (byte)0x85, (byte)0xD2, (byte)0x49,
						(byte)0x54, (byte)0xC2, (byte)0xFC, (byte)0xA3, (byte)0x07, (byte)0x48, (byte)0x25, (byte)0xDD,
						(byte)0xD4, (byte)0xC0, (byte)0xC8, (byte)0xF1, (byte)0x86, (byte)0xCB, (byte)0x02, (byte)0x0F,
						(byte)0x68, (byte)0x3E, (byte)0x02, (byte)0xF2, (byte)0xDE, (byte)0xAD, (byte)0x39, (byte)0x69,
						(byte)0x13, (byte)0x3F, (byte)0x06, (byte)0xF7, (byte)0x84, (byte)0x51, (byte)0x66, (byte)0xAC,
						(byte)0xEB, (byte)0x57, (byte)0xCA, (byte)0x0F, (byte)0xC2, (byte)0x60, (byte)0x34, (byte)0x45,
						(byte)0x46, (byte)0x98, (byte)0x11, (byte)0xD2, (byte)0x93, (byte)0xBF, (byte)0xEF, (byte)0xBA,
						(byte)0xFA, (byte)0xB5, (byte)0x76, (byte)0x31, (byte)0xB3, (byte)0xDD, (byte)0x91, (byte)0xE7,
						(byte)0x96, (byte)0xBF, (byte)0x85, (byte)0x0A, (byte)0x25, (byte)0x01, (byte)0x2F, (byte)0x1A,
						(byte)0xE3, (byte)0x8F, (byte)0x05, (byte)0xAA, (byte)0x5C, (byte)0x4D, (byte)0x6D, (byte)0x03,
						(byte)0xB1, (byte)0xDC, (byte)0x2E, (byte)0x56, (byte)0x86, (byte)0x12, (byte)0x78, (byte)0x59,
						(byte)0x38, (byte)0xBB, (byte)0xC9, (byte)0xB3, (byte)0xCD, (byte)0x3A, (byte)0x91, (byte)0x0C,
						(byte)0x1D, (byte)0xA5, (byte)0x5A, (byte)0x5A, (byte)0x92, (byte)0x18, (byte)0xAC, (byte)0xE0,
						(byte)0xF7, (byte)0xA2, (byte)0x12, (byte)0x87, (byte)0x75, (byte)0x26, (byte)0x82, (byte)0xF1,
						(byte)0x58, (byte)0x32, (byte)0xA6, (byte)0x78, (byte)0xD6, (byte)0xE1, (byte)0xED, (byte)0x0B},/*modules*/
				(byte)0x01,/*exponent length*/
				new byte[]{(byte)0x03},/*exponent*/
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x20, (byte)0xD2, (byte)0x13, (byte)0x12, (byte)0x69, (byte)0x55, (byte)0xDE, (byte)0x20,
						(byte)0x5A, (byte)0xDC, (byte)0x2F, (byte)0xD2, (byte)0x82, (byte)0x2B, (byte)0xD2, (byte)0x2D,
						(byte)0xE2, (byte)0x1C, (byte)0xF9, (byte)0xA8}/*HASH*/
		);
		//05. VISA(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},
				(byte)0x09,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0x9D, (byte)0x91, (byte)0x22, (byte)0x48, (byte)0xDE, (byte)0x0A, (byte)0x4E, (byte)0x39,
						(byte)0xC1, (byte)0xA7, (byte)0xDD, (byte)0xE3, (byte)0xF6, (byte)0xD2, (byte)0x58, (byte)0x89,
						(byte)0x92, (byte)0xC1, (byte)0xA4, (byte)0x09, (byte)0x5A, (byte)0xFB, (byte)0xD1, (byte)0x82,
						(byte)0x4D, (byte)0x1B, (byte)0xA7, (byte)0x48, (byte)0x47, (byte)0xF2, (byte)0xBC, (byte)0x49,
						(byte)0x26, (byte)0xD2, (byte)0xEF, (byte)0xD9, (byte)0x04, (byte)0xB4, (byte)0xB5, (byte)0x49,
						(byte)0x54, (byte)0xCD, (byte)0x18, (byte)0x9A, (byte)0x54, (byte)0xC5, (byte)0xD1, (byte)0x17,
						(byte)0x96, (byte)0x54, (byte)0xF8, (byte)0xF9, (byte)0xB0, (byte)0xD2, (byte)0xAB, (byte)0x5F,
						(byte)0x03, (byte)0x57, (byte)0xEB, (byte)0x64, (byte)0x2F, (byte)0xED, (byte)0xA9, (byte)0x5D,
						(byte)0x39, (byte)0x12, (byte)0xC6, (byte)0x57, (byte)0x69, (byte)0x45, (byte)0xFA, (byte)0xB8,
						(byte)0x97, (byte)0xE7, (byte)0x06, (byte)0x2C, (byte)0xAA, (byte)0x44, (byte)0xA4, (byte)0xAA,
						(byte)0x06, (byte)0xB8, (byte)0xFE, (byte)0x6E, (byte)0x3D, (byte)0xBA, (byte)0x18, (byte)0xAF,
						(byte)0x6A, (byte)0xE3, (byte)0x73, (byte)0x8E, (byte)0x30, (byte)0x42, (byte)0x9E, (byte)0xE9,
						(byte)0xBE, (byte)0x03, (byte)0x42, (byte)0x7C, (byte)0x9D, (byte)0x64, (byte)0xF6, (byte)0x95,
						(byte)0xFA, (byte)0x8C, (byte)0xAB, (byte)0x4B, (byte)0xFE, (byte)0x37, (byte)0x68, (byte)0x53,
						(byte)0xEA, (byte)0x34, (byte)0xAD, (byte)0x1D, (byte)0x76, (byte)0xBF, (byte)0xCA, (byte)0xD1,
						(byte)0x59, (byte)0x08, (byte)0xC0, (byte)0x77, (byte)0xFF, (byte)0xE6, (byte)0xDC, (byte)0x55,
						(byte)0x21, (byte)0xEC, (byte)0xEF, (byte)0x5D, (byte)0x27, (byte)0x8A, (byte)0x96, (byte)0xE2,
						(byte)0x6F, (byte)0x57, (byte)0x35, (byte)0x9F, (byte)0xFA, (byte)0xED, (byte)0xA1, (byte)0x94,
						(byte)0x34, (byte)0xB9, (byte)0x37, (byte)0xF1, (byte)0xAD, (byte)0x99, (byte)0x9D, (byte)0xC5,
						(byte)0xC4, (byte)0x1E, (byte)0xB1, (byte)0x19, (byte)0x35, (byte)0xB4, (byte)0x4C, (byte)0x18,
						(byte)0x10, (byte)0x0E, (byte)0x85, (byte)0x7F, (byte)0x43, (byte)0x1A, (byte)0x4A, (byte)0x5A,
						(byte)0x6B, (byte)0xB6, (byte)0x51, (byte)0x14, (byte)0xF1, (byte)0x74, (byte)0xC2, (byte)0xD7,
						(byte)0xB5, (byte)0x9F, (byte)0xDF, (byte)0x23, (byte)0x7D, (byte)0x6B, (byte)0xB1, (byte)0xDD,
						(byte)0x09, (byte)0x16, (byte)0xE6, (byte)0x44, (byte)0xD7, (byte)0x09, (byte)0xDE, (byte)0xD5,
						(byte)0x64, (byte)0x81, (byte)0x47, (byte)0x7C, (byte)0x75, (byte)0xD9, (byte)0x5C, (byte)0xDD,
						(byte)0x68, (byte)0x25, (byte)0x46, (byte)0x15, (byte)0xF7, (byte)0x74, (byte)0x0E, (byte)0xC0,
						(byte)0x7F, (byte)0x33, (byte)0x0A, (byte)0xC5, (byte)0xD6, (byte)0x7B, (byte)0xCD, (byte)0x75,
						(byte)0xBF, (byte)0x23, (byte)0xD2, (byte)0x8A, (byte)0x14, (byte)0x08, (byte)0x26, (byte)0xC0,
						(byte)0x26, (byte)0xDB, (byte)0xDE, (byte)0x97, (byte)0x1A, (byte)0x37, (byte)0xCD, (byte)0x3E,
						(byte)0xF9, (byte)0xB8, (byte)0xDF, (byte)0x64, (byte)0x4A, (byte)0xC3, (byte)0x85, (byte)0x01,
						(byte)0x05, (byte)0x01, (byte)0xEF, (byte)0xC6, (byte)0x50, (byte)0x9D, (byte)0x7A, (byte)0x41},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x1F, (byte)0xF8, (byte)0x0A, (byte)0x40, (byte)0x17, (byte)0x3F, (byte)0x52, (byte)0xD7,
						(byte)0xD2, (byte)0x7E, (byte)0x0F, (byte)0x26, (byte)0xA1, (byte)0x46, (byte)0xA1, (byte)0xC8,
						(byte)0xCC, (byte)0xB2, (byte)0x90, (byte)0x46}
		);
		//6. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},/*RID*/
				(byte)0x90,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x40,/*length in bits of modulus*/
				new byte[]{(byte)0xC2, (byte)0x6B, (byte)0x3C, (byte)0xB3, (byte)0x83, (byte)0x3E, (byte)0x42, (byte)0xD8,
						(byte)0x27, (byte)0x0D, (byte)0xC1, (byte)0x0C, (byte)0x89, (byte)0x99, (byte)0xB2, (byte)0xDA,
						(byte)0x18, (byte)0x10, (byte)0x68, (byte)0x38, (byte)0x65, (byte)0x0D, (byte)0xA0, (byte)0xDB,
						(byte)0xF1, (byte)0x54, (byte)0xEF, (byte)0xD5, (byte)0x11, (byte)0x00, (byte)0xAD, (byte)0x14,
						(byte)0x47, (byte)0x41, (byte)0xB2, (byte)0xA8, (byte)0x7D, (byte)0x68, (byte)0x81, (byte)0xF8,
						(byte)0x63, (byte)0x0E, (byte)0x33, (byte)0x48, (byte)0xDE, (byte)0xA3, (byte)0xF7, (byte)0x80,
						(byte)0x38, (byte)0xE9, (byte)0xB2, (byte)0x1A, (byte)0x69, (byte)0x7E, (byte)0xB2, (byte)0xA6,
						(byte)0x71, (byte)0x6D, (byte)0x32, (byte)0xCB, (byte)0xF2, (byte)0x60, (byte)0x86, (byte)0xF1},/*modulus*/
				(byte)0x01,
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}
		);
		//7. VISA(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},
				(byte)0x92,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0x99, (byte)0x6A, (byte)0xF5, (byte)0x6F, (byte)0x56, (byte)0x91, (byte)0x87, (byte)0xD0,
						(byte)0x92, (byte)0x93, (byte)0xC1, (byte)0x48, (byte)0x10, (byte)0x45, (byte)0x0E, (byte)0xD8,
						(byte)0xEE, (byte)0x33, (byte)0x57, (byte)0x39, (byte)0x7B, (byte)0x18, (byte)0xA2, (byte)0x45,
						(byte)0x8E, (byte)0xFA, (byte)0xA9, (byte)0x2D, (byte)0xA3, (byte)0xB6, (byte)0xDF, (byte)0x65,
						(byte)0x14, (byte)0xEC, (byte)0x06, (byte)0x01, (byte)0x95, (byte)0x31, (byte)0x8F, (byte)0xD4,
						(byte)0x3B, (byte)0xE9, (byte)0xB8, (byte)0xF0, (byte)0xCC, (byte)0x66, (byte)0x9E, (byte)0x3F,
						(byte)0x84, (byte)0x40, (byte)0x57, (byte)0xCB, (byte)0xDD, (byte)0xF8, (byte)0xBD, (byte)0xA1,
						(byte)0x91, (byte)0xBB, (byte)0x64, (byte)0x47, (byte)0x3B, (byte)0xC8, (byte)0xDC, (byte)0x9A,
						(byte)0x73, (byte)0x0D, (byte)0xB8, (byte)0xF6, (byte)0xB4, (byte)0xED, (byte)0xE3, (byte)0x92,
						(byte)0x41, (byte)0x86, (byte)0xFF, (byte)0xD9, (byte)0xB8, (byte)0xC7, (byte)0x73, (byte)0x57,
						(byte)0x89, (byte)0xC2, (byte)0x3A, (byte)0x36, (byte)0xBA, (byte)0x0B, (byte)0x8A, (byte)0xF6,
						(byte)0x53, (byte)0x72, (byte)0xEB, (byte)0x57, (byte)0xEA, (byte)0x5D, (byte)0x89, (byte)0xE7,
						(byte)0xD1, (byte)0x4E, (byte)0x9C, (byte)0x7B, (byte)0x6B, (byte)0x55, (byte)0x74, (byte)0x60,
						(byte)0xF1, (byte)0x08, (byte)0x85, (byte)0xDA, (byte)0x16, (byte)0xAC, (byte)0x92, (byte)0x3F,
						(byte)0x15, (byte)0xAF, (byte)0x37, (byte)0x58, (byte)0xF0, (byte)0xF0, (byte)0x3E, (byte)0xBD,
						(byte)0x3C, (byte)0x5C, (byte)0x2C, (byte)0x94, (byte)0x9C, (byte)0xBA, (byte)0x30, (byte)0x6D,
						(byte)0xB4, (byte)0x4E, (byte)0x6A, (byte)0x2C, (byte)0x07, (byte)0x6C, (byte)0x5F, (byte)0x67,
						(byte)0xE2, (byte)0x81, (byte)0xD7, (byte)0xEF, (byte)0x56, (byte)0x78, (byte)0x5D, (byte)0xC4,
						(byte)0xD7, (byte)0x59, (byte)0x45, (byte)0xE4, (byte)0x91, (byte)0xF0, (byte)0x19, (byte)0x18,
						(byte)0x80, (byte)0x0A, (byte)0x9E, (byte)0x2D, (byte)0xC6, (byte)0x6F, (byte)0x60, (byte)0x08,
						(byte)0x05, (byte)0x66, (byte)0xCE, (byte)0x0D, (byte)0xAF, (byte)0x8D, (byte)0x17, (byte)0xEA,
						(byte)0xD4, (byte)0x6A, (byte)0xD8, (byte)0xE3, (byte)0x0A, (byte)0x24, (byte)0x7C, (byte)0x9F},
				(byte)0x01,
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x42, (byte)0x9C, (byte)0x95, (byte)0x4A, (byte)0x38, (byte)0x59, (byte)0xCE, (byte)0xF8,
						(byte)0x12, (byte)0x95, (byte)0xF6, (byte)0x63, (byte)0xC9, (byte)0x63, (byte)0xE5, (byte)0x82,
						(byte)0xED, (byte)0x6E, (byte)0xB2, (byte)0x53}
		);
		//08. VISA(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},
				(byte)0x94,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xAC, (byte)0xD2, (byte)0xB1, (byte)0x23, (byte)0x02, (byte)0xEE, (byte)0x64, (byte)0x4F,
						(byte)0x3F, (byte)0x83, (byte)0x5A, (byte)0xBD, (byte)0x1F, (byte)0xC7, (byte)0xA6, (byte)0xF6,
						(byte)0x2C, (byte)0xCE, (byte)0x48, (byte)0xFF, (byte)0xEC, (byte)0x62, (byte)0x2A, (byte)0xA8,
						(byte)0xEF, (byte)0x06, (byte)0x2B, (byte)0xEF, (byte)0x6F, (byte)0xB8, (byte)0xBA, (byte)0x8B,
						(byte)0xC6, (byte)0x8B, (byte)0xBF, (byte)0x6A, (byte)0xB5, (byte)0x87, (byte)0x0E, (byte)0xED,
						(byte)0x57, (byte)0x9B, (byte)0xC3, (byte)0x97, (byte)0x3E, (byte)0x12, (byte)0x13, (byte)0x03,
						(byte)0xD3, (byte)0x48, (byte)0x41, (byte)0xA7, (byte)0x96, (byte)0xD6, (byte)0xDC, (byte)0xBC,
						(byte)0x41, (byte)0xDB, (byte)0xF9, (byte)0xE5, (byte)0x2C, (byte)0x46, (byte)0x09, (byte)0x79,
						(byte)0x5C, (byte)0x0C, (byte)0xCF, (byte)0x7E, (byte)0xE8, (byte)0x6F, (byte)0xA1, (byte)0xD5,
						(byte)0xCB, (byte)0x04, (byte)0x10, (byte)0x71, (byte)0xED, (byte)0x2C, (byte)0x51, (byte)0xD2,
						(byte)0x20, (byte)0x2F, (byte)0x63, (byte)0xF1, (byte)0x15, (byte)0x6C, (byte)0x58, (byte)0xA9,
						(byte)0x2D, (byte)0x38, (byte)0xBC, (byte)0x60, (byte)0xBD, (byte)0xF4, (byte)0x24, (byte)0xE1,
						(byte)0x77, (byte)0x6E, (byte)0x2B, (byte)0xC9, (byte)0x64, (byte)0x80, (byte)0x78, (byte)0xA0,
						(byte)0x3B, (byte)0x36, (byte)0xFB, (byte)0x55, (byte)0x43, (byte)0x75, (byte)0xFC, (byte)0x53,
						(byte)0xD5, (byte)0x7C, (byte)0x73, (byte)0xF5, (byte)0x16, (byte)0x0E, (byte)0xA5, (byte)0x9F,
						(byte)0x3A, (byte)0xFC, (byte)0x53, (byte)0x98, (byte)0xEC, (byte)0x7B, (byte)0x67, (byte)0x75,
						(byte)0x8D, (byte)0x65, (byte)0xC9, (byte)0xBF, (byte)0xF7, (byte)0x82, (byte)0x8B, (byte)0x6B,
						(byte)0x82, (byte)0xD4, (byte)0xBE, (byte)0x12, (byte)0x4A, (byte)0x41, (byte)0x6A, (byte)0xB7,
						(byte)0x30, (byte)0x19, (byte)0x14, (byte)0x31, (byte)0x1E, (byte)0xA4, (byte)0x62, (byte)0xC1,
						(byte)0x9F, (byte)0x77, (byte)0x1F, (byte)0x31, (byte)0xB3, (byte)0xB5, (byte)0x73, (byte)0x36,
						(byte)0x00, (byte)0x0D, (byte)0xFF, (byte)0x73, (byte)0x2D, (byte)0x3B, (byte)0x83, (byte)0xDE,
						(byte)0x07, (byte)0x05, (byte)0x2D, (byte)0x73, (byte)0x03, (byte)0x54, (byte)0xD2, (byte)0x97,
						(byte)0xBE, (byte)0xC7, (byte)0x28, (byte)0x71, (byte)0xDC, (byte)0xCF, (byte)0x0E, (byte)0x19,
						(byte)0x3F, (byte)0x17, (byte)0x1A, (byte)0xBA, (byte)0x27, (byte)0xEE, (byte)0x46, (byte)0x4C,
						(byte)0x6A, (byte)0x97, (byte)0x69, (byte)0x09, (byte)0x43, (byte)0xD5, (byte)0x9B, (byte)0xDA,
						(byte)0xBB, (byte)0x2A, (byte)0x27, (byte)0xEB, (byte)0x71, (byte)0xCE, (byte)0xEB, (byte)0xDA,
						(byte)0xFA, (byte)0x11, (byte)0x76, (byte)0x04, (byte)0x64, (byte)0x78, (byte)0xFD, (byte)0x62,
						(byte)0xFE, (byte)0xC4, (byte)0x52, (byte)0xD5, (byte)0xCA, (byte)0x39, (byte)0x32, (byte)0x96,
						(byte)0x53, (byte)0x0A, (byte)0xA3, (byte)0xF4, (byte)0x19, (byte)0x27, (byte)0xAD, (byte)0xFE,
						(byte)0x43, (byte)0x4A, (byte)0x2D, (byte)0xF2, (byte)0xAE, (byte)0x30, (byte)0x54, (byte)0xF8,
						(byte)0x84, (byte)0x06, (byte)0x57, (byte)0xA2, (byte)0x6E, (byte)0x0F, (byte)0xC6, (byte)0x17},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC4, (byte)0xA3, (byte)0xC4, (byte)0x3C, (byte)0xCF, (byte)0x87, (byte)0x32, (byte)0x7D,
						(byte)0x13, (byte)0x6B, (byte)0x80, (byte)0x41, (byte)0x60, (byte)0xE4, (byte)0x7D, (byte)0x43,
						(byte)0xB6, (byte)0x0E, (byte)0x6E, (byte)0x0F}
		);
		//09. VISA(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},
				(byte)0x95,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xBE, (byte)0x9E, (byte)0x1F, (byte)0xA5, (byte)0xE9, (byte)0xA8, (byte)0x03, (byte)0x85,
						(byte)0x29, (byte)0x99, (byte)0xC4, (byte)0xAB, (byte)0x43, (byte)0x2D, (byte)0xB2, (byte)0x86,
						(byte)0x00, (byte)0xDC, (byte)0xD9, (byte)0xDA, (byte)0xB7, (byte)0x6D, (byte)0xFA, (byte)0xAA,
						(byte)0x47, (byte)0x35, (byte)0x5A, (byte)0x0F, (byte)0xE3, (byte)0x7B, (byte)0x15, (byte)0x08,
						(byte)0xAC, (byte)0x6B, (byte)0xF3, (byte)0x88, (byte)0x60, (byte)0xD3, (byte)0xC6, (byte)0xC2,
						(byte)0xE5, (byte)0xB1, (byte)0x2A, (byte)0x3C, (byte)0xAA, (byte)0xF2, (byte)0xA7, (byte)0x00,
						(byte)0x5A, (byte)0x72, (byte)0x41, (byte)0xEB, (byte)0xAA, (byte)0x77, (byte)0x71, (byte)0x11,
						(byte)0x2C, (byte)0x74, (byte)0xCF, (byte)0x9A, (byte)0x06, (byte)0x34, (byte)0x65, (byte)0x2F,
						(byte)0xBC, (byte)0xA0, (byte)0xE5, (byte)0x98, (byte)0x0C, (byte)0x54, (byte)0xA6, (byte)0x47,
						(byte)0x61, (byte)0xEA, (byte)0x10, (byte)0x1A, (byte)0x11, (byte)0x4E, (byte)0x0F, (byte)0x0B,
						(byte)0x55, (byte)0x72, (byte)0xAD, (byte)0xD5, (byte)0x7D, (byte)0x01, (byte)0x0B, (byte)0x7C,
						(byte)0x9C, (byte)0x88, (byte)0x7E, (byte)0x10, (byte)0x4C, (byte)0xA4, (byte)0xEE, (byte)0x12,
						(byte)0x72, (byte)0xDA, (byte)0x66, (byte)0xD9, (byte)0x97, (byte)0xB9, (byte)0xA9, (byte)0x0B,
						(byte)0x5A, (byte)0x6D, (byte)0x62, (byte)0x4A, (byte)0xB6, (byte)0xC5, (byte)0x7E, (byte)0x73,
						(byte)0xC8, (byte)0xF9, (byte)0x19, (byte)0x00, (byte)0x0E, (byte)0xB5, (byte)0xF6, (byte)0x84,
						(byte)0x89, (byte)0x8E, (byte)0xF8, (byte)0xC3, (byte)0xDB, (byte)0xEF, (byte)0xB3, (byte)0x30,
						(byte)0xC6, (byte)0x26, (byte)0x60, (byte)0xBE, (byte)0xD8, (byte)0x8E, (byte)0xA7, (byte)0x8E,
						(byte)0x90, (byte)0x9A, (byte)0xFF, (byte)0x05, (byte)0xF6, (byte)0xDA, (byte)0x62, (byte)0x7B},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xEE, (byte)0x15, (byte)0x11, (byte)0xCE, (byte)0xC7, (byte)0x10, (byte)0x20, (byte)0xA9,
						(byte)0xB9, (byte)0x04, (byte)0x43, (byte)0xB3, (byte)0x7B, (byte)0x1D, (byte)0x5F, (byte)0x6E,
						(byte)0x70, (byte)0x30, (byte)0x30, (byte)0xF6}
		);
		//10. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x03},
				(byte)0x99,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,
				new byte[]{(byte)0xAB, (byte)0x79, (byte)0xFC, (byte)0xC9, (byte)0x52, (byte)0x08, (byte)0x96, (byte)0x96,
						(byte)0x7E, (byte)0x77, (byte)0x6E, (byte)0x64, (byte)0x44, (byte)0x4E, (byte)0x5D, (byte)0xCD,
						(byte)0xD6, (byte)0xE1, (byte)0x36, (byte)0x11, (byte)0x87, (byte)0x4F, (byte)0x39, (byte)0x85,
						(byte)0x72, (byte)0x25, (byte)0x20, (byte)0x42, (byte)0x52, (byte)0x95, (byte)0xEE, (byte)0xA4,
						(byte)0xBD, (byte)0x0C, (byte)0x27, (byte)0x81, (byte)0xDE, (byte)0x7F, (byte)0x31, (byte)0xCD,
						(byte)0x3D, (byte)0x04, (byte)0x1F, (byte)0x56, (byte)0x5F, (byte)0x74, (byte)0x73, (byte)0x06,
						(byte)0xEE, (byte)0xD6, (byte)0x29, (byte)0x54, (byte)0xB1, (byte)0x7E, (byte)0xDA, (byte)0xBA,
						(byte)0x3A, (byte)0x6C, (byte)0x5B, (byte)0x85, (byte)0xA1, (byte)0xDE, (byte)0x1B, (byte)0xEB,
						(byte)0x9A, (byte)0x34, (byte)0x14, (byte)0x1A, (byte)0xF3, (byte)0x8F, (byte)0xCF, (byte)0x82,
						(byte)0x79, (byte)0xC9, (byte)0xDE, (byte)0xA0, (byte)0xD5, (byte)0xA6, (byte)0x71, (byte)0x0D,
						(byte)0x08, (byte)0xDB, (byte)0x41, (byte)0x24, (byte)0xF0, (byte)0x41, (byte)0x94, (byte)0x55,
						(byte)0x87, (byte)0xE2, (byte)0x03, (byte)0x59, (byte)0xBA, (byte)0xB4, (byte)0x7B, (byte)0x75,
						(byte)0x75, (byte)0xAD, (byte)0x94, (byte)0x26, (byte)0x2D, (byte)0x4B, (byte)0x25, (byte)0xF2,
						(byte)0x64, (byte)0xAF, (byte)0x33, (byte)0xDE, (byte)0xDC, (byte)0xF2, (byte)0x8E, (byte)0x09,
						(byte)0x61, (byte)0x5E, (byte)0x93, (byte)0x7D, (byte)0xE3, (byte)0x2E, (byte)0xDC, (byte)0x03,
						(byte)0xC5, (byte)0x44, (byte)0x45, (byte)0xFE, (byte)0x7E, (byte)0x38, (byte)0x27, (byte)0x77},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}
		);
		//11. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},/*RID*/
				(byte)0x01,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x60,/*length in bits of modulus */
				new byte[]{(byte)0xd2, (byte)0x01, (byte)0x07, (byte)0x16, (byte)0xc9, (byte)0xfb, (byte)0x52, (byte)0x64,
						(byte)0xd8, (byte)0xc9, (byte)0x1a, (byte)0x14, (byte)0xf4, (byte)0xf3, (byte)0x2f, (byte)0x89,
						(byte)0x81, (byte)0xee, (byte)0x95, (byte)0x4f, (byte)0x20, (byte)0x08, (byte)0x7e, (byte)0xd7,
						(byte)0x7c, (byte)0xdc, (byte)0x58, (byte)0x68, (byte)0x43, (byte)0x17, (byte)0x28, (byte)0xd3,
						(byte)0x63, (byte)0x7c, (byte)0x63, (byte)0x2c, (byte)0xcf, (byte)0x27, (byte)0x18, (byte)0xa4,
						(byte)0xf5, (byte)0xd9, (byte)0x2e, (byte)0xa8, (byte)0xab, (byte)0x16, (byte)0x6a, (byte)0xb9,
						(byte)0x92, (byte)0xd2, (byte)0xde, (byte)0x24, (byte)0xe9, (byte)0xfb, (byte)0xdc, (byte)0x7c,
						(byte)0xab, (byte)0x97, (byte)0x29, (byte)0x40, (byte)0x1e, (byte)0x91, (byte)0xc5, (byte)0x02,
						(byte)0xd7, (byte)0x2b, (byte)0x39, (byte)0xf6, (byte)0x86, (byte)0x6f, (byte)0x5c, (byte)0x09,
						(byte)0x8b, (byte)0x12, (byte)0x43, (byte)0xb1, (byte)0x32, (byte)0xaf, (byte)0xee, (byte)0x65,
						(byte)0xf5, (byte)0x03, (byte)0x6e, (byte)0x16, (byte)0x83, (byte)0x23, (byte)0x11, (byte)0x63,
						(byte)0x38, (byte)0xf8, (byte)0x04, (byte)0x08, (byte)0x34, (byte)0xb9, (byte)0x87, (byte)0x25},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}
		);
		//12. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0x02,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x70,//112
				new byte[]{(byte)0xCF, (byte)0x42, (byte)0x64, (byte)0xE1, (byte)0x70, (byte)0x2D, (byte)0x34, (byte)0xCA,
						(byte)0x89, (byte)0x7D, (byte)0x1F, (byte)0x9B, (byte)0x66, (byte)0xC5, (byte)0xD6, (byte)0x36,
						(byte)0x91, (byte)0xEA, (byte)0xCC, (byte)0x61, (byte)0x2C, (byte)0x8F, (byte)0x14, (byte)0x71,
						(byte)0x16, (byte)0xBB, (byte)0x22, (byte)0xD0, (byte)0xC4, (byte)0x63, (byte)0x49, (byte)0x5B,
						(byte)0xD5, (byte)0xBA, (byte)0x70, (byte)0xFB, (byte)0x15, (byte)0x38, (byte)0x48, (byte)0x89,
						(byte)0x52, (byte)0x20, (byte)0xB8, (byte)0xAD, (byte)0xEE, (byte)0xC3, (byte)0xE7, (byte)0xBA,
						(byte)0xB3, (byte)0x1E, (byte)0xA2, (byte)0x2C, (byte)0x1D, (byte)0xC9, (byte)0x97, (byte)0x2F,
						(byte)0xA0, (byte)0x27, (byte)0xD5, (byte)0x42, (byte)0x65, (byte)0xBE, (byte)0xBF, (byte)0x0A,
						(byte)0xE3, (byte)0xA2, (byte)0x3A, (byte)0x8A, (byte)0x09, (byte)0x18, (byte)0x7F, (byte)0x21,
						(byte)0xC8, (byte)0x56, (byte)0x60, (byte)0x7B, (byte)0x98, (byte)0xBD, (byte)0xA6, (byte)0xFC,
						(byte)0x90, (byte)0x81, (byte)0x16, (byte)0x81, (byte)0x6C, (byte)0x50, (byte)0x2B, (byte)0x3E,
						(byte)0x58, (byte)0xA1, (byte)0x45, (byte)0x25, (byte)0x4E, (byte)0xEF, (byte)0xEE, (byte)0x2A,
						(byte)0x33, (byte)0x35, (byte)0x11, (byte)0x02, (byte)0x24, (byte)0x02, (byte)0x8B, (byte)0x67,
						(byte)0x80, (byte)0x9D, (byte)0xCB, (byte)0x80, (byte)0x58, (byte)0xE2, (byte)0x48, (byte)0x95},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xAF, (byte)0x1C, (byte)0xC1, (byte)0xFD, (byte)0x1C, (byte)0x1B, (byte)0xC9, (byte)0xBC,
						(byte)0xA0, (byte)0x7E, (byte)0x78, (byte)0xDA, (byte)0x6C, (byte)0xBA, (byte)0x21, (byte)0x63,
						(byte)0xF1, (byte)0x69, (byte)0xCB, (byte)0xB7}
		);
		//13. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0x03,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,//128
				new byte[]{(byte)0xC2, (byte)0x49, (byte)0x07, (byte)0x47, (byte)0xFE, (byte)0x17, (byte)0xEB, (byte)0x05,
						(byte)0x84, (byte)0xC8, (byte)0x8D, (byte)0x47, (byte)0xB1, (byte)0x60, (byte)0x27, (byte)0x04,
						(byte)0x15, (byte)0x0A, (byte)0xDC, (byte)0x88, (byte)0xC5, (byte)0xB9, (byte)0x98, (byte)0xBD,
						(byte)0x59, (byte)0xCE, (byte)0x04, (byte)0x3E, (byte)0xDE, (byte)0xBF, (byte)0x0F, (byte)0xFE,
						(byte)0xE3, (byte)0x09, (byte)0x3A, (byte)0xC7, (byte)0x95, (byte)0x6A, (byte)0xD3, (byte)0xB6,
						(byte)0xAD, (byte)0x45, (byte)0x54, (byte)0xC6, (byte)0xDE, (byte)0x19, (byte)0xA1, (byte)0x78,
						(byte)0xD6, (byte)0xDA, (byte)0x29, (byte)0x5B, (byte)0xE1, (byte)0x5D, (byte)0x52, (byte)0x20,
						(byte)0x64, (byte)0x5E, (byte)0x3C, (byte)0x81, (byte)0x31, (byte)0x66, (byte)0x6F, (byte)0xA4,
						(byte)0xBE, (byte)0x5B, (byte)0x84, (byte)0xFE, (byte)0x13, (byte)0x1E, (byte)0xA4, (byte)0x4B,
						(byte)0x03, (byte)0x93, (byte)0x07, (byte)0x63, (byte)0x8B, (byte)0x9E, (byte)0x74, (byte)0xA8,
						(byte)0xC4, (byte)0x25, (byte)0x64, (byte)0xF8, (byte)0x92, (byte)0xA6, (byte)0x4D, (byte)0xF1,
						(byte)0xCB, (byte)0x15, (byte)0x71, (byte)0x2B, (byte)0x73, (byte)0x6E, (byte)0x33, (byte)0x74,
						(byte)0xF1, (byte)0xBB, (byte)0xB6, (byte)0x81, (byte)0x93, (byte)0x71, (byte)0x60, (byte)0x2D,
						(byte)0x89, (byte)0x70, (byte)0xE9, (byte)0x7B, (byte)0x90, (byte)0x07, (byte)0x93, (byte)0xC7,
						(byte)0xC2, (byte)0xA8, (byte)0x9A, (byte)0x4A, (byte)0x16, (byte)0x49, (byte)0xA5, (byte)0x9B,
						(byte)0xE6, (byte)0x80, (byte)0x57, (byte)0x4D, (byte)0xD0, (byte)0xB6, (byte)0x01, (byte)0x45},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x5A, (byte)0xDD, (byte)0xF2, (byte)0x1D, (byte)0x09, (byte)0x27, (byte)0x86, (byte)0x61,
						(byte)0x14, (byte)0x11, (byte)0x79, (byte)0xCB, (byte)0xEF, (byte)0xF2, (byte)0x72, (byte)0xEA,
						(byte)0x38, (byte)0x4B, (byte)0x13, (byte)0xBB}
		);
		//14. Master(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0x04,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,//144
				new byte[]{(byte)0xA6, (byte)0xDA, (byte)0x42, (byte)0x83, (byte)0x87, (byte)0xA5, (byte)0x02, (byte)0xD7,
						(byte)0xDD, (byte)0xFB, (byte)0x7A, (byte)0x74, (byte)0xD3, (byte)0xF4, (byte)0x12, (byte)0xBE,
						(byte)0x76, (byte)0x26, (byte)0x27, (byte)0x19, (byte)0x7B, (byte)0x25, (byte)0x43, (byte)0x5B,
						(byte)0x7A, (byte)0x81, (byte)0x71, (byte)0x6A, (byte)0x70, (byte)0x01, (byte)0x57, (byte)0xDD,
						(byte)0xD0, (byte)0x6F, (byte)0x7C, (byte)0xC9, (byte)0x9D, (byte)0x6C, (byte)0xA2, (byte)0x8C,
						(byte)0x24, (byte)0x70, (byte)0x52, (byte)0x7E, (byte)0x2C, (byte)0x03, (byte)0x61, (byte)0x6B,
						(byte)0x9C, (byte)0x59, (byte)0x21, (byte)0x73, (byte)0x57, (byte)0xC2, (byte)0x67, (byte)0x4F,
						(byte)0x58, (byte)0x3B, (byte)0x3B, (byte)0xA5, (byte)0xC7, (byte)0xDC, (byte)0xF2, (byte)0x83,
						(byte)0x86, (byte)0x92, (byte)0xD0, (byte)0x23, (byte)0xE3, (byte)0x56, (byte)0x24, (byte)0x20,
						(byte)0xB4, (byte)0x61, (byte)0x5C, (byte)0x43, (byte)0x9C, (byte)0xA9, (byte)0x7C, (byte)0x44,
						(byte)0xDC, (byte)0x9A, (byte)0x24, (byte)0x9C, (byte)0xFC, (byte)0xE7, (byte)0xB3, (byte)0xBF,
						(byte)0xB2, (byte)0x2F, (byte)0x68, (byte)0x22, (byte)0x8C, (byte)0x3A, (byte)0xF1, (byte)0x33,
						(byte)0x29, (byte)0xAA, (byte)0x4A, (byte)0x61, (byte)0x3C, (byte)0xF8, (byte)0xDD, (byte)0x85,
						(byte)0x35, (byte)0x02, (byte)0x37, (byte)0x3D, (byte)0x62, (byte)0xE4, (byte)0x9A, (byte)0xB2,
						(byte)0x56, (byte)0xD2, (byte)0xBC, (byte)0x17, (byte)0x12, (byte)0x0E, (byte)0x54, (byte)0xAE,
						(byte)0xDC, (byte)0xED, (byte)0x6D, (byte)0x96, (byte)0xA4, (byte)0x28, (byte)0x7A, (byte)0xCC,
						(byte)0x5C, (byte)0x04, (byte)0x67, (byte)0x7D, (byte)0x4A, (byte)0x5A, (byte)0x32, (byte)0x0D,
						(byte)0xB8, (byte)0xBE, (byte)0xE2, (byte)0xF7, (byte)0x75, (byte)0xE5, (byte)0xFE, (byte)0xC5},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x38, (byte)0x1A, (byte)0x03, (byte)0x5D, (byte)0xA5, (byte)0x8B, (byte)0x48, (byte)0x2E,
						(byte)0xE2, (byte)0xAF, (byte)0x75, (byte)0xF4, (byte)0xC3, (byte)0xF2, (byte)0xCA, (byte)0x46,
						(byte)0x9B, (byte)0xA4, (byte)0xAA, (byte)0x6C}
		);
		//15. Master(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0x05,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,//176
				new byte[]{(byte)0xB8, (byte)0x04, (byte)0x8A, (byte)0xBC, (byte)0x30, (byte)0xC9, (byte)0x0D, (byte)0x97,
						(byte)0x63, (byte)0x36, (byte)0x54, (byte)0x3E, (byte)0x3F, (byte)0xD7, (byte)0x09, (byte)0x1C,
						(byte)0x8F, (byte)0xE4, (byte)0x80, (byte)0x0D, (byte)0xF8, (byte)0x20, (byte)0xED, (byte)0x55,
						(byte)0xE7, (byte)0xE9, (byte)0x48, (byte)0x13, (byte)0xED, (byte)0x00, (byte)0x55, (byte)0x5B,
						(byte)0x57, (byte)0x3F, (byte)0xEC, (byte)0xA3, (byte)0xD8, (byte)0x4A, (byte)0xF6, (byte)0x13,
						(byte)0x1A, (byte)0x65, (byte)0x1D, (byte)0x66, (byte)0xCF, (byte)0xF4, (byte)0x28, (byte)0x4F,
						(byte)0xB1, (byte)0x3B, (byte)0x63, (byte)0x5E, (byte)0xDD, (byte)0x0E, (byte)0xE4, (byte)0x01,
						(byte)0x76, (byte)0xD8, (byte)0xBF, (byte)0x04, (byte)0xB7, (byte)0xFD, (byte)0x1C, (byte)0x7B,
						(byte)0xAC, (byte)0xF9, (byte)0xAC, (byte)0x73, (byte)0x27, (byte)0xDF, (byte)0xAA, (byte)0x8A,
						(byte)0xA7, (byte)0x2D, (byte)0x10, (byte)0xDB, (byte)0x3B, (byte)0x8E, (byte)0x70, (byte)0xB2,
						(byte)0xDD, (byte)0xD8, (byte)0x11, (byte)0xCB, (byte)0x41, (byte)0x96, (byte)0x52, (byte)0x5E,
						(byte)0xA3, (byte)0x86, (byte)0xAC, (byte)0xC3, (byte)0x3C, (byte)0x0D, (byte)0x9D, (byte)0x45,
						(byte)0x75, (byte)0x91, (byte)0x64, (byte)0x69, (byte)0xC4, (byte)0xE4, (byte)0xF5, (byte)0x3E,
						(byte)0x8E, (byte)0x1C, (byte)0x91, (byte)0x2C, (byte)0xC6, (byte)0x18, (byte)0xCB, (byte)0x22,
						(byte)0xDD, (byte)0xE7, (byte)0xC3, (byte)0x56, (byte)0x8E, (byte)0x90, (byte)0x02, (byte)0x2E,
						(byte)0x6B, (byte)0xBA, (byte)0x77, (byte)0x02, (byte)0x02, (byte)0xE4, (byte)0x52, (byte)0x2A,
						(byte)0x2D, (byte)0xD6, (byte)0x23, (byte)0xD1, (byte)0x80, (byte)0xE2, (byte)0x15, (byte)0xBD,
						(byte)0x1D, (byte)0x15, (byte)0x07, (byte)0xFE, (byte)0x3D, (byte)0xC9, (byte)0x0C, (byte)0xA3,
						(byte)0x10, (byte)0xD2, (byte)0x7B, (byte)0x3E, (byte)0xFC, (byte)0xCD, (byte)0x8F, (byte)0x83,
						(byte)0xDE, (byte)0x30, (byte)0x52, (byte)0xCA, (byte)0xD1, (byte)0xE4, (byte)0x89, (byte)0x38,
						(byte)0xC6, (byte)0x8D, (byte)0x09, (byte)0x5A, (byte)0xAC, (byte)0x91, (byte)0xB5, (byte)0xF3,
						(byte)0x7E, (byte)0x28, (byte)0xBB, (byte)0x49, (byte)0xEC, (byte)0x7E, (byte)0xD5, (byte)0x97},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xD3, (byte)0x4A, (byte)0x6A, (byte)0x77, (byte)0x60, (byte)0x11, (byte)0xC7, (byte)0xE7,
						(byte)0xCE, (byte)0x3A, (byte)0xEC, (byte)0x5F, (byte)0x03, (byte)0xAD, (byte)0x2F, (byte)0x8C,
						(byte)0xFC, (byte)0x55, (byte)0x03, (byte)0xCC}
		);
		//16. Master(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0x06,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xCB, (byte)0x26, (byte)0xFC, (byte)0x83, (byte)0x0B, (byte)0x43, (byte)0x78, (byte)0x5B,
						(byte)0x2B, (byte)0xCE, (byte)0x37, (byte)0xC8, (byte)0x1E, (byte)0xD3, (byte)0x34, (byte)0x62,
						(byte)0x2F, (byte)0x96, (byte)0x22, (byte)0xF4, (byte)0xC8, (byte)0x9A, (byte)0xAE, (byte)0x64,
						(byte)0x10, (byte)0x46, (byte)0xB2, (byte)0x35, (byte)0x34, (byte)0x33, (byte)0x88, (byte)0x3F,
						(byte)0x30, (byte)0x7F, (byte)0xB7, (byte)0xC9, (byte)0x74, (byte)0x16, (byte)0x2D, (byte)0xA7,
						(byte)0x2F, (byte)0x7A, (byte)0x4E, (byte)0xC7, (byte)0x5D, (byte)0x9D, (byte)0x65, (byte)0x73,
						(byte)0x36, (byte)0x86, (byte)0x5B, (byte)0x8D, (byte)0x30, (byte)0x23, (byte)0xD3, (byte)0xD6,
						(byte)0x45, (byte)0x66, (byte)0x76, (byte)0x25, (byte)0xC9, (byte)0xA0, (byte)0x7A, (byte)0x6B,
						(byte)0x7A, (byte)0x13, (byte)0x7C, (byte)0xF0, (byte)0xC6, (byte)0x41, (byte)0x98, (byte)0xAE,
						(byte)0x38, (byte)0xFC, (byte)0x23, (byte)0x80, (byte)0x06, (byte)0xFB, (byte)0x26, (byte)0x03,
						(byte)0xF4, (byte)0x1F, (byte)0x4F, (byte)0x3B, (byte)0xB9, (byte)0xDA, (byte)0x13, (byte)0x47,
						(byte)0x27, (byte)0x0F, (byte)0x2F, (byte)0x5D, (byte)0x8C, (byte)0x60, (byte)0x6E, (byte)0x42,
						(byte)0x09, (byte)0x58, (byte)0xC5, (byte)0xF7, (byte)0xD5, (byte)0x0A, (byte)0x71, (byte)0xDE,
						(byte)0x30, (byte)0x14, (byte)0x2F, (byte)0x70, (byte)0xDE, (byte)0x46, (byte)0x88, (byte)0x89,
						(byte)0xB5, (byte)0xE3, (byte)0xA0, (byte)0x86, (byte)0x95, (byte)0xB9, (byte)0x38, (byte)0xA5,
						(byte)0x0F, (byte)0xC9, (byte)0x80, (byte)0x39, (byte)0x3A, (byte)0x9C, (byte)0xBC, (byte)0xE4,
						(byte)0x4A, (byte)0xD2, (byte)0xD6, (byte)0x4F, (byte)0x63, (byte)0x0B, (byte)0xB3, (byte)0x3A,
						(byte)0xD3, (byte)0xF5, (byte)0xF5, (byte)0xFD, (byte)0x49, (byte)0x5D, (byte)0x31, (byte)0xF3,
						(byte)0x78, (byte)0x18, (byte)0xC1, (byte)0xD9, (byte)0x40, (byte)0x71, (byte)0x34, (byte)0x2E,
						(byte)0x07, (byte)0xF1, (byte)0xBE, (byte)0xC2, (byte)0x19, (byte)0x4F, (byte)0x60, (byte)0x35,
						(byte)0xBA, (byte)0x5D, (byte)0xED, (byte)0x39, (byte)0x36, (byte)0x50, (byte)0x0E, (byte)0xB8,
						(byte)0x2D, (byte)0xFD, (byte)0xA6, (byte)0xE8, (byte)0xAF, (byte)0xB6, (byte)0x55, (byte)0xB1,
						(byte)0xEF, (byte)0x3D, (byte)0x0D, (byte)0x7E, (byte)0xBF, (byte)0x86, (byte)0xB6, (byte)0x6D,
						(byte)0xD9, (byte)0xF2, (byte)0x9F, (byte)0x6B, (byte)0x1D, (byte)0x32, (byte)0x4F, (byte)0xE8,
						(byte)0xB2, (byte)0x6C, (byte)0xE3, (byte)0x8A, (byte)0xB2, (byte)0x01, (byte)0x3D, (byte)0xD1,
						(byte)0x3F, (byte)0x61, (byte)0x1E, (byte)0x7A, (byte)0x59, (byte)0x4D, (byte)0x67, (byte)0x5C,
						(byte)0x44, (byte)0x32, (byte)0x35, (byte)0x0E, (byte)0xA2, (byte)0x44, (byte)0xCC, (byte)0x34,
						(byte)0xF3, (byte)0x87, (byte)0x3C, (byte)0xBA, (byte)0x06, (byte)0x59, (byte)0x29, (byte)0x87,
						(byte)0xA1, (byte)0xD7, (byte)0xE8, (byte)0x52, (byte)0xAD, (byte)0xC2, (byte)0x2E, (byte)0xF5,
						(byte)0xA2, (byte)0xEE, (byte)0x28, (byte)0x13, (byte)0x20, (byte)0x31, (byte)0xE4, (byte)0x8F,
						(byte)0x74, (byte)0x03, (byte)0x7E, (byte)0x3B, (byte)0x34, (byte)0xAB, (byte)0x74, (byte)0x7F},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xF9, (byte)0x10, (byte)0xA1, (byte)0x50, (byte)0x4D, (byte)0x5F, (byte)0xFB, (byte)0x79,
						(byte)0x3D, (byte)0x94, (byte)0xF3, (byte)0xB5, (byte)0x00, (byte)0x76, (byte)0x5E, (byte)0x1A,
						(byte)0xBC, (byte)0xAD, (byte)0x72, (byte)0xD9}
		);
		//17. (non KOCES)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0xEF,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,//248
				new byte[]{(byte)0xA1, (byte)0x91, (byte)0xCB, (byte)0x87, (byte)0x47, (byte)0x3F, (byte)0x29, (byte)0x34,
						(byte)0x9B, (byte)0x5D, (byte)0x60, (byte)0xA8, (byte)0x8B, (byte)0x3E, (byte)0xAE, (byte)0xE0,
						(byte)0x97, (byte)0x3A, (byte)0xA6, (byte)0xF1, (byte)0xA0, (byte)0x82, (byte)0xF3, (byte)0x58,
						(byte)0xD8, (byte)0x49, (byte)0xFD, (byte)0xDF, (byte)0xF9, (byte)0xC0, (byte)0x91, (byte)0xF8,
						(byte)0x99, (byte)0xED, (byte)0xA9, (byte)0x79, (byte)0x2C, (byte)0xAF, (byte)0x09, (byte)0xEF,
						(byte)0x28, (byte)0xF5, (byte)0xD2, (byte)0x24, (byte)0x04, (byte)0xB8, (byte)0x8A, (byte)0x22,
						(byte)0x93, (byte)0xEE, (byte)0xBB, (byte)0xC1, (byte)0x94, (byte)0x9C, (byte)0x43, (byte)0xBE,
						(byte)0xA4, (byte)0xD6, (byte)0x0C, (byte)0xFD, (byte)0x87, (byte)0x9A, (byte)0x15, (byte)0x39,
						(byte)0x54, (byte)0x4E, (byte)0x09, (byte)0xE0, (byte)0xF0, (byte)0x9F, (byte)0x60, (byte)0xF0,
						(byte)0x65, (byte)0xB2, (byte)0xBF, (byte)0x2A, (byte)0x13, (byte)0xEC, (byte)0xC7, (byte)0x05,
						(byte)0xF3, (byte)0xD4, (byte)0x68, (byte)0xB9, (byte)0xD3, (byte)0x3A, (byte)0xE7, (byte)0x7A,
						(byte)0xD9, (byte)0xD3, (byte)0xF1, (byte)0x9C, (byte)0xA4, (byte)0x0F, (byte)0x23, (byte)0xDC,
						(byte)0xF5, (byte)0xEB, (byte)0x7C, (byte)0x04, (byte)0xDC, (byte)0x8F, (byte)0x69, (byte)0xEB,
						(byte)0xA5, (byte)0x65, (byte)0xB1, (byte)0xEB, (byte)0xCB, (byte)0x46, (byte)0x86, (byte)0xCD,
						(byte)0x27, (byte)0x47, (byte)0x85, (byte)0x53, (byte)0x0F, (byte)0xF6, (byte)0xF6, (byte)0xE9,
						(byte)0xEE, (byte)0x43, (byte)0xAA, (byte)0x43, (byte)0xFD, (byte)0xB0, (byte)0x2C, (byte)0xE0,
						(byte)0x0D, (byte)0xAE, (byte)0xC1, (byte)0x5C, (byte)0x7B, (byte)0x8F, (byte)0xD6, (byte)0xA9,
						(byte)0xB3, (byte)0x94, (byte)0xBA, (byte)0xBA, (byte)0x41, (byte)0x9D, (byte)0x3F, (byte)0x6D,
						(byte)0xC8, (byte)0x5E, (byte)0x16, (byte)0x56, (byte)0x9B, (byte)0xE8, (byte)0xE7, (byte)0x69,
						(byte)0x89, (byte)0x68, (byte)0x8E, (byte)0xFE, (byte)0xA2, (byte)0xDF, (byte)0x22, (byte)0xFF,
						(byte)0x7D, (byte)0x35, (byte)0xC0, (byte)0x43, (byte)0x33, (byte)0x8D, (byte)0xEA, (byte)0xA9,
						(byte)0x82, (byte)0xA0, (byte)0x2B, (byte)0x86, (byte)0x6D, (byte)0xE5, (byte)0x32, (byte)0x85,
						(byte)0x19, (byte)0xEB, (byte)0xBC, (byte)0xD6, (byte)0xF0, (byte)0x3C, (byte)0xDD, (byte)0x68,
						(byte)0x66, (byte)0x73, (byte)0x84, (byte)0x7F, (byte)0x84, (byte)0xDB, (byte)0x65, (byte)0x1A,
						(byte)0xB8, (byte)0x6C, (byte)0x28, (byte)0xCF, (byte)0x14, (byte)0x62, (byte)0x56, (byte)0x2C,
						(byte)0x57, (byte)0x7B, (byte)0x85, (byte)0x35, (byte)0x64, (byte)0xA2, (byte)0x90, (byte)0xC8,
						(byte)0x55, (byte)0x6D, (byte)0x81, (byte)0x85, (byte)0x31, (byte)0x26, (byte)0x8D, (byte)0x25,
						(byte)0xCC, (byte)0x98, (byte)0xA4, (byte)0xCC, (byte)0x6A, (byte)0x0B, (byte)0xDF, (byte)0xFF,
						(byte)0xDA, (byte)0x2D, (byte)0xCC, (byte)0xA3, (byte)0xA9, (byte)0x4C, (byte)0x99, (byte)0x85,
						(byte)0x59, (byte)0xE3, (byte)0x07, (byte)0xFD, (byte)0xDF, (byte)0x91, (byte)0x50, (byte)0x06,
						(byte)0xD9, (byte)0xA9, (byte)0x87, (byte)0xB0, (byte)0x7D, (byte)0xDA, (byte)0xEB, (byte)0x3B},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte)0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x38, (byte)0x1A, (byte)0x03, (byte)0x5D, (byte)0xA5, (byte)0x8B, (byte)0x48, (byte)0x2E,
						(byte)0xE2, (byte)0xAF, (byte)0x75, (byte)0xF4, (byte)0xC3, (byte)0xF2, (byte)0xCA, (byte)0x46,
						(byte)0x9B, (byte)0xA4, (byte)0xAA, (byte)0x6C}
		);
		//18. (non KOCES)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0xF1,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,//176
				new byte[]{(byte)0xA0, (byte)0xDC, (byte)0xF4, (byte)0xBD, (byte)0xE1, (byte)0x9C, (byte)0x35, (byte)0x46,
						(byte)0xB4, (byte)0xB6, (byte)0xF0, (byte)0x41, (byte)0x4D, (byte)0x17, (byte)0x4D, (byte)0xDE,
						(byte)0x29, (byte)0x4A, (byte)0xAB, (byte)0xBB, (byte)0x82, (byte)0x8C, (byte)0x5A, (byte)0x83,
						(byte)0x4D, (byte)0x73, (byte)0xAA, (byte)0xE2, (byte)0x7C, (byte)0x99, (byte)0xB0, (byte)0xB0,
						(byte)0x53, (byte)0xA9, (byte)0x02, (byte)0x78, (byte)0x00, (byte)0x72, (byte)0x39, (byte)0xB6,
						(byte)0x45, (byte)0x9F, (byte)0xF0, (byte)0xBB, (byte)0xCD, (byte)0x7B, (byte)0x4B, (byte)0x9C,
						(byte)0x6C, (byte)0x50, (byte)0xAC, (byte)0x02, (byte)0xCE, (byte)0x91, (byte)0x36, (byte)0x8D,
						(byte)0xA1, (byte)0xBD, (byte)0x21, (byte)0xAA, (byte)0xEA, (byte)0xDB, (byte)0xC6, (byte)0x53,
						(byte)0x47, (byte)0x33, (byte)0x7D, (byte)0x89, (byte)0xB6, (byte)0x8F, (byte)0x5C, (byte)0x99,
						(byte)0xA0, (byte)0x9D, (byte)0x05, (byte)0xBE, (byte)0x02, (byte)0xDD, (byte)0x1F, (byte)0x8C,
						(byte)0x5B, (byte)0xA2, (byte)0x0E, (byte)0x2F, (byte)0x13, (byte)0xFB, (byte)0x2A, (byte)0x27,
						(byte)0xC4, (byte)0x1D, (byte)0x3F, (byte)0x85, (byte)0xCA, (byte)0xD5, (byte)0xCF, (byte)0x66,
						(byte)0x68, (byte)0xE7, (byte)0x58, (byte)0x51, (byte)0xEC, (byte)0x66, (byte)0xED, (byte)0xBF,
						(byte)0x98, (byte)0x85, (byte)0x1F, (byte)0xD4, (byte)0xE4, (byte)0x2C, (byte)0x44, (byte)0xC1,
						(byte)0xD5, (byte)0x9F, (byte)0x59, (byte)0x84, (byte)0x70, (byte)0x3B, (byte)0x27, (byte)0xD5,
						(byte)0xB9, (byte)0xF2, (byte)0x1B, (byte)0x8F, (byte)0xA0, (byte)0xD9, (byte)0x32, (byte)0x79,
						(byte)0xFB, (byte)0xBF, (byte)0x69, (byte)0xE0, (byte)0x90, (byte)0x64, (byte)0x29, (byte)0x09,
						(byte)0xC9, (byte)0xEA, (byte)0x27, (byte)0xF8, (byte)0x98, (byte)0x95, (byte)0x95, (byte)0x41,
						(byte)0xAA, (byte)0x67, (byte)0x57, (byte)0xF5, (byte)0xF6, (byte)0x24, (byte)0x10, (byte)0x4F,
						(byte)0x6E, (byte)0x1D, (byte)0x3A, (byte)0x95, (byte)0x32, (byte)0xF2, (byte)0xA6, (byte)0xE5,
						(byte)0x15, (byte)0x15, (byte)0xAE, (byte)0xAD, (byte)0x1B, (byte)0x43, (byte)0xB3, (byte)0xD7,
						(byte)0x83, (byte)0x50, (byte)0x88, (byte)0xA2, (byte)0xFA, (byte)0xFA, (byte)0x7B, (byte)0xE7},
				(byte)0x01,
				new byte[]	{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x38, (byte)0x1A, (byte)0x03, (byte)0x5D, (byte)0xA5, (byte)0x8B, (byte)0x48, (byte)0x2E,
						(byte)0xE2, (byte)0xAF, (byte)0x75, (byte)0xF4, (byte)0xC3, (byte)0xF2, (byte)0xCA, (byte)0x46,
						(byte)0x9B, (byte)0xA4, (byte)0xAA, (byte)0x6C}
		);
		//19. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0xF3,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,//144
				new byte[]{(byte)0x98, (byte)0xF0, (byte)0xC7, (byte)0x70, (byte)0xF2, (byte)0x38, (byte)0x64, (byte)0xC2,
						(byte)0xE7, (byte)0x66, (byte)0xDF, (byte)0x02, (byte)0xD1, (byte)0xE8, (byte)0x33, (byte)0xDF,
						(byte)0xF4, (byte)0xFF, (byte)0xE9, (byte)0x2D, (byte)0x69, (byte)0x6E, (byte)0x16, (byte)0x42,
						(byte)0xF0, (byte)0xA8, (byte)0x8C, (byte)0x56, (byte)0x94, (byte)0xC6, (byte)0x47, (byte)0x9D,
						(byte)0x16, (byte)0xDB, (byte)0x15, (byte)0x37, (byte)0xBF, (byte)0xE2, (byte)0x9E, (byte)0x4F,
						(byte)0xDC, (byte)0x6E, (byte)0x6E, (byte)0x8A, (byte)0xFD, (byte)0x1B, (byte)0x0E, (byte)0xB7,
						(byte)0xEA, (byte)0x01, (byte)0x24, (byte)0x72, (byte)0x3C, (byte)0x33, (byte)0x31, (byte)0x79,
						(byte)0xBF, (byte)0x19, (byte)0xE9, (byte)0x3F, (byte)0x10, (byte)0x65, (byte)0x8B, (byte)0x2F,
						(byte)0x77, (byte)0x6E, (byte)0x82, (byte)0x9E, (byte)0x87, (byte)0xDA, (byte)0xED, (byte)0xA9,
						(byte)0xC9, (byte)0x4A, (byte)0x8B, (byte)0x33, (byte)0x82, (byte)0x19, (byte)0x9A, (byte)0x35,
						(byte)0x0C, (byte)0x07, (byte)0x79, (byte)0x77, (byte)0xC9, (byte)0x7A, (byte)0xFF, (byte)0x08,
						(byte)0xFD, (byte)0x11, (byte)0x31, (byte)0x0A, (byte)0xC9, (byte)0x50, (byte)0xA7, (byte)0x2C,
						(byte)0x3C, (byte)0xA5, (byte)0x00, (byte)0x2E, (byte)0xF5, (byte)0x13, (byte)0xFC, (byte)0xCC,
						(byte)0x28, (byte)0x6E, (byte)0x64, (byte)0x6E, (byte)0x3C, (byte)0x53, (byte)0x87, (byte)0x53,
						(byte)0x5D, (byte)0x50, (byte)0x95, (byte)0x14, (byte)0xB3, (byte)0xB3, (byte)0x26, (byte)0xE1,
						(byte)0x23, (byte)0x4F, (byte)0x9C, (byte)0xB4, (byte)0x8C, (byte)0x36, (byte)0xDD, (byte)0xD4,
						(byte)0x4B, (byte)0x41, (byte)0x6D, (byte)0x23, (byte)0x65, (byte)0x40, (byte)0x34, (byte)0xA6,
						(byte)0x6F, (byte)0x40, (byte)0x3B, (byte)0xA5, (byte)0x11, (byte)0xC5, (byte)0xEF, (byte)0xA3},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xA6, (byte)0x9A, (byte)0xC7, (byte)0x60, (byte)0x3D, (byte)0xAF, (byte)0x56, (byte)0x6E,
						(byte)0x97, (byte)0x2D, (byte)0xED, (byte)0xC2, (byte)0xCB, (byte)0x43, (byte)0x3E, (byte)0x07,
						(byte)0xE8, (byte)0xB0, (byte)0x1A, (byte)0x9A}
		);
		//20. (non KOCES)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0xF8,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,//128
				new byte[]{(byte)0xA1, (byte)0xF5, (byte)0xE1, (byte)0xC9, (byte)0xBD, (byte)0x86, (byte)0x50, (byte)0xBD,
						(byte)0x43, (byte)0xAB, (byte)0x6E, (byte)0xE5, (byte)0x6B, (byte)0x89, (byte)0x1E, (byte)0xF7,
						(byte)0x45, (byte)0x9C, (byte)0x0A, (byte)0x24, (byte)0xFA, (byte)0x84, (byte)0xF9, (byte)0x12,
						(byte)0x7D, (byte)0x1A, (byte)0x6C, (byte)0x79, (byte)0xD4, (byte)0x93, (byte)0x0F, (byte)0x6D,
						(byte)0xB1, (byte)0x85, (byte)0x2E, (byte)0x25, (byte)0x10, (byte)0xF1, (byte)0x8B, (byte)0x61,
						(byte)0xCD, (byte)0x35, (byte)0x4D, (byte)0xB8, (byte)0x3A, (byte)0x35, (byte)0x6B, (byte)0xD1,
						(byte)0x90, (byte)0xB8, (byte)0x8A, (byte)0xB8, (byte)0xDF, (byte)0x04, (byte)0x28, (byte)0x4D,
						(byte)0x02, (byte)0xA4, (byte)0x20, (byte)0x4A, (byte)0x7B, (byte)0x6C, (byte)0xB7, (byte)0xC5,
						(byte)0x55, (byte)0x19, (byte)0x77, (byte)0xA9, (byte)0xB3, (byte)0x63, (byte)0x79, (byte)0xCA,
						(byte)0x3D, (byte)0xE1, (byte)0xA0, (byte)0x8E, (byte)0x69, (byte)0xF3, (byte)0x01, (byte)0xC9,
						(byte)0x5C, (byte)0xC1, (byte)0xC2, (byte)0x05, (byte)0x06, (byte)0x95, (byte)0x92, (byte)0x75,
						(byte)0xF4, (byte)0x17, (byte)0x23, (byte)0xDD, (byte)0x5D, (byte)0x29, (byte)0x25, (byte)0x29,
						(byte)0x05, (byte)0x79, (byte)0xE5, (byte)0xA9, (byte)0x5B, (byte)0x0D, (byte)0xF6, (byte)0x32,
						(byte)0x3F, (byte)0xC8, (byte)0xE9, (byte)0x27, (byte)0x3D, (byte)0x6F, (byte)0x84, (byte)0x91,
						(byte)0x98, (byte)0xC4, (byte)0x99, (byte)0x62, (byte)0x09, (byte)0x16, (byte)0x6D, (byte)0x9B,
						(byte)0xFC, (byte)0x97, (byte)0x3C, (byte)0x36, (byte)0x1C, (byte)0xC8, (byte)0x26, (byte)0xE1},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xA6, (byte)0x9A, (byte)0xC7, (byte)0x60, (byte)0x3D, (byte)0xAF, (byte)0x56, (byte)0x6E,
						(byte)0x97, (byte)0x2D, (byte)0xED, (byte)0xC2, (byte)0xCB, (byte)0x43, (byte)0x3E, (byte)0x07,
						(byte)0xE8, (byte)0xB0, (byte)0x1A, (byte)0x9A}
		);
		//21. (non KOCES)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0xFA,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,//144
				new byte[]{(byte)0xA9, (byte)0x0F, (byte)0xCD, (byte)0x55, (byte)0xAA, (byte)0x2D, (byte)0x5D, (byte)0x99,
						(byte)0x63, (byte)0xE3, (byte)0x5E, (byte)0xD0, (byte)0xF4, (byte)0x40, (byte)0x17, (byte)0x76,
						(byte)0x99, (byte)0x83, (byte)0x2F, (byte)0x49, (byte)0xC6, (byte)0xBA, (byte)0xB1, (byte)0x5C,
						(byte)0xDA, (byte)0xE5, (byte)0x79, (byte)0x4B, (byte)0xE9, (byte)0x3F, (byte)0x93, (byte)0x4D,
						(byte)0x44, (byte)0x62, (byte)0xD5, (byte)0xD1, (byte)0x27, (byte)0x62, (byte)0xE4, (byte)0x8C,
						(byte)0x38, (byte)0xBA, (byte)0x83, (byte)0xD8, (byte)0x44, (byte)0x5D, (byte)0xEA, (byte)0xA7,
						(byte)0x41, (byte)0x95, (byte)0xA3, (byte)0x01, (byte)0xA1, (byte)0x02, (byte)0xB2, (byte)0xF1,
						(byte)0x14, (byte)0xEA, (byte)0xDA, (byte)0x0D, (byte)0x18, (byte)0x0E, (byte)0xE5, (byte)0xE7,
						(byte)0xA5, (byte)0xC7, (byte)0x3E, (byte)0x0C, (byte)0x4E, (byte)0x11, (byte)0xF6, (byte)0x7A,
						(byte)0x43, (byte)0xDD, (byte)0xAB, (byte)0x5D, (byte)0x55, (byte)0x68, (byte)0x3B, (byte)0x14,
						(byte)0x74, (byte)0xCC, (byte)0x06, (byte)0x27, (byte)0xF4, (byte)0x4B, (byte)0x8D, (byte)0x30,
						(byte)0x88, (byte)0xA4, (byte)0x92, (byte)0xFF, (byte)0xAA, (byte)0xDA, (byte)0xD4, (byte)0xF4,
						(byte)0x24, (byte)0x22, (byte)0xD0, (byte)0xE7, (byte)0x01, (byte)0x35, (byte)0x36, (byte)0xC3,
						(byte)0xC4, (byte)0x9A, (byte)0xD3, (byte)0xD0, (byte)0xFA, (byte)0xE9, (byte)0x64, (byte)0x59,
						(byte)0xB0, (byte)0xF6, (byte)0xB1, (byte)0xB6, (byte)0x05, (byte)0x65, (byte)0x38, (byte)0xA3,
						(byte)0xD6, (byte)0xD4, (byte)0x46, (byte)0x40, (byte)0xF9, (byte)0x44, (byte)0x67, (byte)0xB1,
						(byte)0x08, (byte)0x86, (byte)0x7D, (byte)0xEC, (byte)0x40, (byte)0xFA, (byte)0xAE, (byte)0xCD,
						(byte)0x74, (byte)0x0C, (byte)0x00, (byte)0xE2, (byte)0xB7, (byte)0xA8, (byte)0x85, (byte)0x2D},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xA6, (byte)0x9A, (byte)0xC7, (byte)0x60, (byte)0x3D, (byte)0xAF, (byte)0x56, (byte)0x6E,
						(byte)0x97, (byte)0x2D, (byte)0xED, (byte)0xC2, (byte)0xCB, (byte)0x43, (byte)0x3E, (byte)0x07,
						(byte)0xE8, (byte)0xB0, (byte)0x1A, (byte)0x9A}
		);
		//20. (non KOCES)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04},
				(byte)0xFE,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,//128
				new byte[]{(byte)0xA6, (byte)0x53, (byte)0xEA, (byte)0xC1, (byte)0xC0, (byte)0xF7, (byte)0x86, (byte)0xC8,
						(byte)0x72, (byte)0x4F, (byte)0x73, (byte)0x7F, (byte)0x17, (byte)0x29, (byte)0x97, (byte)0xD6,
						(byte)0x3D, (byte)0x1C, (byte)0x32, (byte)0x51, (byte)0xC4, (byte)0x44, (byte)0x02, (byte)0x04,
						(byte)0x9B, (byte)0x86, (byte)0x5B, (byte)0xAE, (byte)0x87, (byte)0x7D, (byte)0x0F, (byte)0x39,
						(byte)0x8C, (byte)0xBF, (byte)0xBE, (byte)0x8A, (byte)0x60, (byte)0x35, (byte)0xE2, (byte)0x4A,
						(byte)0xFA, (byte)0x08, (byte)0x6B, (byte)0xEF, (byte)0xDE, (byte)0x93, (byte)0x51, (byte)0xE5,
						(byte)0x4B, (byte)0x95, (byte)0x70, (byte)0x8E, (byte)0xE6, (byte)0x72, (byte)0xF0, (byte)0x96,
						(byte)0x8B, (byte)0xCD, (byte)0x50, (byte)0xDC, (byte)0xE4, (byte)0x0F, (byte)0x78, (byte)0x33,
						(byte)0x22, (byte)0xB2, (byte)0xAB, (byte)0xA0, (byte)0x4E, (byte)0xF1, (byte)0x37, (byte)0xEF,
						(byte)0x18, (byte)0xAB, (byte)0xF0, (byte)0x3C, (byte)0x7D, (byte)0xBC, (byte)0x58, (byte)0x13,
						(byte)0xAE, (byte)0xAE, (byte)0xF3, (byte)0xAA, (byte)0x77, (byte)0x97, (byte)0xBA, (byte)0x15,
						(byte)0xDF, (byte)0x7D, (byte)0x5B, (byte)0xA1, (byte)0xCB, (byte)0xAF, (byte)0x7F, (byte)0xD5,
						(byte)0x20, (byte)0xB5, (byte)0xA4, (byte)0x82, (byte)0xD8, (byte)0xD3, (byte)0xFE, (byte)0xE1,
						(byte)0x05, (byte)0x07, (byte)0x78, (byte)0x71, (byte)0x11, (byte)0x3E, (byte)0x23, (byte)0xA4,
						(byte)0x9A, (byte)0xF3, (byte)0x92, (byte)0x65, (byte)0x54, (byte)0xA7, (byte)0x0F, (byte)0xE1,
						(byte)0x0E, (byte)0xD7, (byte)0x28, (byte)0xCF, (byte)0x79, (byte)0x3B, (byte)0x62, (byte)0xA1},
				(byte)0x01,
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xA6, (byte)0x9A, (byte)0xC7, (byte)0x60, (byte)0x3D, (byte)0xAF, (byte)0x56, (byte)0x6E,
						(byte)0x97, (byte)0x2D, (byte)0xED, (byte)0xC2, (byte)0xCB, (byte)0x43, (byte)0x3E, (byte)0x07,
						(byte)0xE8, (byte)0xB0, (byte)0x1A, (byte)0x9A}
		);
		//23. CUP(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x01,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,
				new byte[]{(byte)0xBB, (byte)0xE9, (byte)0x06, (byte)0x6D, (byte)0x25, (byte)0x17, (byte)0x51, (byte)0x1D,
						(byte)0x23, (byte)0x9C, (byte)0x7B, (byte)0xFA, (byte)0x77, (byte)0x88, (byte)0x41, (byte)0x44,
						(byte)0xAE, (byte)0x20, (byte)0xC7, (byte)0x37, (byte)0x2F, (byte)0x51, (byte)0x51, (byte)0x47,
						(byte)0xE8, (byte)0xCE, (byte)0x65, (byte)0x37, (byte)0xC5, (byte)0x4C, (byte)0x0A, (byte)0x6A,
						(byte)0x4D, (byte)0x45, (byte)0xF8, (byte)0xCA, (byte)0x4D, (byte)0x29, (byte)0x08, (byte)0x70,
						(byte)0xCD, (byte)0xA5, (byte)0x9F, (byte)0x13, (byte)0x44, (byte)0xEF, (byte)0x71, (byte)0xD1,
						(byte)0x7D, (byte)0x3F, (byte)0x35, (byte)0xD9, (byte)0x2F, (byte)0x3F, (byte)0x06, (byte)0x77,
						(byte)0x8D, (byte)0x0D, (byte)0x51, (byte)0x1E, (byte)0xC2, (byte)0xA7, (byte)0xDC, (byte)0x4F,
						(byte)0xFE, (byte)0xAD, (byte)0xF4, (byte)0xFB, (byte)0x12, (byte)0x53, (byte)0xCE, (byte)0x37,
						(byte)0xA7, (byte)0xB2, (byte)0xB5, (byte)0xA3, (byte)0x74, (byte)0x12, (byte)0x27, (byte)0xBE,
						(byte)0xF7, (byte)0x25, (byte)0x24, (byte)0xDA, (byte)0x7A, (byte)0x2B, (byte)0x7B, (byte)0x1C,
						(byte)0xB4, (byte)0x26, (byte)0xBE, (byte)0xE2, (byte)0x7B, (byte)0xC5, (byte)0x13, (byte)0xB0,
						(byte)0xCB, (byte)0x11, (byte)0xAB, (byte)0x99, (byte)0xBC, (byte)0x1B, (byte)0xC6, (byte)0x1D,
						(byte)0xF5, (byte)0xAC, (byte)0x6C, (byte)0xC4, (byte)0xD8, (byte)0x31, (byte)0xD0, (byte)0x84,
						(byte)0x87, (byte)0x88, (byte)0xCD, (byte)0x74, (byte)0xF6, (byte)0xD5, (byte)0x43, (byte)0xAD,
						(byte)0x37, (byte)0xC5, (byte)0xA2, (byte)0xB4, (byte)0xC5, (byte)0xD5, (byte)0xA9, (byte)0x3B},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xE8, (byte)0x81, (byte)0xE3, (byte)0x90, (byte)0x67, (byte)0x5D, (byte)0x44, (byte)0xC2,
						(byte)0xDD, (byte)0x81, (byte)0x23, (byte)0x4D, (byte)0xCE, (byte)0x29, (byte)0xC3, (byte)0xF5,
						(byte)0xAB, (byte)0x22, (byte)0x97, (byte)0xA0}
		);
		//24. CUP(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x02,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xA3, (byte)0x76, (byte)0x7A, (byte)0xBD, (byte)0x1B, (byte)0x6A, (byte)0xA6, (byte)0x9D,
						(byte)0x7F, (byte)0x3F, (byte)0xBF, (byte)0x28, (byte)0xC0, (byte)0x92, (byte)0xDE, (byte)0x9E,
						(byte)0xD1, (byte)0xE6, (byte)0x58, (byte)0xBA, (byte)0x5F, (byte)0x09, (byte)0x09, (byte)0xAF,
						(byte)0x7A, (byte)0x1C, (byte)0xCD, (byte)0x90, (byte)0x73, (byte)0x73, (byte)0xB7, (byte)0x21,
						(byte)0x0F, (byte)0xDE, (byte)0xB1, (byte)0x62, (byte)0x87, (byte)0xBA, (byte)0x8E, (byte)0x78,
						(byte)0xE1, (byte)0x52, (byte)0x9F, (byte)0x44, (byte)0x39, (byte)0x76, (byte)0xFD, (byte)0x27,
						(byte)0xF9, (byte)0x91, (byte)0xEC, (byte)0x67, (byte)0xD9, (byte)0x5E, (byte)0x5F, (byte)0x4E,
						(byte)0x96, (byte)0xB1, (byte)0x27, (byte)0xCA, (byte)0xB2, (byte)0x39, (byte)0x6A, (byte)0x94,
						(byte)0xD6, (byte)0xE4, (byte)0x5C, (byte)0xDA, (byte)0x44, (byte)0xCA, (byte)0x4C, (byte)0x48,
						(byte)0x67, (byte)0x57, (byte)0x0D, (byte)0x6B, (byte)0x07, (byte)0x54, (byte)0x2F, (byte)0x8D,
						(byte)0x4B, (byte)0xF9, (byte)0xFF, (byte)0x97, (byte)0x97, (byte)0x5D, (byte)0xB9, (byte)0x89,
						(byte)0x15, (byte)0x15, (byte)0xE6, (byte)0x6F, (byte)0x52, (byte)0x5D, (byte)0x2B, (byte)0x3C,
						(byte)0xBE, (byte)0xB6, (byte)0xD6, (byte)0x62, (byte)0xBF, (byte)0xB6, (byte)0xC3, (byte)0xF3,
						(byte)0x38, (byte)0xE9, (byte)0x3B, (byte)0x02, (byte)0x14, (byte)0x2B, (byte)0xFC, (byte)0x44,
						(byte)0x17, (byte)0x3A, (byte)0x37, (byte)0x64, (byte)0xC5, (byte)0x6A, (byte)0xAD, (byte)0xD2,
						(byte)0x02, (byte)0x07, (byte)0x5B, (byte)0x26, (byte)0xDC, (byte)0x2F, (byte)0x9F, (byte)0x7D,
						(byte)0x7A, (byte)0xE7, (byte)0x4B, (byte)0xD7, (byte)0xD0, (byte)0x0F, (byte)0xD0, (byte)0x5E,
						(byte)0xE4, (byte)0x30, (byte)0x03, (byte)0x26, (byte)0x63, (byte)0xD2, (byte)0x7A, (byte)0x57},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x03, (byte)0xBB, (byte)0x33, (byte)0x5A, (byte)0x85, (byte)0x49, (byte)0xA0, (byte)0x3B,
						(byte)0x87, (byte)0xAB, (byte)0x08, (byte)0x9D, (byte)0x00, (byte)0x6F, (byte)0x60, (byte)0x85,
						(byte)0x2E, (byte)0x4B, (byte)0x80, (byte)0x60}
		);
		//25. CUP(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x03,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0xB0, (byte)0x62, (byte)0x7D, (byte)0xEE, (byte)0x87, (byte)0x86, (byte)0x4F, (byte)0x9C,
						(byte)0x18, (byte)0xC1, (byte)0x3B, (byte)0x9A, (byte)0x1F, (byte)0x02, (byte)0x54, (byte)0x48,
						(byte)0xBF, (byte)0x13, (byte)0xC5, (byte)0x83, (byte)0x80, (byte)0xC9, (byte)0x1F, (byte)0x4C,
						(byte)0xEB, (byte)0xA9, (byte)0xF9, (byte)0xBC, (byte)0xB2, (byte)0x14, (byte)0xFF, (byte)0x84,
						(byte)0x14, (byte)0xE9, (byte)0xB5, (byte)0x9D, (byte)0x6A, (byte)0xBA, (byte)0x10, (byte)0xF9,
						(byte)0x41, (byte)0xC7, (byte)0x33, (byte)0x17, (byte)0x68, (byte)0xF4, (byte)0x7B, (byte)0x21,
						(byte)0x27, (byte)0x90, (byte)0x7D, (byte)0x85, (byte)0x7F, (byte)0xA3, (byte)0x9A, (byte)0xAF,
						(byte)0x8C, (byte)0xE0, (byte)0x20, (byte)0x45, (byte)0xDD, (byte)0x01, (byte)0x61, (byte)0x9D,
						(byte)0x68, (byte)0x9E, (byte)0xE7, (byte)0x31, (byte)0xC5, (byte)0x51, (byte)0x15, (byte)0x9B,
						(byte)0xE7, (byte)0xEB, (byte)0x2D, (byte)0x51, (byte)0xA3, (byte)0x72, (byte)0xFF, (byte)0x56,
						(byte)0xB5, (byte)0x56, (byte)0xE5, (byte)0xCB, (byte)0x2F, (byte)0xDE, (byte)0x36, (byte)0xE2,
						(byte)0x30, (byte)0x73, (byte)0xA4, (byte)0x4C, (byte)0xA2, (byte)0x15, (byte)0xD6, (byte)0xC2,
						(byte)0x6C, (byte)0xA6, (byte)0x88, (byte)0x47, (byte)0xB3, (byte)0x88, (byte)0xE3, (byte)0x95,
						(byte)0x20, (byte)0xE0, (byte)0x02, (byte)0x6E, (byte)0x62, (byte)0x29, (byte)0x4B, (byte)0x55,
						(byte)0x7D, (byte)0x64, (byte)0x70, (byte)0x44, (byte)0x0C, (byte)0xA0, (byte)0xAE, (byte)0xFC,
						(byte)0x94, (byte)0x38, (byte)0xC9, (byte)0x23, (byte)0xAE, (byte)0xC9, (byte)0xB2, (byte)0x09,
						(byte)0x8D, (byte)0x6D, (byte)0x3A, (byte)0x1A, (byte)0xF5, (byte)0xE8, (byte)0xB1, (byte)0xDE,
						(byte)0x36, (byte)0xF4, (byte)0xB5, (byte)0x30, (byte)0x40, (byte)0x10, (byte)0x9D, (byte)0x89,
						(byte)0xB7, (byte)0x7C, (byte)0xAF, (byte)0xAF, (byte)0x70, (byte)0xC2, (byte)0x6C, (byte)0x60,
						(byte)0x1A, (byte)0xBD, (byte)0xF5, (byte)0x9E, (byte)0xEC, (byte)0x0F, (byte)0xDC, (byte)0x8A,
						(byte)0x99, (byte)0x08, (byte)0x91, (byte)0x40, (byte)0xCD, (byte)0x2E, (byte)0x81, (byte)0x7E,
						(byte)0x33, (byte)0x51, (byte)0x75, (byte)0xB0, (byte)0x3B, (byte)0x7A, (byte)0xA3, (byte)0x3D},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x87, (byte)0xF0, (byte)0xCD, (byte)0x7C, (byte)0x0E, (byte)0x86, (byte)0xF3, (byte)0x8F,
						(byte)0x89, (byte)0xA6, (byte)0x6F, (byte)0x8C, (byte)0x47, (byte)0x07, (byte)0x1A, (byte)0x8B,
						(byte)0x88, (byte)0x58, (byte)0x6F, (byte)0x26}
		);
		//26. CUP(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x04,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xBC, (byte)0x85, (byte)0x3E, (byte)0x6B, (byte)0x53, (byte)0x65, (byte)0xE8, (byte)0x9E,
						(byte)0x7E, (byte)0xE9, (byte)0x31, (byte)0x7C, (byte)0x94, (byte)0xB0, (byte)0x2D, (byte)0x0A,
						(byte)0xBB, (byte)0x0D, (byte)0xBD, (byte)0x91, (byte)0xC0, (byte)0x5A, (byte)0x22, (byte)0x4A,
						(byte)0x25, (byte)0x54, (byte)0xAA, (byte)0x29, (byte)0xED, (byte)0x9F, (byte)0xCB, (byte)0x9D,
						(byte)0x86, (byte)0xEB, (byte)0x9C, (byte)0xCB, (byte)0xB3, (byte)0x22, (byte)0xA5, (byte)0x78,
						(byte)0x11, (byte)0xF8, (byte)0x61, (byte)0x88, (byte)0xAA, (byte)0xC7, (byte)0x35, (byte)0x1C,
						(byte)0x72, (byte)0xBD, (byte)0x9E, (byte)0xF1, (byte)0x96, (byte)0xC5, (byte)0xA0, (byte)0x1A,
						(byte)0xCE, (byte)0xF7, (byte)0xA4, (byte)0xEB, (byte)0x0D, (byte)0x2A, (byte)0xD6, (byte)0x3D,
						(byte)0x9E, (byte)0x6A, (byte)0xC2, (byte)0xE7, (byte)0x83, (byte)0x65, (byte)0x47, (byte)0xCB,
						(byte)0x15, (byte)0x95, (byte)0xC6, (byte)0x8B, (byte)0xCB, (byte)0xAF, (byte)0xD0, (byte)0xF6,
						(byte)0x72, (byte)0x87, (byte)0x60, (byte)0xF3, (byte)0xA7, (byte)0xCA, (byte)0x7B, (byte)0x97,
						(byte)0x30, (byte)0x1B, (byte)0x7E, (byte)0x02, (byte)0x20, (byte)0x18, (byte)0x4E, (byte)0xFC,
						(byte)0x4F, (byte)0x65, (byte)0x30, (byte)0x08, (byte)0xD9, (byte)0x3C, (byte)0xE0, (byte)0x98,
						(byte)0xC0, (byte)0xD9, (byte)0x3B, (byte)0x45, (byte)0x20, (byte)0x10, (byte)0x96, (byte)0xD1,
						(byte)0xAD, (byte)0xFF, (byte)0x4C, (byte)0xF1, (byte)0xF9, (byte)0xFC, (byte)0x02, (byte)0xAF,
						(byte)0x75, (byte)0x9D, (byte)0xA2, (byte)0x7C, (byte)0xD6, (byte)0xDF, (byte)0xD6, (byte)0xD7,
						(byte)0x89, (byte)0xB0, (byte)0x99, (byte)0xF1, (byte)0x6F, (byte)0x37, (byte)0x8B, (byte)0x61,
						(byte)0x00, (byte)0x33, (byte)0x4E, (byte)0x63, (byte)0xF3, (byte)0xD3, (byte)0x5F, (byte)0x32,
						(byte)0x51, (byte)0xA5, (byte)0xEC, (byte)0x78, (byte)0x69, (byte)0x37, (byte)0x31, (byte)0xF5,
						(byte)0x23, (byte)0x35, (byte)0x19, (byte)0xCD, (byte)0xB3, (byte)0x80, (byte)0xF5, (byte)0xAB,
						(byte)0x8C, (byte)0x0F, (byte)0x02, (byte)0x72, (byte)0x8E, (byte)0x91, (byte)0xD4, (byte)0x69,
						(byte)0xAB, (byte)0xD0, (byte)0xEA, (byte)0xE0, (byte)0xD9, (byte)0x3B, (byte)0x1C, (byte)0xC6,
						(byte)0x6C, (byte)0xE1, (byte)0x27, (byte)0xB2, (byte)0x9C, (byte)0x7D, (byte)0x77, (byte)0x44,
						(byte)0x1A, (byte)0x49, (byte)0xD0, (byte)0x9F, (byte)0xCA, (byte)0x5D, (byte)0x6D, (byte)0x97,
						(byte)0x62, (byte)0xFC, (byte)0x74, (byte)0xC3, (byte)0x1B, (byte)0xB5, (byte)0x06, (byte)0xC8,
						(byte)0xBA, (byte)0xE3, (byte)0xC7, (byte)0x9A, (byte)0xD6, (byte)0xC2, (byte)0x57, (byte)0x87,
						(byte)0x75, (byte)0xB9, (byte)0x59, (byte)0x56, (byte)0xB5, (byte)0x37, (byte)0x0D, (byte)0x1D,
						(byte)0x05, (byte)0x19, (byte)0xE3, (byte)0x79, (byte)0x06, (byte)0xB3, (byte)0x84, (byte)0x73,
						(byte)0x62, (byte)0x33, (byte)0x25, (byte)0x1E, (byte)0x8F, (byte)0x09, (byte)0xAD, (byte)0x79,
						(byte)0xDF, (byte)0xBE, (byte)0x2C, (byte)0x6A, (byte)0xBF, (byte)0xAD, (byte)0xAC, (byte)0x8E,
						(byte)0x4D, (byte)0x86, (byte)0x24, (byte)0x31, (byte)0x8C, (byte)0x27, (byte)0xDA, (byte)0xF1},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xF5, (byte)0x27, (byte)0x08, (byte)0x1C, (byte)0xF3, (byte)0x71, (byte)0xDD, (byte)0x7E,
						(byte)0x1F, (byte)0xD4, (byte)0xFA, (byte)0x41, (byte)0x4A, (byte)0x66, (byte)0x50, (byte)0x36,
						(byte)0xE0, (byte)0xF5, (byte)0xE6, (byte)0xE5}
		);
		//27. CUP(Test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x08,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xB6, (byte)0x16, (byte)0x45, (byte)0xED, (byte)0xFD, (byte)0x54, (byte)0x98, (byte)0xFB,
						(byte)0x24, (byte)0x64, (byte)0x44, (byte)0x03, (byte)0x7A, (byte)0x0F, (byte)0xA1, (byte)0x8C,
						(byte)0x0F, (byte)0x10, (byte)0x1E, (byte)0xBD, (byte)0x8E, (byte)0xFA, (byte)0x54, (byte)0x57,
						(byte)0x3C, (byte)0xE6, (byte)0xE6, (byte)0xA7, (byte)0xFB, (byte)0xF6, (byte)0x3E, (byte)0xD2,
						(byte)0x1D, (byte)0x66, (byte)0x34, (byte)0x08, (byte)0x52, (byte)0xB0, (byte)0x21, (byte)0x1C,
						(byte)0xF5, (byte)0xEE, (byte)0xF6, (byte)0xA1, (byte)0xCD, (byte)0x98, (byte)0x9F, (byte)0x66,
						(byte)0xAF, (byte)0x21, (byte)0xA8, (byte)0xEB, (byte)0x19, (byte)0xDB, (byte)0xD8, (byte)0xDB,
						(byte)0xC3, (byte)0x70, (byte)0x6D, (byte)0x13, (byte)0x53, (byte)0x63, (byte)0xA0, (byte)0xD6,
						(byte)0x83, (byte)0xD0, (byte)0x46, (byte)0x30, (byte)0x4F, (byte)0x5A, (byte)0x83, (byte)0x6B,
						(byte)0xC1, (byte)0xBC, (byte)0x63, (byte)0x28, (byte)0x21, (byte)0xAF, (byte)0xE7, (byte)0xA2,
						(byte)0xF7, (byte)0x5D, (byte)0xA3, (byte)0xC5, (byte)0x0A, (byte)0xC7, (byte)0x4C, (byte)0x54,
						(byte)0x5A, (byte)0x75, (byte)0x45, (byte)0x62, (byte)0x20, (byte)0x41, (byte)0x37, (byte)0x16,
						(byte)0x96, (byte)0x63, (byte)0xCF, (byte)0xCC, (byte)0x0B, (byte)0x06, (byte)0xE6, (byte)0x7E,
						(byte)0x21, (byte)0x09, (byte)0xEB, (byte)0xA4, (byte)0x1B, (byte)0xC6, (byte)0x7F, (byte)0xF2,
						(byte)0x0C, (byte)0xC8, (byte)0xAC, (byte)0x80, (byte)0xD7, (byte)0xB6, (byte)0xEE, (byte)0x1A,
						(byte)0x95, (byte)0x46, (byte)0x5B, (byte)0x3B, (byte)0x26, (byte)0x57, (byte)0x53, (byte)0x3E,
						(byte)0xA5, (byte)0x6D, (byte)0x92, (byte)0xD5, (byte)0x39, (byte)0xE5, (byte)0x06, (byte)0x43,
						(byte)0x60, (byte)0xEA, (byte)0x48, (byte)0x50, (byte)0xFE, (byte)0xD2, (byte)0xD1, (byte)0xBF},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xEE, (byte)0x23, (byte)0xB6, (byte)0x16, (byte)0xC9, (byte)0x5C, (byte)0x02, (byte)0x65,
						(byte)0x2A, (byte)0xD1, (byte)0x88, (byte)0x60, (byte)0xE4, (byte)0x87, (byte)0x87, (byte)0xC0,
						(byte)0x79, (byte)0xE8, (byte)0xE8, (byte)0x5A}
		);
		//28. CUP(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x09,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0xEB, (byte)0x37, (byte)0x4D, (byte)0xFC, (byte)0x5A, (byte)0x96, (byte)0xB7, (byte)0x1D,
						(byte)0x28, (byte)0x63, (byte)0x87, (byte)0x5E, (byte)0xDA, (byte)0x2E, (byte)0xAF, (byte)0xB9,
						(byte)0x6B, (byte)0x1B, (byte)0x43, (byte)0x9D, (byte)0x3E, (byte)0xCE, (byte)0x0B, (byte)0x18,
						(byte)0x26, (byte)0xA2, (byte)0x67, (byte)0x2E, (byte)0xEE, (byte)0xFA, (byte)0x79, (byte)0x90,
						(byte)0x28, (byte)0x67, (byte)0x76, (byte)0xF8, (byte)0xBD, (byte)0x98, (byte)0x9A, (byte)0x15,
						(byte)0x14, (byte)0x1A, (byte)0x75, (byte)0xC3, (byte)0x84, (byte)0xDF, (byte)0xC1, (byte)0x4F,
						(byte)0xEF, (byte)0x92, (byte)0x43, (byte)0xAA, (byte)0xB3, (byte)0x27, (byte)0x07, (byte)0x65,
						(byte)0x9B, (byte)0xE9, (byte)0xE4, (byte)0x79, (byte)0x7A, (byte)0x24, (byte)0x7C, (byte)0x2F,
						(byte)0x0B, (byte)0x6D, (byte)0x99, (byte)0x37, (byte)0x2F, (byte)0x38, (byte)0x4A, (byte)0xF6,
						(byte)0x2F, (byte)0xE2, (byte)0x3B, (byte)0xC5, (byte)0x4B, (byte)0xCD, (byte)0xC5, (byte)0x7A,
						(byte)0x9A, (byte)0xCD, (byte)0x1D, (byte)0x55, (byte)0x85, (byte)0xC3, (byte)0x03, (byte)0xF2,
						(byte)0x01, (byte)0xEF, (byte)0x4E, (byte)0x8B, (byte)0x80, (byte)0x6A, (byte)0xFB, (byte)0x80,
						(byte)0x9D, (byte)0xB1, (byte)0xA3, (byte)0xDB, (byte)0x1C, (byte)0xD1, (byte)0x12, (byte)0xAC,
						(byte)0x88, (byte)0x4F, (byte)0x16, (byte)0x4A, (byte)0x67, (byte)0xB9, (byte)0x9C, (byte)0x7D,
						(byte)0x6E, (byte)0x5A, (byte)0x8A, (byte)0x6D, (byte)0xF1, (byte)0xD3, (byte)0xCA, (byte)0xE6,
						(byte)0xD7, (byte)0xED, (byte)0x3D, (byte)0x5B, (byte)0xE7, (byte)0x25, (byte)0xB2, (byte)0xDE,
						(byte)0x4A, (byte)0xDE, (byte)0x23, (byte)0xFA, (byte)0x67, (byte)0x9B, (byte)0xF4, (byte)0xEB,
						(byte)0x15, (byte)0xA9, (byte)0x3D, (byte)0x8A, (byte)0x6E, (byte)0x29, (byte)0xC7, (byte)0xFF,
						(byte)0xA1, (byte)0xA7, (byte)0x0D, (byte)0xE2, (byte)0xE5, (byte)0x4F, (byte)0x59, (byte)0x3D,
						(byte)0x90, (byte)0x8A, (byte)0x3B, (byte)0xF9, (byte)0xEB, (byte)0xBD, (byte)0x76, (byte)0x0B,
						(byte)0xBF, (byte)0xDC, (byte)0x8D, (byte)0xB8, (byte)0xB5, (byte)0x44, (byte)0x97, (byte)0xE6,
						(byte)0xC5, (byte)0xBE, (byte)0x0E, (byte)0x4A, (byte)0x4D, (byte)0xAC, (byte)0x29, (byte)0xE5},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xA0, (byte)0x75, (byte)0x30, (byte)0x6E, (byte)0xAB, (byte)0x00, (byte)0x45, (byte)0xBA,
						(byte)0xF7, (byte)0x2C, (byte)0xDD, (byte)0x33, (byte)0xB3, (byte)0xB6, (byte)0x78, (byte)0x77,
						(byte)0x9D, (byte)0xE1, (byte)0xF5, (byte)0x27}
		);
		//29. CUP(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x0A,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,
				new byte[]{(byte)0xB2, (byte)0xAB, (byte)0x1B, (byte)0x6E, (byte)0x9A, (byte)0xC5, (byte)0x5A, (byte)0x75,
						(byte)0xAD, (byte)0xFD, (byte)0x5B, (byte)0xBC, (byte)0x34, (byte)0x49, (byte)0x0E, (byte)0x53,
						(byte)0xC4, (byte)0xC3, (byte)0x38, (byte)0x1F, (byte)0x34, (byte)0xE6, (byte)0x0E, (byte)0x7F,
						(byte)0xAC, (byte)0x21, (byte)0xCC, (byte)0x2B, (byte)0x26, (byte)0xDD, (byte)0x34, (byte)0x46,
						(byte)0x2B, (byte)0x64, (byte)0xA6, (byte)0xFA, (byte)0xE2, (byte)0x49, (byte)0x5E, (byte)0xD1,
						(byte)0xDD, (byte)0x38, (byte)0x3B, (byte)0x81, (byte)0x38, (byte)0xBE, (byte)0xA1, (byte)0x00,
						(byte)0xFF, (byte)0x9B, (byte)0x7A, (byte)0x11, (byte)0x18, (byte)0x17, (byte)0xE7, (byte)0xB9,
						(byte)0x86, (byte)0x9A, (byte)0x97, (byte)0x42, (byte)0xB1, (byte)0x9E, (byte)0x5C, (byte)0x9D,
						(byte)0xAC, (byte)0x56, (byte)0xF8, (byte)0xB8, (byte)0x82, (byte)0x7F, (byte)0x11, (byte)0xB0,
						(byte)0x5A, (byte)0x08, (byte)0xEC, (byte)0xCF, (byte)0x9E, (byte)0x8D, (byte)0x5E, (byte)0x85,
						(byte)0xB0, (byte)0xF7, (byte)0xCF, (byte)0xA6, (byte)0x44, (byte)0xEF, (byte)0xF3, (byte)0xE9,
						(byte)0xB7, (byte)0x96, (byte)0x68, (byte)0x8F, (byte)0x38, (byte)0xE0, (byte)0x06, (byte)0xDE,
						(byte)0xB2, (byte)0x1E, (byte)0x10, (byte)0x1C, (byte)0x01, (byte)0x02, (byte)0x89, (byte)0x03,
						(byte)0xA0, (byte)0x60, (byte)0x23, (byte)0xAC, (byte)0x5A, (byte)0xAB, (byte)0x86, (byte)0x35,
						(byte)0xF8, (byte)0xE3, (byte)0x07, (byte)0xA5, (byte)0x3A, (byte)0xC7, (byte)0x42, (byte)0xBD,
						(byte)0xCE, (byte)0x6A, (byte)0x28, (byte)0x3F, (byte)0x58, (byte)0x5F, (byte)0x48, (byte)0xEF},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC8, (byte)0x8B, (byte)0xE6, (byte)0xB2, (byte)0x41, (byte)0x7C, (byte)0x4F, (byte)0x94,
						(byte)0x1C, (byte)0x93, (byte)0x71, (byte)0xEA, (byte)0x35, (byte)0xA3, (byte)0x77, (byte)0x15,
						(byte)0x87, (byte)0x67, (byte)0xE4, (byte)0xE3}
		);
		//30. CUP(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x0B,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xCF, (byte)0x9F, (byte)0xDF, (byte)0x46, (byte)0xB3, (byte)0x56, (byte)0x37, (byte)0x8E,
						(byte)0x9A, (byte)0xF3, (byte)0x11, (byte)0xB0, (byte)0xF9, (byte)0x81, (byte)0xB2, (byte)0x1A,
						(byte)0x1F, (byte)0x22, (byte)0xF2, (byte)0x50, (byte)0xFB, (byte)0x11, (byte)0xF5, (byte)0x5C,
						(byte)0x95, (byte)0x87, (byte)0x09, (byte)0xE3, (byte)0xC7, (byte)0x24, (byte)0x19, (byte)0x18,
						(byte)0x29, (byte)0x34, (byte)0x83, (byte)0x28, (byte)0x9E, (byte)0xAE, (byte)0x68, (byte)0x8A,
						(byte)0x09, (byte)0x4C, (byte)0x02, (byte)0xC3, (byte)0x44, (byte)0xE2, (byte)0x99, (byte)0x9F,
						(byte)0x31, (byte)0x5A, (byte)0x72, (byte)0x84, (byte)0x1F, (byte)0x48, (byte)0x9E, (byte)0x24,
						(byte)0xB1, (byte)0xBA, (byte)0x00, (byte)0x56, (byte)0xCF, (byte)0xAB, (byte)0x3B, (byte)0x47,
						(byte)0x9D, (byte)0x0E, (byte)0x82, (byte)0x64, (byte)0x52, (byte)0x37, (byte)0x5D, (byte)0xCD,
						(byte)0xBB, (byte)0x67, (byte)0xE9, (byte)0x7E, (byte)0xC2, (byte)0xAA, (byte)0x66, (byte)0xF4,
						(byte)0x60, (byte)0x1D, (byte)0x77, (byte)0x4F, (byte)0xEA, (byte)0xEF, (byte)0x77, (byte)0x5A,
						(byte)0xCC, (byte)0xC6, (byte)0x21, (byte)0xBF, (byte)0xEB, (byte)0x65, (byte)0xFB, (byte)0x00,
						(byte)0x53, (byte)0xFC, (byte)0x5F, (byte)0x39, (byte)0x2A, (byte)0xA5, (byte)0xE1, (byte)0xD4,
						(byte)0xC4, (byte)0x1A, (byte)0x4D, (byte)0xE9, (byte)0xFF, (byte)0xDF, (byte)0xDF, (byte)0x13,
						(byte)0x27, (byte)0xC4, (byte)0xBB, (byte)0x87, (byte)0x4F, (byte)0x1F, (byte)0x63, (byte)0xA5,
						(byte)0x99, (byte)0xEE, (byte)0x39, (byte)0x02, (byte)0xFE, (byte)0x95, (byte)0xE7, (byte)0x29,
						(byte)0xFD, (byte)0x78, (byte)0xD4, (byte)0x23, (byte)0x4D, (byte)0xC7, (byte)0xE6, (byte)0xCF,
						(byte)0x1A, (byte)0xBA, (byte)0xBA, (byte)0xA3, (byte)0xF6, (byte)0xDB, (byte)0x29, (byte)0xB7,
						(byte)0xF0, (byte)0x5D, (byte)0x1D, (byte)0x90, (byte)0x1D, (byte)0x2E, (byte)0x76, (byte)0xA6,
						(byte)0x06, (byte)0xA8, (byte)0xCB, (byte)0xFF, (byte)0xFF, (byte)0xEC, (byte)0xBD, (byte)0x91,
						(byte)0x8F, (byte)0xA2, (byte)0xD2, (byte)0x78, (byte)0xBD, (byte)0xB4, (byte)0x3B, (byte)0x04,
						(byte)0x34, (byte)0xF5, (byte)0xD4, (byte)0x51, (byte)0x34, (byte)0xBE, (byte)0x1C, (byte)0x27,
						(byte)0x81, (byte)0xD1, (byte)0x57, (byte)0xD5, (byte)0x01, (byte)0xFF, (byte)0x43, (byte)0xE5,
						(byte)0xF1, (byte)0xC4, (byte)0x70, (byte)0x96, (byte)0x7C, (byte)0xD5, (byte)0x7C, (byte)0xE5,
						(byte)0x3B, (byte)0x64, (byte)0xD8, (byte)0x29, (byte)0x74, (byte)0xC8, (byte)0x27, (byte)0x59,
						(byte)0x37, (byte)0xC5, (byte)0xD8, (byte)0x50, (byte)0x2A, (byte)0x12, (byte)0x52, (byte)0xA8,
						(byte)0xA5, (byte)0xD6, (byte)0x08, (byte)0x8A, (byte)0x25, (byte)0x9B, (byte)0x69, (byte)0x4F,
						(byte)0x98, (byte)0x64, (byte)0x8D, (byte)0x9A, (byte)0xF2, (byte)0xCB, (byte)0x0E, (byte)0xFD,
						(byte)0x9D, (byte)0x94, (byte)0x3C, (byte)0x69, (byte)0xF8, (byte)0x96, (byte)0xD4, (byte)0x9F,
						(byte)0xA3, (byte)0x97, (byte)0x02, (byte)0x16, (byte)0x2A, (byte)0xCB, (byte)0x5A, (byte)0xF2,
						(byte)0x9B, (byte)0x90, (byte)0xBA, (byte)0xDE, (byte)0x00, (byte)0x5B, (byte)0xC1, (byte)0x57},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xBD, (byte)0x33, (byte)0x1F, (byte)0x99, (byte)0x96, (byte)0xA4, (byte)0x90, (byte)0xB3,
						(byte)0x3C, (byte)0x13, (byte)0x44, (byte)0x10, (byte)0x66, (byte)0xA0, (byte)0x9A, (byte)0xD3,
						(byte)0xFE, (byte)0xB5, (byte)0xF6, (byte)0x6C}
		);
		//31. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x33},
				(byte)0x0C,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)144,
				new byte[]{(byte)0xDE, (byte)0xD9, (byte)0xE1, (byte)0xBC, (byte)0x8E, (byte)0x74, (byte)0x9C, (byte)0xAD,
						(byte)0x74, (byte)0x94, (byte)0x84, (byte)0xBF, (byte)0xB4, (byte)0x72, (byte)0x44, (byte)0x5B,
						(byte)0xC8, (byte)0x1F, (byte)0xFA, (byte)0xA8, (byte)0x97, (byte)0x07, (byte)0x64, (byte)0x8C,
						(byte)0x34, (byte)0x2A, (byte)0xA3, (byte)0x0D, (byte)0x1B, (byte)0xE6, (byte)0x0D, (byte)0x5E,
						(byte)0xD0, (byte)0xF6, (byte)0xCE, (byte)0xAB, (byte)0xA2, (byte)0x5C, (byte)0x68, (byte)0x3D,
						(byte)0x45, (byte)0x03, (byte)0xCB, (byte)0x11, (byte)0xCA, (byte)0xF9, (byte)0x1A, (byte)0x39,
						(byte)0x72, (byte)0x75, (byte)0x93, (byte)0xCF, (byte)0x2B, (byte)0xEE, (byte)0xAE, (byte)0x80,
						(byte)0x32, (byte)0xEF, (byte)0xAC, (byte)0xC4, (byte)0x4F, (byte)0xDF, (byte)0x8D, (byte)0xA3,
						(byte)0x1D, (byte)0x60, (byte)0x07, (byte)0x13, (byte)0x9D, (byte)0x45, (byte)0x95, (byte)0xE8,
						(byte)0x65, (byte)0x5C, (byte)0x74, (byte)0x95, (byte)0xCF, (byte)0x46, (byte)0xA9, (byte)0xD5,
						(byte)0x93, (byte)0xA8, (byte)0x3E, (byte)0x3C, (byte)0x65, (byte)0xB2, (byte)0xCB, (byte)0xF2,
						(byte)0xAF, (byte)0x1E, (byte)0xEA, (byte)0x02, (byte)0xD1, (byte)0xF9, (byte)0x69, (byte)0x51,
						(byte)0xA9, (byte)0x46, (byte)0x61, (byte)0x6B, (byte)0x5A, (byte)0xB2, (byte)0x1C, (byte)0xA0,
						(byte)0xBF, (byte)0x34, (byte)0xD1, (byte)0x2D, (byte)0x05, (byte)0xF6, (byte)0xAE, (byte)0x18,
						(byte)0x35, (byte)0x08, (byte)0xA7, (byte)0xAC, (byte)0x7A, (byte)0x46, (byte)0x91, (byte)0x3B,
						(byte)0xDC, (byte)0xE5, (byte)0xFD, (byte)0xC3, (byte)0x91, (byte)0x4C, (byte)0xA7, (byte)0x50,
						(byte)0x01, (byte)0x8B, (byte)0x13, (byte)0x0C, (byte)0xA5, (byte)0xBA, (byte)0xD4, (byte)0x9A,
						(byte)0xD8, (byte)0xC0, (byte)0x22, (byte)0x91, (byte)0xAC, (byte)0xA5, (byte)0xCF, (byte)0xFD},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xD7, (byte)0xDD, (byte)0x7A, (byte)0xAC, (byte)0x8B, (byte)0x67, (byte)0xA9, (byte)0xA3,
						(byte)0xCC, (byte)0x72, (byte)0xF3, (byte)0x5F, (byte)0x5D, (byte)0x96, (byte)0xF2, (byte)0x65,
						(byte)0xE1, (byte)0x6E, (byte)0xB3, (byte)0xFE}
		);
		//32. LOCAL_1
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x01,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,
				new byte[]{(byte)0xDE, (byte)0xD4, (byte)0x23, (byte)0x11, (byte)0x8D, (byte)0x56, (byte)0x66, (byte)0x68,
						(byte)0x81, (byte)0x70, (byte)0xDC, (byte)0xFC, (byte)0x01, (byte)0x69, (byte)0x4A, (byte)0xEC,
						(byte)0x1F, (byte)0x3E, (byte)0xBB, (byte)0x1D, (byte)0x0C, (byte)0x7C, (byte)0x37, (byte)0xBF,
						(byte)0x6A, (byte)0x92, (byte)0x65, (byte)0x25, (byte)0x75, (byte)0xEC, (byte)0x05, (byte)0xA4,
						(byte)0xE9, (byte)0xE2, (byte)0x14, (byte)0xAB, (byte)0x73, (byte)0x80, (byte)0xD6, (byte)0x5D,
						(byte)0x92, (byte)0xF9, (byte)0x90, (byte)0xFE, (byte)0x6D, (byte)0xCF, (byte)0x20, (byte)0xAA,
						(byte)0xE9, (byte)0xA4, (byte)0x38, (byte)0x7A, (byte)0xFA, (byte)0x21, (byte)0x35, (byte)0x04,
						(byte)0x99, (byte)0x3A, (byte)0x7D, (byte)0x98, (byte)0xCD, (byte)0xDE, (byte)0xFC, (byte)0x99,
						(byte)0xC2, (byte)0x72, (byte)0x74, (byte)0x07, (byte)0xC1, (byte)0xC4, (byte)0xC8, (byte)0x58,
						(byte)0xE3, (byte)0x03, (byte)0x6B, (byte)0xFC, (byte)0x56, (byte)0x4C, (byte)0x91, (byte)0xA6,
						(byte)0x28, (byte)0x64, (byte)0xA4, (byte)0x9D, (byte)0x52, (byte)0x0D, (byte)0x20, (byte)0xD8,
						(byte)0x98, (byte)0x67, (byte)0x4B, (byte)0x80, (byte)0x6E, (byte)0x17, (byte)0xEB, (byte)0xE4,
						(byte)0x7D, (byte)0xD0, (byte)0x3A, (byte)0x6D, (byte)0xA5, (byte)0x60, (byte)0xEB, (byte)0x7D,
						(byte)0x50, (byte)0x62, (byte)0x7A, (byte)0x78, (byte)0xB0, (byte)0x04, (byte)0xFC, (byte)0xFA,
						(byte)0x63, (byte)0xC9, (byte)0x1D, (byte)0xDA, (byte)0xAE, (byte)0x1C, (byte)0x44, (byte)0x16,
						(byte)0x65, (byte)0x30, (byte)0x69, (byte)0xE9, (byte)0x09, (byte)0x20, (byte)0x52, (byte)0x3B},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x46, (byte)0x9F, (byte)0x2C, (byte)0x01, (byte)0xBF, (byte)0xFD, (byte)0x8B, (byte)0xF9,
						(byte)0x47, (byte)0xB3, (byte)0xD5, (byte)0x45, (byte)0xAB, (byte)0x24, (byte)0x36, (byte)0x35,
						(byte)0x55, (byte)0x65, (byte)0xB5, (byte)0x50}
		);
		//33. LOCAL_2
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x02,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xB1, (byte)0xF8, (byte)0xAD, (byte)0x3D, (byte)0x0A, (byte)0x8B, (byte)0xB4, (byte)0x2E,
						(byte)0x07, (byte)0xAF, (byte)0x32, (byte)0x4A, (byte)0x48, (byte)0xA0, (byte)0x0F, (byte)0xDE,
						(byte)0xF3, (byte)0x8D, (byte)0x1C, (byte)0x1F, (byte)0xC2, (byte)0x72, (byte)0x47, (byte)0x50,
						(byte)0xBD, (byte)0x05, (byte)0xA9, (byte)0x39, (byte)0x96, (byte)0x30, (byte)0x80, (byte)0x32,
						(byte)0x0C, (byte)0xCA, (byte)0x06, (byte)0xE3, (byte)0x72, (byte)0x1B, (byte)0x96, (byte)0x57,
						(byte)0x42, (byte)0x2D, (byte)0xA9, (byte)0xB1, (byte)0x93, (byte)0xD2, (byte)0x2F, (byte)0x9F,
						(byte)0x99, (byte)0xC3, (byte)0x5D, (byte)0xE1, (byte)0x72, (byte)0x86, (byte)0x47, (byte)0x19,
						(byte)0x00, (byte)0x95, (byte)0xE0, (byte)0x1A, (byte)0xB8, (byte)0x0B, (byte)0xBE, (byte)0x5F,
						(byte)0x56, (byte)0x13, (byte)0xFA, (byte)0xA0, (byte)0x0A, (byte)0xCA, (byte)0xC3, (byte)0x87,
						(byte)0xB2, (byte)0x66, (byte)0x54, (byte)0x2D, (byte)0x9D, (byte)0x1A, (byte)0x28, (byte)0xFB,
						(byte)0x73, (byte)0xFA, (byte)0xD7, (byte)0x37, (byte)0xDF, (byte)0xF0, (byte)0xC9, (byte)0x08,
						(byte)0x6B, (byte)0x3C, (byte)0x50, (byte)0x67, (byte)0x45, (byte)0xA7, (byte)0xDE, (byte)0x58,
						(byte)0x51, (byte)0x72, (byte)0x8A, (byte)0x91, (byte)0xD8, (byte)0xAD, (byte)0xC6, (byte)0x86,
						(byte)0x5B, (byte)0x7D, (byte)0x63, (byte)0x9F, (byte)0xCB, (byte)0xC6, (byte)0xBF, (byte)0x0D,
						(byte)0x5C, (byte)0x98, (byte)0xE0, (byte)0xF6, (byte)0x85, (byte)0x73, (byte)0xBF, (byte)0xC4,
						(byte)0x0C, (byte)0x61, (byte)0x1B, (byte)0x1D, (byte)0x80, (byte)0x97, (byte)0xDF, (byte)0x7C,
						(byte)0xBD, (byte)0xE4, (byte)0x8E, (byte)0xB5, (byte)0xA1, (byte)0xA9, (byte)0xF0, (byte)0x38,
						(byte)0x1C, (byte)0xF0, (byte)0xAE, (byte)0x5F, (byte)0x86, (byte)0x4F, (byte)0x7B, (byte)0x9B},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x8A, (byte)0x62, (byte)0x40, (byte)0x74, (byte)0x26, (byte)0xE7, (byte)0x65, (byte)0x1D,
						(byte)0xD3, (byte)0x7F, (byte)0x7C, (byte)0x25, (byte)0xA6, (byte)0x8B, (byte)0x92, (byte)0xDD,
						(byte)0xEA, (byte)0x11, (byte)0x3A, (byte)0xC8}
		);
		//34. LOCAL_3
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x03,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0xF2, (byte)0x0C, (byte)0x70, (byte)0x4F, (byte)0xD3, (byte)0xB2, (byte)0xE2, (byte)0xAE,
						(byte)0x1B, (byte)0x43, (byte)0xD8, (byte)0x05, (byte)0x0E, (byte)0xC5, (byte)0x89, (byte)0x32,
						(byte)0xB1, (byte)0x57, (byte)0x99, (byte)0xBE, (byte)0xCF, (byte)0x28, (byte)0x1D, (byte)0xF7,
						(byte)0x54, (byte)0x01, (byte)0xE2, (byte)0xCC, (byte)0x89, (byte)0xA5, (byte)0x51, (byte)0xB7,
						(byte)0x8A, (byte)0x73, (byte)0x3F, (byte)0x02, (byte)0x73, (byte)0xDE, (byte)0x34, (byte)0xB4,
						(byte)0xFC, (byte)0xAF, (byte)0x90, (byte)0x42, (byte)0x4D, (byte)0x9D, (byte)0x72, (byte)0x85,
						(byte)0xB6, (byte)0xEA, (byte)0x63, (byte)0x66, (byte)0x1C, (byte)0xAD, (byte)0x62, (byte)0xEA,
						(byte)0x6C, (byte)0x40, (byte)0x9E, (byte)0xA8, (byte)0x9E, (byte)0x10, (byte)0xAC, (byte)0x92,
						(byte)0x38, (byte)0xE1, (byte)0xE7, (byte)0xA6, (byte)0xD4, (byte)0xD0, (byte)0xC9, (byte)0xC2,
						(byte)0x00, (byte)0xA6, (byte)0x6D, (byte)0x46, (byte)0x9E, (byte)0x80, (byte)0xE5, (byte)0x5F,
						(byte)0x73, (byte)0x1F, (byte)0x6B, (byte)0x9B, (byte)0x42, (byte)0xB1, (byte)0x75, (byte)0xD6,
						(byte)0xDA, (byte)0x7F, (byte)0x0A, (byte)0x45, (byte)0x4D, (byte)0x15, (byte)0xBB, (byte)0x66,
						(byte)0xD6, (byte)0xE8, (byte)0x1D, (byte)0xF5, (byte)0xEA, (byte)0x86, (byte)0x16, (byte)0x86,
						(byte)0xF0, (byte)0x80, (byte)0xE0, (byte)0x98, (byte)0xD1, (byte)0x9E, (byte)0x27, (byte)0x07,
						(byte)0x82, (byte)0xCE, (byte)0x6B, (byte)0x86, (byte)0x4F, (byte)0xD8, (byte)0x61, (byte)0x1B,
						(byte)0x2F, (byte)0x9B, (byte)0x76, (byte)0xFA, (byte)0xFA, (byte)0x6A, (byte)0xE2, (byte)0x9F,
						(byte)0x50, (byte)0x76, (byte)0x1C, (byte)0xAC, (byte)0x4D, (byte)0xFD, (byte)0x01, (byte)0xEE,
						(byte)0x58, (byte)0x0C, (byte)0x21, (byte)0x37, (byte)0x80, (byte)0x13, (byte)0x48, (byte)0xDB,
						(byte)0xBE, (byte)0xE5, (byte)0x45, (byte)0x25, (byte)0xE8, (byte)0x6B, (byte)0x9A, (byte)0xAE,
						(byte)0x9F, (byte)0xC6, (byte)0x74, (byte)0x0A, (byte)0xD8, (byte)0x13, (byte)0xA8, (byte)0xB6,
						(byte)0xE4, (byte)0x14, (byte)0x2C, (byte)0xE3, (byte)0x55, (byte)0x63, (byte)0x10, (byte)0x2E,
						(byte)0x87, (byte)0xEC, (byte)0x79, (byte)0xFB, (byte)0xF6, (byte)0x2B, (byte)0xD5, (byte)0xF1},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x20, (byte)0xC8, (byte)0x8D, (byte)0x40, (byte)0x77, (byte)0xB3, (byte)0xA5, (byte)0xF4,
						(byte)0xD8, (byte)0xD6, (byte)0xC1, (byte)0xA4, (byte)0xFA, (byte)0xEF, (byte)0xDB, (byte)0x66,
						(byte)0xCD, (byte)0x86, (byte)0x6A, (byte)0xD5}
		);
		//35. LOCAL_4
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x04,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xE1, (byte)0x84, (byte)0xFA, (byte)0x95, (byte)0x83, (byte)0x34, (byte)0xC9, (byte)0x1A,
						(byte)0x18, (byte)0x4F, (byte)0xC3, (byte)0xED, (byte)0xA7, (byte)0xE7, (byte)0x29, (byte)0xF0,
						(byte)0x62, (byte)0xE9, (byte)0x10, (byte)0xC4, (byte)0xCD, (byte)0xF1, (byte)0x45, (byte)0x09,
						(byte)0x2E, (byte)0x5A, (byte)0x9E, (byte)0x10, (byte)0x98, (byte)0xF1, (byte)0xF5, (byte)0x58,
						(byte)0x24, (byte)0xFF, (byte)0x7E, (byte)0x33, (byte)0xEF, (byte)0x98, (byte)0xF2, (byte)0x6A,
						(byte)0x36, (byte)0xEE, (byte)0x7D, (byte)0x9C, (byte)0x89, (byte)0x6D, (byte)0x0A, (byte)0x3B,
						(byte)0x8E, (byte)0xE5, (byte)0xA2, (byte)0x5A, (byte)0x42, (byte)0xD4, (byte)0xB5, (byte)0x6D,
						(byte)0x63, (byte)0x3C, (byte)0xBD, (byte)0xF6, (byte)0xD6, (byte)0x44, (byte)0xEF, (byte)0xCF,
						(byte)0xF7, (byte)0xEE, (byte)0xE7, (byte)0xAF, (byte)0x47, (byte)0x63, (byte)0xEB, (byte)0x88,
						(byte)0xC8, (byte)0x67, (byte)0x8D, (byte)0x7C, (byte)0x7C, (byte)0xF4, (byte)0x4D, (byte)0x1A,
						(byte)0x89, (byte)0xEE, (byte)0xC6, (byte)0xAB, (byte)0xAF, (byte)0x88, (byte)0xAF, (byte)0xB8,
						(byte)0xBA, (byte)0xD3, (byte)0x16, (byte)0x0E, (byte)0x44, (byte)0xCA, (byte)0x22, (byte)0x96,
						(byte)0xFE, (byte)0xFE, (byte)0x5C, (byte)0xFE, (byte)0x0B, (byte)0xC8, (byte)0xB0, (byte)0xE0,
						(byte)0xD7, (byte)0xB8, (byte)0x74, (byte)0x21, (byte)0x29, (byte)0xA9, (byte)0x31, (byte)0x0F,
						(byte)0x0C, (byte)0x25, (byte)0x00, (byte)0x49, (byte)0xAB, (byte)0x11, (byte)0x79, (byte)0x10,
						(byte)0xFC, (byte)0x99, (byte)0xB2, (byte)0x4D, (byte)0x76, (byte)0xFA, (byte)0xA6, (byte)0x46,
						(byte)0x8B, (byte)0xB1, (byte)0x18, (byte)0x14, (byte)0x57, (byte)0x2A, (byte)0xC3, (byte)0x99,
						(byte)0xBA, (byte)0x3F, (byte)0x3A, (byte)0xE8, (byte)0x67, (byte)0xC7, (byte)0x71, (byte)0x3B,
						(byte)0x77, (byte)0x0F, (byte)0xD6, (byte)0x52, (byte)0x73, (byte)0x7C, (byte)0xAB, (byte)0x85,
						(byte)0x60, (byte)0x01, (byte)0x7F, (byte)0x65, (byte)0xCC, (byte)0x7E, (byte)0xF1, (byte)0x4D,
						(byte)0x76, (byte)0x9A, (byte)0xBD, (byte)0x9E, (byte)0x82, (byte)0x5E, (byte)0x28, (byte)0x81,
						(byte)0xD9, (byte)0xF2, (byte)0x14, (byte)0x00, (byte)0x3A, (byte)0xDE, (byte)0x6D, (byte)0xAB,
						(byte)0xFA, (byte)0xD1, (byte)0x8C, (byte)0x60, (byte)0xDA, (byte)0x89, (byte)0xBF, (byte)0xEC,
						(byte)0x3C, (byte)0xBC, (byte)0x31, (byte)0xE4, (byte)0x67, (byte)0xCE, (byte)0x68, (byte)0xBA,
						(byte)0x72, (byte)0x1A, (byte)0xF5, (byte)0x30, (byte)0x29, (byte)0xC9, (byte)0x2B, (byte)0xA4,
						(byte)0x57, (byte)0x4A, (byte)0xE9, (byte)0x4A, (byte)0xD8, (byte)0xD3, (byte)0xDE, (byte)0x69,
						(byte)0x20, (byte)0x85, (byte)0x7A, (byte)0x50, (byte)0xC0, (byte)0xA6, (byte)0x06, (byte)0x65,
						(byte)0x04, (byte)0x80, (byte)0xED, (byte)0x1B, (byte)0xE5, (byte)0xC6, (byte)0x07, (byte)0x08,
						(byte)0x88, (byte)0x34, (byte)0x10, (byte)0x41, (byte)0x2A, (byte)0x40, (byte)0xD8, (byte)0x90,
						(byte)0x6C, (byte)0x73, (byte)0xBA, (byte)0x12, (byte)0xF6, (byte)0x0D, (byte)0x07, (byte)0xB2,
						(byte)0x55, (byte)0x1D, (byte)0x7B, (byte)0xEE, (byte)0x92, (byte)0xDB, (byte)0x8D, (byte)0x5B},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x35, (byte)0x43, (byte)0x84, (byte)0x1C, (byte)0x30, (byte)0x10, (byte)0x35, (byte)0x15,
						(byte)0xEC, (byte)0x90, (byte)0x9D, (byte)0x91, (byte)0xB3, (byte)0x5C, (byte)0x41, (byte)0x69,
						(byte)0x51, (byte)0xCD, (byte)0xDA, (byte)0xE6}
		);
		//36. LOCAL_5
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x05,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xAA, (byte)0x71, (byte)0x06, (byte)0x90, (byte)0x96, (byte)0x60, (byte)0x7D, (byte)0x9A,
						(byte)0x21, (byte)0xA5, (byte)0xE2, (byte)0x6E, (byte)0x41, (byte)0x3E, (byte)0x24, (byte)0xA9,
						(byte)0x51, (byte)0xBE, (byte)0xDF, (byte)0x24, (byte)0x33, (byte)0xE1, (byte)0xAE, (byte)0xB5,
						(byte)0x65, (byte)0x74, (byte)0x5C, (byte)0xF0, (byte)0xB0, (byte)0x15, (byte)0x63, (byte)0x02,
						(byte)0x37, (byte)0x90, (byte)0x86, (byte)0x6A, (byte)0x7E, (byte)0x36, (byte)0x62, (byte)0x2E,
						(byte)0x10, (byte)0x15, (byte)0x3B, (byte)0x08, (byte)0xEB, (byte)0x60, (byte)0x49, (byte)0x76,
						(byte)0x96, (byte)0xE6, (byte)0x53, (byte)0xA0, (byte)0x10, (byte)0x93, (byte)0xC6, (byte)0x40,
						(byte)0xB6, (byte)0x1D, (byte)0xC0, (byte)0xD0, (byte)0x0D, (byte)0x92, (byte)0x07, (byte)0xE4,
						(byte)0xF7, (byte)0x5F, (byte)0xBE, (byte)0x4F, (byte)0xAE, (byte)0xF1, (byte)0x79, (byte)0x92,
						(byte)0x24, (byte)0xC5, (byte)0x56, (byte)0x42, (byte)0x64, (byte)0x09, (byte)0xEC, (byte)0x91,
						(byte)0xD4, (byte)0x7D, (byte)0x8F, (byte)0xFB, (byte)0x92, (byte)0x52, (byte)0x1E, (byte)0xB7,
						(byte)0x41, (byte)0x0E, (byte)0x00, (byte)0x7A, (byte)0xF4, (byte)0x5D, (byte)0x2C, (byte)0xCC,
						(byte)0xBF, (byte)0x13, (byte)0xEC, (byte)0x4D, (byte)0xE8, (byte)0xB3, (byte)0xF1, (byte)0x13,
						(byte)0x1C, (byte)0x88, (byte)0xDF, (byte)0x2B, (byte)0x47, (byte)0x5D, (byte)0xF7, (byte)0xA5,
						(byte)0xCE, (byte)0x81, (byte)0xDE, (byte)0xE7, (byte)0x83, (byte)0xA5, (byte)0x63, (byte)0xB5,
						(byte)0xE1, (byte)0x50, (byte)0x0C, (byte)0x4F, (byte)0x32, (byte)0xE6, (byte)0xAB, (byte)0x93,
						(byte)0x17, (byte)0x1D, (byte)0x6A, (byte)0x7E, (byte)0x91, (byte)0x47, (byte)0x94, (byte)0x27,
						(byte)0xB6, (byte)0x49, (byte)0x7F, (byte)0x51, (byte)0xA7, (byte)0xFE, (byte)0xF3, (byte)0x9D},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x17, (byte)0x43, (byte)0x4F, (byte)0xDB, (byte)0x96, (byte)0xF9, (byte)0xC3, (byte)0xAF,
						(byte)0x0A, (byte)0x55, (byte)0xD4, (byte)0x30, (byte)0xCF, (byte)0xBA, (byte)0x5A, (byte)0xEB,
						(byte)0x08, (byte)0xFC, (byte)0x9F, (byte)0x4C}
		);
		//37. LOCAL_6
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x06,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0x86, (byte)0x3A, (byte)0x73, (byte)0x2B, (byte)0x59, (byte)0x28, (byte)0x8A, (byte)0x79,
						(byte)0xFB, (byte)0xE3, (byte)0xCA, (byte)0xC0, (byte)0x03, (byte)0xE7, (byte)0xA9, (byte)0x1C,
						(byte)0x17, (byte)0x5F, (byte)0x63, (byte)0x3D, (byte)0xFA, (byte)0x61, (byte)0x51, (byte)0x5D,
						(byte)0x5F, (byte)0xD5, (byte)0xF5, (byte)0xF7, (byte)0xA6, (byte)0xD1, (byte)0x3C, (byte)0x7E,
						(byte)0xB3, (byte)0x14, (byte)0x78, (byte)0x27, (byte)0xD2, (byte)0x7A, (byte)0x3C, (byte)0xCE,
						(byte)0xAA, (byte)0xDC, (byte)0x7D, (byte)0x8B, (byte)0xE5, (byte)0xB8, (byte)0x03, (byte)0xC8,
						(byte)0x26, (byte)0x50, (byte)0x4C, (byte)0xE6, (byte)0x90, (byte)0x40, (byte)0x00, (byte)0xDC,
						(byte)0x18, (byte)0xC6, (byte)0xF4, (byte)0x5D, (byte)0xA0, (byte)0xA7, (byte)0x0B, (byte)0x7F,
						(byte)0xB9, (byte)0xFF, (byte)0xA9, (byte)0xD7, (byte)0xBF, (byte)0xB4, (byte)0xF6, (byte)0xFB,
						(byte)0xDD, (byte)0xC1, (byte)0x83, (byte)0x69, (byte)0xD1, (byte)0xCF, (byte)0x6E, (byte)0xED,
						(byte)0x23, (byte)0x92, (byte)0x36, (byte)0x8F, (byte)0xD0, (byte)0x73, (byte)0x6E, (byte)0xF6,
						(byte)0xDE, (byte)0xDE, (byte)0xF8, (byte)0x4F, (byte)0x2F, (byte)0x2D, (byte)0xA2, (byte)0x99,
						(byte)0x65, (byte)0x37, (byte)0x37, (byte)0x0A, (byte)0x35, (byte)0xBD, (byte)0x00, (byte)0x9A,
						(byte)0x32, (byte)0x9A, (byte)0x86, (byte)0x15, (byte)0xF7, (byte)0xAC, (byte)0x0B, (byte)0xB0,
						(byte)0xD9, (byte)0x61, (byte)0x01, (byte)0xD0, (byte)0x5B, (byte)0x1D, (byte)0x63, (byte)0xD7,
						(byte)0x86, (byte)0x00, (byte)0x93, (byte)0xDF, (byte)0xC2, (byte)0x41, (byte)0xDD, (byte)0x76,
						(byte)0x07, (byte)0x76, (byte)0xB3, (byte)0xF6, (byte)0xD2, (byte)0x65, (byte)0x5D, (byte)0x36,
						(byte)0xD9, (byte)0x2D, (byte)0xC3, (byte)0x74, (byte)0xE4, (byte)0xE9, (byte)0x8F, (byte)0xDB,
						(byte)0x81, (byte)0xBC, (byte)0x56, (byte)0x6C, (byte)0x99, (byte)0xC9, (byte)0x2C, (byte)0xFC,
						(byte)0x13, (byte)0x5F, (byte)0x5B, (byte)0x04, (byte)0x47, (byte)0x00, (byte)0x02, (byte)0xD5,
						(byte)0x9F, (byte)0x11, (byte)0xE3, (byte)0x1F, (byte)0x27, (byte)0xCB, (byte)0x45, (byte)0x75,
						(byte)0x96, (byte)0x5F, (byte)0x58, (byte)0x27, (byte)0x08, (byte)0x7D, (byte)0xF3, (byte)0xB1},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x78, (byte)0x14, (byte)0x6C, (byte)0x4B, (byte)0xD2, (byte)0xDF, (byte)0xA1, (byte)0x46,
						(byte)0xE5, (byte)0xCF, (byte)0x6D, (byte)0x08, (byte)0x35, (byte)0x5A, (byte)0x48, (byte)0x24,
						(byte)0x04, (byte)0xA6, (byte)0x1D, (byte)0x15}
		);
		//38. LOCAL_7
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x07,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0x99, (byte)0x03, (byte)0x7E, (byte)0x31, (byte)0xCB, (byte)0x96, (byte)0xAA, (byte)0x53,
						(byte)0xBA, (byte)0x05, (byte)0x5A, (byte)0xD0, (byte)0xE1, (byte)0xAC, (byte)0xD8, (byte)0x6D,
						(byte)0x09, (byte)0xA3, (byte)0x53, (byte)0x4A, (byte)0x52, (byte)0xC9, (byte)0xB0, (byte)0xED,
						(byte)0x86, (byte)0x09, (byte)0xC1, (byte)0x2B, (byte)0x00, (byte)0xB4, (byte)0x50, (byte)0x76,
						(byte)0xA0, (byte)0x06, (byte)0xA9, (byte)0xD9, (byte)0x64, (byte)0x31, (byte)0x72, (byte)0x02,
						(byte)0x66, (byte)0x87, (byte)0x29, (byte)0x54, (byte)0x39, (byte)0x0C, (byte)0x3C, (byte)0x04,
						(byte)0xE1, (byte)0x25, (byte)0x4D, (byte)0xA8, (byte)0x33, (byte)0x95, (byte)0x04, (byte)0x36,
						(byte)0xA5, (byte)0x4C, (byte)0xAC, (byte)0xB1, (byte)0x68, (byte)0xD8, (byte)0xA3, (byte)0xDA,
						(byte)0xFA, (byte)0xA9, (byte)0x75, (byte)0xF9, (byte)0x7C, (byte)0x13, (byte)0x1C, (byte)0x11,
						(byte)0xDD, (byte)0x98, (byte)0x79, (byte)0x72, (byte)0x4F, (byte)0x1B, (byte)0x13, (byte)0x10,
						(byte)0xED, (byte)0x16, (byte)0x8B, (byte)0x80, (byte)0x41, (byte)0xE4, (byte)0x34, (byte)0x74,
						(byte)0x66, (byte)0xB9, (byte)0x0B, (byte)0xFD, (byte)0x3F, (byte)0x05, (byte)0xEB, (byte)0x61,
						(byte)0xE2, (byte)0xEA, (byte)0x50, (byte)0x15, (byte)0xD0, (byte)0x90, (byte)0x26, (byte)0x07,
						(byte)0x32, (byte)0x4D, (byte)0x81, (byte)0xBA, (byte)0xE5, (byte)0x18, (byte)0x0E, (byte)0x9B,
						(byte)0x7E, (byte)0x95, (byte)0xDE, (byte)0x72, (byte)0x62, (byte)0x3B, (byte)0xCE, (byte)0xD7,
						(byte)0xD6, (byte)0xA3, (byte)0xA6, (byte)0x57, (byte)0x46, (byte)0x1C, (byte)0x81, (byte)0x63,
						(byte)0xE9, (byte)0x16, (byte)0x50, (byte)0xEB, (byte)0xB1, (byte)0xD8, (byte)0xFF, (byte)0xEF,
						(byte)0xD0, (byte)0x4E, (byte)0x32, (byte)0x9B, (byte)0xBE, (byte)0x8B, (byte)0x21, (byte)0x2D,
						(byte)0x10, (byte)0x28, (byte)0x18, (byte)0x1C, (byte)0xF3, (byte)0x2B, (byte)0x88, (byte)0x92,
						(byte)0xF0, (byte)0xD1, (byte)0xD8, (byte)0x4B, (byte)0x0C, (byte)0x71, (byte)0x5D, (byte)0x75,
						(byte)0xD3, (byte)0x7E, (byte)0xF5, (byte)0xDA, (byte)0x62, (byte)0x3F, (byte)0x15, (byte)0x85,
						(byte)0xAC, (byte)0x0A, (byte)0x07, (byte)0xCA, (byte)0xE7, (byte)0xF7, (byte)0x3C, (byte)0x05,
						(byte)0x42, (byte)0x3C, (byte)0xE3, (byte)0x3F, (byte)0x94, (byte)0xE5, (byte)0x5D, (byte)0x53,
						(byte)0x25, (byte)0x20, (byte)0x09, (byte)0xB2, (byte)0xFA, (byte)0x0A, (byte)0x4A, (byte)0x5F,
						(byte)0x4C, (byte)0x3E, (byte)0x4F, (byte)0xE3, (byte)0x22, (byte)0xD0, (byte)0xD8, (byte)0x24,
						(byte)0xA8, (byte)0x3B, (byte)0xED, (byte)0xC5, (byte)0x5B, (byte)0x41, (byte)0x7E, (byte)0x80,
						(byte)0xA8, (byte)0x0A, (byte)0xC0, (byte)0x0F, (byte)0x94, (byte)0x96, (byte)0xA3, (byte)0x4C,
						(byte)0x84, (byte)0xC8, (byte)0x4C, (byte)0xFF, (byte)0xFF, (byte)0xA2, (byte)0x9A, (byte)0x7D,
						(byte)0x03, (byte)0xBB, (byte)0x69, (byte)0xF9, (byte)0x08, (byte)0xF1, (byte)0x2F, (byte)0x18,
						(byte)0xB5, (byte)0x64, (byte)0x10, (byte)0x44, (byte)0x66, (byte)0xD1, (byte)0xC7, (byte)0xBE,
						(byte)0xD5, (byte)0x67, (byte)0x21, (byte)0x88, (byte)0xE4, (byte)0x79, (byte)0xC8, (byte)0x95},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x99, (byte)0xEC, (byte)0x29, (byte)0x5D, (byte)0xCD, (byte)0xBA, (byte)0x74, (byte)0x37,
						(byte)0x18, (byte)0x14, (byte)0xB2, (byte)0x6A, (byte)0x4F, (byte)0xEF, (byte)0xE8, (byte)0x03,
						(byte)0x7A, (byte)0x0D, (byte)0x83, (byte)0x63}
		);
		//39. LOCAL_8
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x08,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xC6, (byte)0x60, (byte)0x62, (byte)0xB0, (byte)0xB9, (byte)0xA9, (byte)0x82, (byte)0x26,
						(byte)0x1D, (byte)0x56, (byte)0x2D, (byte)0x15, (byte)0x2F, (byte)0x44, (byte)0x2A, (byte)0x4A,
						(byte)0xAF, (byte)0x41, (byte)0x53, (byte)0xCE, (byte)0xF3, (byte)0xE8, (byte)0xE1, (byte)0xAD,
						(byte)0xE4, (byte)0x4C, (byte)0x7C, (byte)0x2F, (byte)0x5E, (byte)0x75, (byte)0x83, (byte)0xA7,
						(byte)0x38, (byte)0x0A, (byte)0x4E, (byte)0x4B, (byte)0xF8, (byte)0x50, (byte)0xC7, (byte)0xDE,
						(byte)0x07, (byte)0x94, (byte)0xBC, (byte)0xA4, (byte)0x4A, (byte)0xD1, (byte)0xC6, (byte)0xC9,
						(byte)0x14, (byte)0xF1, (byte)0x71, (byte)0x20, (byte)0xE9, (byte)0x38, (byte)0x19, (byte)0x2B,
						(byte)0xCD, (byte)0x91, (byte)0x04, (byte)0x7F, (byte)0xAD, (byte)0x87, (byte)0xF1, (byte)0x24,
						(byte)0x61, (byte)0xB2, (byte)0x8A, (byte)0x22, (byte)0x74, (byte)0x6B, (byte)0x26, (byte)0xD5,
						(byte)0x54, (byte)0x79, (byte)0xB0, (byte)0x8B, (byte)0x0E, (byte)0x71, (byte)0x2B, (byte)0x31,
						(byte)0xE4, (byte)0x73, (byte)0x39, (byte)0xBC, (byte)0xD9, (byte)0x29, (byte)0x4F, (byte)0x72,
						(byte)0x80, (byte)0x3F, (byte)0xF0, (byte)0xB2, (byte)0xCB, (byte)0x92, (byte)0xC9, (byte)0x0F,
						(byte)0x1B, (byte)0xE8, (byte)0x20, (byte)0x49, (byte)0x5D, (byte)0x03, (byte)0xE8, (byte)0xA1,
						(byte)0xAA, (byte)0x5B, (byte)0xCB, (byte)0x56, (byte)0xEF, (byte)0x64, (byte)0x6A, (byte)0x99,
						(byte)0x51, (byte)0x95, (byte)0x12, (byte)0xE1, (byte)0x98, (byte)0x90, (byte)0xC8, (byte)0x4E,
						(byte)0xB1, (byte)0xFF, (byte)0x20, (byte)0xE8, (byte)0x2E, (byte)0x2E, (byte)0x82, (byte)0xED,
						(byte)0xD4, (byte)0xD5, (byte)0xFA, (byte)0xBC, (byte)0x9E, (byte)0x02, (byte)0x4E, (byte)0xF4,
						(byte)0x00, (byte)0x8D, (byte)0x91, (byte)0x17, (byte)0xCD, (byte)0xB2, (byte)0xB2, (byte)0x9D},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xDD, (byte)0x94, (byte)0x46, (byte)0x8F, (byte)0x67, (byte)0x6C, (byte)0xAE, (byte)0xFB,
						(byte)0x86, (byte)0xD8, (byte)0xFC, (byte)0x85, (byte)0x3E, (byte)0x1D, (byte)0xF7, (byte)0x31,
						(byte)0x7D, (byte)0xED, (byte)0x47, (byte)0x75}
		);
		//40. LOCAL_9
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x09,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0xC4, (byte)0x5A, (byte)0xA9, (byte)0x3F, (byte)0x61, (byte)0x1D, (byte)0xDA, (byte)0xEE,
						(byte)0xF8, (byte)0x68, (byte)0xEE, (byte)0x01, (byte)0xD7, (byte)0xA7, (byte)0xB6, (byte)0x43,
						(byte)0xC0, (byte)0xEC, (byte)0xF5, (byte)0xE4, (byte)0xE0, (byte)0x96, (byte)0x19, (byte)0x83,
						(byte)0x62, (byte)0xE6, (byte)0x1B, (byte)0x05, (byte)0x78, (byte)0x1E, (byte)0xD6, (byte)0x59,
						(byte)0x97, (byte)0x44, (byte)0xBA, (byte)0xE3, (byte)0xAC, (byte)0xCA, (byte)0x28, (byte)0x28,
						(byte)0x35, (byte)0x56, (byte)0x23, (byte)0x27, (byte)0xAA, (byte)0xFB, (byte)0x36, (byte)0x73,
						(byte)0x4A, (byte)0xB1, (byte)0x50, (byte)0xF6, (byte)0x4F, (byte)0x5D, (byte)0x85, (byte)0x7C,
						(byte)0x38, (byte)0x37, (byte)0x64, (byte)0x42, (byte)0x76, (byte)0x8B, (byte)0x6D, (byte)0x44,
						(byte)0xB1, (byte)0x67, (byte)0xD6, (byte)0x2A, (byte)0xAC, (byte)0x95, (byte)0x4C, (byte)0x9B,
						(byte)0xC9, (byte)0x01, (byte)0xC8, (byte)0x8A, (byte)0x04, (byte)0x51, (byte)0xD4, (byte)0xB8,
						(byte)0x10, (byte)0xD4, (byte)0x57, (byte)0x8C, (byte)0xDA, (byte)0x19, (byte)0x2A, (byte)0x8E,
						(byte)0x79, (byte)0xC7, (byte)0x2B, (byte)0x4A, (byte)0xF3, (byte)0x66, (byte)0x72, (byte)0xD5,
						(byte)0x4B, (byte)0xFB, (byte)0x25, (byte)0xF0, (byte)0x4E, (byte)0x61, (byte)0x96, (byte)0xA6,
						(byte)0xD3, (byte)0xC8, (byte)0xC5, (byte)0x39, (byte)0x28, (byte)0x45, (byte)0x61, (byte)0x8D,
						(byte)0x70, (byte)0x14, (byte)0x52, (byte)0xE1, (byte)0x7F, (byte)0x29, (byte)0x15, (byte)0x5F,
						(byte)0x88, (byte)0x32, (byte)0x2D, (byte)0xC2, (byte)0x69, (byte)0xD3, (byte)0xDD, (byte)0xB9,
						(byte)0xC0, (byte)0x23, (byte)0x01, (byte)0x44, (byte)0xAB, (byte)0x22, (byte)0x0A, (byte)0x73,
						(byte)0x46, (byte)0xA8, (byte)0x16, (byte)0xE8, (byte)0xB6, (byte)0x9A, (byte)0x33, (byte)0x1B,
						(byte)0xFE, (byte)0xD3, (byte)0xF1, (byte)0x37, (byte)0x9D, (byte)0xCD, (byte)0x7C, (byte)0x1E,
						(byte)0xF2, (byte)0xDE, (byte)0x2C, (byte)0xB4, (byte)0xE9, (byte)0xB4, (byte)0x5E, (byte)0x24,
						(byte)0x87, (byte)0xBD, (byte)0x01, (byte)0xD3, (byte)0xB3, (byte)0xD2, (byte)0x7F, (byte)0xE1,
						(byte)0xBD, (byte)0xF7, (byte)0xFB, (byte)0x09, (byte)0x61, (byte)0x97, (byte)0x88, (byte)0x51},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xFB, (byte)0x87, (byte)0x28, (byte)0xB3, (byte)0x47, (byte)0x5B, (byte)0xD5, (byte)0xBF,
						(byte)0x12, (byte)0xE8, (byte)0xC1, (byte)0x33, (byte)0xC7, (byte)0xC0, (byte)0x7E, (byte)0x74,
						(byte)0xAC, (byte)0x1C, (byte)0x3F, (byte)0x6C}
		);
		
		return i;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	public static int setDefaultLiveCAPK2ND(int i) {
		//41. LOCAL_10
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x0A,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xAF, (byte)0xDD, (byte)0xC9, (byte)0x2B, (byte)0xA0, (byte)0xC8, (byte)0xEB, (byte)0xF4,
						(byte)0x1A, (byte)0x95, (byte)0x94, (byte)0x3B, (byte)0xC4, (byte)0x3A, (byte)0x7F, (byte)0x14,
						(byte)0x20, (byte)0x21, (byte)0xB9, (byte)0x49, (byte)0xB2, (byte)0xC8, (byte)0x8F, (byte)0xF8,
						(byte)0xB8, (byte)0x5C, (byte)0x54, (byte)0xF9, (byte)0x71, (byte)0x45, (byte)0xFC, (byte)0xC7,
						(byte)0xFB, (byte)0x08, (byte)0xAA, (byte)0x75, (byte)0x15, (byte)0x59, (byte)0x22, (byte)0x60,
						(byte)0x2D, (byte)0xF6, (byte)0xDB, (byte)0xD6, (byte)0x62, (byte)0x0E, (byte)0x26, (byte)0x4D,
						(byte)0x62, (byte)0x46, (byte)0x65, (byte)0xFB, (byte)0x37, (byte)0x06, (byte)0x6D, (byte)0x25,
						(byte)0x83, (byte)0x0D, (byte)0xBF, (byte)0xD7, (byte)0x0D, (byte)0xDA, (byte)0x32, (byte)0x3B,
						(byte)0x08, (byte)0xFF, (byte)0x4D, (byte)0x0C, (byte)0x4E, (byte)0x92, (byte)0xF7, (byte)0x0E,
						(byte)0xAE, (byte)0x55, (byte)0xB1, (byte)0x90, (byte)0xC0, (byte)0xDE, (byte)0x20, (byte)0xC1,
						(byte)0xD1, (byte)0xFF, (byte)0x6E, (byte)0x2B, (byte)0xAA, (byte)0x4C, (byte)0xF5, (byte)0xE5,
						(byte)0x45, (byte)0xB0, (byte)0xBB, (byte)0xA6, (byte)0xD8, (byte)0xB8, (byte)0xD9, (byte)0x04,
						(byte)0xF6, (byte)0x80, (byte)0x04, (byte)0x43, (byte)0x4E, (byte)0xEE, (byte)0xEC, (byte)0x7E,
						(byte)0xC9, (byte)0xF2, (byte)0xFE, (byte)0x6E, (byte)0xEF, (byte)0xE2, (byte)0xF1, (byte)0x5C,
						(byte)0xC4, (byte)0x6E, (byte)0xA4, (byte)0x55, (byte)0x4A, (byte)0xA5, (byte)0x01, (byte)0xC6,
						(byte)0xB5, (byte)0xDD, (byte)0x48, (byte)0x20, (byte)0xA6, (byte)0x25, (byte)0xB6, (byte)0x1A,
						(byte)0x8B, (byte)0xB2, (byte)0x44, (byte)0xC7, (byte)0xCD, (byte)0x7D, (byte)0x59, (byte)0xB9,
						(byte)0x39, (byte)0x8B, (byte)0x78, (byte)0x2A, (byte)0x9D, (byte)0x83, (byte)0x50, (byte)0x03},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x46, (byte)0x4A, (byte)0x5A, (byte)0xD7, (byte)0x4C, (byte)0xDF, (byte)0x35, (byte)0x6F,
						(byte)0x9B, (byte)0xF2, (byte)0xC3, (byte)0x5E, (byte)0xF6, (byte)0x0A, (byte)0xB7, (byte)0x0D,
						(byte)0xB7, (byte)0x36, (byte)0x2F, (byte)0x87}
		);
		//42. LOCAL_11
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x0B,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0x8E, (byte)0x40, (byte)0xBD, (byte)0x49, (byte)0xC9, (byte)0x78, (byte)0xA7, (byte)0x26,
						(byte)0x47, (byte)0xE4, (byte)0x14, (byte)0xCE, (byte)0x0D, (byte)0x61, (byte)0x40, (byte)0xFA,
						(byte)0xB2, (byte)0x04, (byte)0xEF, (byte)0x63, (byte)0x16, (byte)0x75, (byte)0x3B, (byte)0x32,
						(byte)0xA1, (byte)0x10, (byte)0x9C, (byte)0x82, (byte)0x6C, (byte)0x48, (byte)0x42, (byte)0x94,
						(byte)0x58, (byte)0x92, (byte)0x4B, (byte)0xE1, (byte)0xCC, (byte)0x6C, (byte)0x42, (byte)0xA2,
						(byte)0x81, (byte)0x81, (byte)0xA1, (byte)0xEF, (byte)0xB6, (byte)0x4C, (byte)0xA2, (byte)0x70,
						(byte)0x79, (byte)0x4C, (byte)0x7D, (byte)0xFA, (byte)0x3F, (byte)0x72, (byte)0x9A, (byte)0xFF,
						(byte)0x6F, (byte)0xFB, (byte)0xEB, (byte)0x21, (byte)0x18, (byte)0xD6, (byte)0x22, (byte)0x3B,
						(byte)0x9D, (byte)0xBA, (byte)0x12, (byte)0xF2, (byte)0x4F, (byte)0x40, (byte)0xE4, (byte)0xFA,
						(byte)0x3B, (byte)0x31, (byte)0x86, (byte)0xAD, (byte)0xBB, (byte)0xDA, (byte)0x2C, (byte)0x29,
						(byte)0x4D, (byte)0xD6, (byte)0xA5, (byte)0xA3, (byte)0xA2, (byte)0x72, (byte)0x14, (byte)0xED,
						(byte)0xE6, (byte)0xA0, (byte)0xD9, (byte)0x2F, (byte)0xA5, (byte)0x3C, (byte)0xC2, (byte)0x00,
						(byte)0xF1, (byte)0xC5, (byte)0x01, (byte)0x98, (byte)0xC3, (byte)0x6A, (byte)0x68, (byte)0x2F,
						(byte)0x5C, (byte)0x70, (byte)0xBD, (byte)0x58, (byte)0xD9, (byte)0x55, (byte)0x5C, (byte)0xB0,
						(byte)0x17, (byte)0xFD, (byte)0x7F, (byte)0xD5, (byte)0x4A, (byte)0x3C, (byte)0xD2, (byte)0x07,
						(byte)0x2B, (byte)0xA3, (byte)0x87, (byte)0x06, (byte)0xBC, (byte)0x16, (byte)0x82, (byte)0xDB,
						(byte)0x65, (byte)0x7C, (byte)0x1C, (byte)0xDF, (byte)0x0A, (byte)0xF1, (byte)0xFB, (byte)0x47,
						(byte)0x91, (byte)0x5F, (byte)0xE1, (byte)0xC5, (byte)0xCC, (byte)0xE7, (byte)0x15, (byte)0xA5,
						(byte)0x91, (byte)0xCC, (byte)0x7B, (byte)0x32, (byte)0x0F, (byte)0xC0, (byte)0x85, (byte)0x9D,
						(byte)0x74, (byte)0xF7, (byte)0xCF, (byte)0x8A, (byte)0x77, (byte)0x4A, (byte)0xA2, (byte)0x73,
						(byte)0xE4, (byte)0x05, (byte)0xFE, (byte)0x1C, (byte)0x62, (byte)0x27, (byte)0x39, (byte)0x7B,
						(byte)0xEA, (byte)0xC8, (byte)0x19, (byte)0x09, (byte)0x4B, (byte)0xD7, (byte)0x0A, (byte)0x67},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x3C, (byte)0x77, (byte)0x6C, (byte)0xF7, (byte)0x7F, (byte)0x8C, (byte)0xD1, (byte)0xB8,
						(byte)0x43, (byte)0x04, (byte)0xB7, (byte)0xB2, (byte)0xDA, (byte)0xD2, (byte)0xA5, (byte)0xD4,
						(byte)0xF0, (byte)0x50, (byte)0xD1, (byte)0xC1}
		);
		//43. LOCAL_12
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x0C,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0xB9, (byte)0x55, (byte)0x95, (byte)0x3E, (byte)0xB4, (byte)0x12, (byte)0xBE, (byte)0xCF,
						(byte)0x31, (byte)0xF0, (byte)0x4A, (byte)0x2D, (byte)0xB2, (byte)0x6C, (byte)0x6F, (byte)0x93,
						(byte)0xDF, (byte)0x33, (byte)0x64, (byte)0x95, (byte)0xE5, (byte)0x23, (byte)0xC9, (byte)0x58,
						(byte)0x92, (byte)0x13, (byte)0x5B, (byte)0xD1, (byte)0x1A, (byte)0xE1, (byte)0xBC, (byte)0x98,
						(byte)0xB5, (byte)0xA6, (byte)0x9A, (byte)0x97, (byte)0xA2, (byte)0xB7, (byte)0x86, (byte)0x30,
						(byte)0xE1, (byte)0x50, (byte)0xDD, (byte)0x9C, (byte)0xBB, (byte)0x4B, (byte)0x79, (byte)0x18,
						(byte)0x94, (byte)0x42, (byte)0x42, (byte)0x13, (byte)0xF6, (byte)0xF9, (byte)0x9D, (byte)0x33,
						(byte)0x90, (byte)0xB5, (byte)0x51, (byte)0x32, (byte)0x3E, (byte)0x1A, (byte)0x49, (byte)0x0C,
						(byte)0x20, (byte)0xAB, (byte)0xF8, (byte)0x74, (byte)0x9C, (byte)0x7C, (byte)0x4E, (byte)0x09,
						(byte)0x9B, (byte)0x95, (byte)0xC2, (byte)0x51, (byte)0x25, (byte)0x8B, (byte)0xE0, (byte)0x37,
						(byte)0x1E, (byte)0x8F, (byte)0x1A, (byte)0xCF, (byte)0x3A, (byte)0x49, (byte)0x74, (byte)0xA5,
						(byte)0x2A, (byte)0xE4, (byte)0xB7, (byte)0x4D, (byte)0xE3, (byte)0x95, (byte)0xAE, (byte)0x58,
						(byte)0x89, (byte)0x65, (byte)0x01, (byte)0xB5, (byte)0xAB, (byte)0xCE, (byte)0x97, (byte)0x58,
						(byte)0x3C, (byte)0xE3, (byte)0x1A, (byte)0xB8, (byte)0x90, (byte)0xA6, (byte)0x86, (byte)0x26,
						(byte)0xE3, (byte)0x34, (byte)0x56, (byte)0x5B, (byte)0x2D, (byte)0x7E, (byte)0xA6, (byte)0x4B,
						(byte)0xA3, (byte)0xEC, (byte)0x60, (byte)0x65, (byte)0xEE, (byte)0x41, (byte)0x0D, (byte)0xB2,
						(byte)0xDF, (byte)0xB0, (byte)0x3F, (byte)0xE7, (byte)0xFA, (byte)0x4F, (byte)0x8D, (byte)0x01,
						(byte)0xC8, (byte)0xB8, (byte)0xB3, (byte)0x34, (byte)0x9E, (byte)0xDD, (byte)0x6E, (byte)0xC9,
						(byte)0xB1, (byte)0x39, (byte)0x71, (byte)0xC9, (byte)0x69, (byte)0x0F, (byte)0x4E, (byte)0xBD,
						(byte)0xEA, (byte)0xCF, (byte)0x28, (byte)0x99, (byte)0xED, (byte)0xC4, (byte)0x4A, (byte)0xAA,
						(byte)0x93, (byte)0x57, (byte)0x56, (byte)0xBF, (byte)0x38, (byte)0x47, (byte)0xC2, (byte)0x9E,
						(byte)0x0A, (byte)0xE6, (byte)0x08, (byte)0x62, (byte)0x7F, (byte)0x0A, (byte)0x80, (byte)0xD3},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x1E, (byte)0xCB, (byte)0xBA, (byte)0xDE, (byte)0xA8, (byte)0xE4, (byte)0x75, (byte)0x93,
						(byte)0x65, (byte)0xD5, (byte)0x6C, (byte)0xBB, (byte)0xB9, (byte)0x3D, (byte)0x07, (byte)0x4A,
						(byte)0x0A, (byte)0xBE, (byte)0xA6, (byte)0x1A}
		);
		//44. LOCAL_13
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x0D,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0xCC, (byte)0x55, (byte)0x19, (byte)0xFC, (byte)0x0A, (byte)0x9F, (byte)0x42, (byte)0x35,
						(byte)0xED, (byte)0xFE, (byte)0x66, (byte)0xB2, (byte)0xB6, (byte)0xCC, (byte)0xCF, (byte)0xF3,
						(byte)0xA7, (byte)0x6C, (byte)0xC9, (byte)0x2A, (byte)0x9B, (byte)0xCD, (byte)0x0D, (byte)0x15,
						(byte)0xDC, (byte)0x67, (byte)0x73, (byte)0xE8, (byte)0x4A, (byte)0x8E, (byte)0x4E, (byte)0xAC,
						(byte)0x8A, (byte)0x20, (byte)0x1C, (byte)0x6D, (byte)0xBA, (byte)0x60, (byte)0x57, (byte)0x35,
						(byte)0xC2, (byte)0xF2, (byte)0x4F, (byte)0xF5, (byte)0x36, (byte)0x83, (byte)0x0A, (byte)0x82,
						(byte)0x7B, (byte)0x6C, (byte)0xF7, (byte)0x3D, (byte)0x7A, (byte)0x50, (byte)0xFB, (byte)0xEB,
						(byte)0xF1, (byte)0xD2, (byte)0xAA, (byte)0x22, (byte)0xFE, (byte)0x93, (byte)0x43, (byte)0x93,
						(byte)0xCF, (byte)0x02, (byte)0xFD, (byte)0xFC, (byte)0x12, (byte)0xF3, (byte)0x1B, (byte)0xF8,
						(byte)0xB7, (byte)0x3B, (byte)0x26, (byte)0xF7, (byte)0x37, (byte)0xB7, (byte)0xC2, (byte)0x82,
						(byte)0x1B, (byte)0x01, (byte)0x06, (byte)0xAB, (byte)0xF1, (byte)0x72, (byte)0x63, (byte)0xF1,
						(byte)0xBA, (byte)0x2D, (byte)0xC3, (byte)0x7C, (byte)0xAA, (byte)0x7A, (byte)0x95, (byte)0x59,
						(byte)0x88, (byte)0x72, (byte)0x16, (byte)0x1B, (byte)0x3C, (byte)0x54, (byte)0x92, (byte)0xC6,
						(byte)0xFE, (byte)0x07, (byte)0xAB, (byte)0x82, (byte)0x3A, (byte)0x49, (byte)0x71, (byte)0xD7,
						(byte)0x45, (byte)0x0E, (byte)0xBF, (byte)0x0D, (byte)0x1A, (byte)0x86, (byte)0x47, (byte)0xAF,
						(byte)0xDB, (byte)0x88, (byte)0x2D, (byte)0xD9, (byte)0x1B, (byte)0xC6, (byte)0xF2, (byte)0xB5,
						(byte)0xF6, (byte)0xE6, (byte)0x84, (byte)0xAC, (byte)0x2A, (byte)0x61, (byte)0x26, (byte)0xA9,
						(byte)0x73, (byte)0xB3, (byte)0x51, (byte)0xC1, (byte)0x61, (byte)0x3A, (byte)0x90, (byte)0x55,
						(byte)0x93, (byte)0x61, (byte)0xB2, (byte)0x30, (byte)0x6D, (byte)0xD7, (byte)0xFA, (byte)0xC8,
						(byte)0x50, (byte)0x10, (byte)0x1E, (byte)0x4F, (byte)0x81, (byte)0xF7, (byte)0x77, (byte)0x89,
						(byte)0xE2, (byte)0x5B, (byte)0x21, (byte)0x7F, (byte)0x71, (byte)0x51, (byte)0x1A, (byte)0xE7,
						(byte)0x6E, (byte)0xFE, (byte)0x75, (byte)0xF0, (byte)0xBE, (byte)0x30, (byte)0x6B, (byte)0xA9},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x04, (byte)0x2C, (byte)0xE0, (byte)0x0D, (byte)0x60, (byte)0x6A, (byte)0x02, (byte)0x04,
						(byte)0x2E, (byte)0x87, (byte)0xB8, (byte)0x58, (byte)0x0C, (byte)0xFE, (byte)0x68, (byte)0x2A,
						(byte)0x60, (byte)0xEA, (byte)0x3C, (byte)0x91}
		);
		//45. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x10,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)147,
				new byte[]{(byte)0xAF, (byte)0xDD, (byte)0xC9, (byte)0x2B, (byte)0xA0, (byte)0xC8, (byte)0xEB, (byte)0xF4,
						(byte)0x1A, (byte)0x95, (byte)0x94, (byte)0x3B, (byte)0xC4, (byte)0x3A, (byte)0x7F, (byte)0x14,
						(byte)0x20, (byte)0x21, (byte)0xB9, (byte)0x49, (byte)0xB2, (byte)0xC8, (byte)0x8F, (byte)0xF8,
						(byte)0xB8, (byte)0x5C, (byte)0x54, (byte)0xF9, (byte)0x71, (byte)0x45, (byte)0xFC, (byte)0xC7,
						(byte)0xFB, (byte)0x08, (byte)0xAA, (byte)0x75, (byte)0x15, (byte)0x59, (byte)0x22, (byte)0x60,
						(byte)0x2D, (byte)0xF6, (byte)0xDB, (byte)0xD6, (byte)0x62, (byte)0x0E, (byte)0x26, (byte)0x4D,
						(byte)0x62, (byte)0x46, (byte)0x65, (byte)0xFB, (byte)0x37, (byte)0x06, (byte)0x6D, (byte)0x25,
						(byte)0x83, (byte)0x0D, (byte)0xBF, (byte)0xD7, (byte)0x0D, (byte)0xDA, (byte)0x32, (byte)0x3B,
						(byte)0x08, (byte)0xFF, (byte)0x4D, (byte)0x0C, (byte)0x4E, (byte)0x92, (byte)0xF7, (byte)0x0E,
						(byte)0xAE, (byte)0x55, (byte)0xB1, (byte)0x90, (byte)0xC0, (byte)0xDE, (byte)0x20, (byte)0xC1,
						(byte)0xD1, (byte)0xFF, (byte)0x6E, (byte)0x2B, (byte)0xAA, (byte)0x4C, (byte)0xF5, (byte)0xE5,
						(byte)0x45, (byte)0xB0, (byte)0xBB, (byte)0xA6, (byte)0xD8, (byte)0xB8, (byte)0xD9, (byte)0x04,
						(byte)0xF6, (byte)0x80, (byte)0x04, (byte)0x43, (byte)0x4E, (byte)0xEE, (byte)0xEC, (byte)0x7E,
						(byte)0xC9, (byte)0xF2, (byte)0xFE, (byte)0x6E, (byte)0xEF, (byte)0xE2, (byte)0xF1, (byte)0x5C,
						(byte)0xC4, (byte)0x6E, (byte)0xA4, (byte)0x55, (byte)0x4A, (byte)0xA5, (byte)0x01, (byte)0xC6,
						(byte)0xB5, (byte)0xDD, (byte)0x48, (byte)0x20, (byte)0xA6, (byte)0x25, (byte)0xB6, (byte)0x1A,
						(byte)0x8B, (byte)0xB2, (byte)0x44, (byte)0xC7, (byte)0xCD, (byte)0x7D, (byte)0x59, (byte)0xB9,
						(byte)0x39, (byte)0x8B, (byte)0x78, (byte)0x2A, (byte)0x9D, (byte)0x83, (byte)0x50, (byte)0x03},
				(byte)0x01,
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x46, (byte)0x4A, (byte)0x5A, (byte)0xD7, (byte)0x4C, (byte)0xDF, (byte)0x35, (byte)0x6F,
						(byte)0x9B, (byte)0xF2, (byte)0xC3, (byte)0x5E, (byte)0xF6, (byte)0x0A, (byte)0xB7, (byte)0x0D,
						(byte)0xB7, (byte)0x36, (byte)0x2F, (byte)0x87}
		);
		//46. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x11,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)176,
				new byte[]{(byte)0x8E, (byte)0x40, (byte)0xBD, (byte)0x49, (byte)0xC9, (byte)0x78, (byte)0xA7, (byte)0x26,
						(byte)0x47, (byte)0xE4, (byte)0x14, (byte)0xCE, (byte)0x0D, (byte)0x61, (byte)0x40, (byte)0xFA,
						(byte)0xB2, (byte)0x04, (byte)0xEF, (byte)0x63, (byte)0x16, (byte)0x75, (byte)0x3B, (byte)0x32,
						(byte)0xA1, (byte)0x10, (byte)0x9C, (byte)0x82, (byte)0x6C, (byte)0x48, (byte)0x42, (byte)0x94,
						(byte)0x58, (byte)0x92, (byte)0x4B, (byte)0xE1, (byte)0xCC, (byte)0x6C, (byte)0x42, (byte)0xA2,
						(byte)0x81, (byte)0x81, (byte)0xA1, (byte)0xEF, (byte)0xB6, (byte)0x4C, (byte)0xA2, (byte)0x70,
						(byte)0x79, (byte)0x4C, (byte)0x7D, (byte)0xFA, (byte)0x3F, (byte)0x72, (byte)0x9A, (byte)0xFF,
						(byte)0x6F, (byte)0xFB, (byte)0xEB, (byte)0x21, (byte)0x18, (byte)0xD6, (byte)0x22, (byte)0x3B,
						(byte)0x9D, (byte)0xBA, (byte)0x12, (byte)0xF2, (byte)0x4F, (byte)0x40, (byte)0xE4, (byte)0xFA,
						(byte)0x3B, (byte)0x31, (byte)0x86, (byte)0xAD, (byte)0xBB, (byte)0xDA, (byte)0x2C, (byte)0x29,
						(byte)0x4D, (byte)0xD6, (byte)0xA5, (byte)0xA3, (byte)0xA2, (byte)0x72, (byte)0x14, (byte)0xED,
						(byte)0xE6, (byte)0xA0, (byte)0xD9, (byte)0x2F, (byte)0xA5, (byte)0x3C, (byte)0xC2, (byte)0x00,
						(byte)0xF1, (byte)0xC5, (byte)0x01, (byte)0x98, (byte)0xC3, (byte)0x6A, (byte)0x68, (byte)0x2F,
						(byte)0x5C, (byte)0x70, (byte)0xBD, (byte)0x58, (byte)0xD9, (byte)0x55, (byte)0x5C, (byte)0xB0,
						(byte)0x17, (byte)0xFD, (byte)0x7F, (byte)0xD5, (byte)0x4A, (byte)0x3C, (byte)0xD2, (byte)0x07,
						(byte)0x2B, (byte)0xA3, (byte)0x87, (byte)0x06, (byte)0xBC, (byte)0x16, (byte)0x82, (byte)0xDB,
						(byte)0x65, (byte)0x7C, (byte)0x1C, (byte)0xDF, (byte)0x0A, (byte)0xF1, (byte)0xFB, (byte)0x47,
						(byte)0x91, (byte)0x5F, (byte)0xE1, (byte)0xC5, (byte)0xCC, (byte)0xE7, (byte)0x15, (byte)0xA5,
						(byte)0x91, (byte)0xCC, (byte)0x7B, (byte)0x32, (byte)0x0F, (byte)0xC0, (byte)0x85, (byte)0x9D,
						(byte)0x74, (byte)0xF7, (byte)0xCF, (byte)0x8A, (byte)0x77, (byte)0x4A, (byte)0xA2, (byte)0x73,
						(byte)0xE4, (byte)0x05, (byte)0xFE, (byte)0x1C, (byte)0x62, (byte)0x27, (byte)0x39, (byte)0x7B,
						(byte)0xEA, (byte)0xC8, (byte)0x19, (byte)0x09, (byte)0x4B, (byte)0xD7, (byte)0x0A, (byte)0x67},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x3C, (byte)0x77, (byte)0x6C, (byte)0xF7, (byte)0x7F, (byte)0x8C, (byte)0xD1, (byte)0xB8,
						(byte)0x43, (byte)0x04, (byte)0xB7, (byte)0xB2, (byte)0xDA, (byte)0xD2, (byte)0xA5, (byte)0xD4,
						(byte)0xF0, (byte)0x50, (byte)0xD1, (byte)0xC1}
		);
		//47. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x12,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)176,
				new byte[]{(byte)0xB9, (byte)0x55, (byte)0x95, (byte)0x3E, (byte)0xB4, (byte)0x12, (byte)0xBE, (byte)0xCF,
						(byte)0x31, (byte)0xF0, (byte)0x4A, (byte)0x2D, (byte)0xB2, (byte)0x6C, (byte)0x6F, (byte)0x93,
						(byte)0xDF, (byte)0x33, (byte)0x64, (byte)0x95, (byte)0xE5, (byte)0x23, (byte)0xC9, (byte)0x58,
						(byte)0x92, (byte)0x13, (byte)0x5B, (byte)0xD1, (byte)0x1A, (byte)0xE1, (byte)0xBC, (byte)0x98,
						(byte)0xB5, (byte)0xA6, (byte)0x9A, (byte)0x97, (byte)0xA2, (byte)0xB7, (byte)0x86, (byte)0x30,
						(byte)0xE1, (byte)0x50, (byte)0xDD, (byte)0x9C, (byte)0xBB, (byte)0x4B, (byte)0x79, (byte)0x18,
						(byte)0x94, (byte)0x42, (byte)0x42, (byte)0x13, (byte)0xF6, (byte)0xF9, (byte)0x9D, (byte)0x33,
						(byte)0x90, (byte)0xB5, (byte)0x51, (byte)0x32, (byte)0x3E, (byte)0x1A, (byte)0x49, (byte)0x0C,
						(byte)0x20, (byte)0xAB, (byte)0xF8, (byte)0x74, (byte)0x9C, (byte)0x7C, (byte)0x4E, (byte)0x09,
						(byte)0x9B, (byte)0x95, (byte)0xC2, (byte)0x51, (byte)0x25, (byte)0x8B, (byte)0xE0, (byte)0x37,
						(byte)0x1E, (byte)0x8F, (byte)0x1A, (byte)0xCF, (byte)0x3A, (byte)0x49, (byte)0x74, (byte)0xA5,
						(byte)0x2A, (byte)0xE4, (byte)0xB7, (byte)0x4D, (byte)0xE3, (byte)0x95, (byte)0xAE, (byte)0x58,
						(byte)0x89, (byte)0x65, (byte)0x01, (byte)0xB5, (byte)0xAB, (byte)0xCE, (byte)0x97, (byte)0x58,
						(byte)0x3C, (byte)0xE3, (byte)0x1A, (byte)0xB8, (byte)0x90, (byte)0xA6, (byte)0x86, (byte)0x26,
						(byte)0xE3, (byte)0x34, (byte)0x56, (byte)0x5B, (byte)0x2D, (byte)0x7E, (byte)0xA6, (byte)0x4B,
						(byte)0xA3, (byte)0xEC, (byte)0x60, (byte)0x65, (byte)0xEE, (byte)0x41, (byte)0x0D, (byte)0xB2,
						(byte)0xDF, (byte)0xB0, (byte)0x3F, (byte)0xE7, (byte)0xFA, (byte)0x4F, (byte)0x8D, (byte)0x01,
						(byte)0xC8, (byte)0xB8, (byte)0xB3, (byte)0x34, (byte)0x9E, (byte)0xDD, (byte)0x6E, (byte)0xC9,
						(byte)0xB1, (byte)0x39, (byte)0x71, (byte)0xC9, (byte)0x69, (byte)0x0F, (byte)0x4E, (byte)0xBD,
						(byte)0xEA, (byte)0xCF, (byte)0x28, (byte)0x99, (byte)0xED, (byte)0xC4, (byte)0x4A, (byte)0xAA,
						(byte)0x93, (byte)0x57, (byte)0x56, (byte)0xBF, (byte)0x38, (byte)0x47, (byte)0xC2, (byte)0x9E,
						(byte)0x0A, (byte)0xE6, (byte)0x08, (byte)0x62, (byte)0x7F, (byte)0x0A, (byte)0x80, (byte)0xD3},	// 8 * 32로 맞춤
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x1E, (byte)0xCB, (byte)0xBA, (byte)0xDE, (byte)0xA8, (byte)0xE4, (byte)0x75, (byte)0x93,
						(byte)0x65, (byte)0xD5, (byte)0x6C, (byte)0xBB, (byte)0xB9, (byte)0x3D, (byte)0x07, (byte)0x4A,
						(byte)0x0A, (byte)0xBE, (byte)0xA6, (byte)0x1A}
		);
		//48. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xD4, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x01},
				(byte)0x13,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)176,
				new byte[]{(byte)0xCC, (byte)0x55, (byte)0x19, (byte)0xFC, (byte)0x0A, (byte)0x9F, (byte)0x42, (byte)0x35,
						(byte)0xED, (byte)0xFE, (byte)0x66, (byte)0xB2, (byte)0xB6, (byte)0xCC, (byte)0xCF, (byte)0xF3,
						(byte)0xA7, (byte)0x6C, (byte)0xC9, (byte)0x2A, (byte)0x9B, (byte)0xCD, (byte)0x0D, (byte)0x15,
						(byte)0xDC, (byte)0x67, (byte)0x73, (byte)0xE8, (byte)0x4A, (byte)0x8E, (byte)0x4E, (byte)0xAC,
						(byte)0x8A, (byte)0x20, (byte)0x1C, (byte)0x6D, (byte)0xBA, (byte)0x60, (byte)0x57, (byte)0x35,
						(byte)0xC2, (byte)0xF2, (byte)0x4F, (byte)0xF5, (byte)0x36, (byte)0x83, (byte)0x0A, (byte)0x82,
						(byte)0x7B, (byte)0x6C, (byte)0xF7, (byte)0x3D, (byte)0x7A, (byte)0x50, (byte)0xFB, (byte)0xEB,
						(byte)0xF1, (byte)0xD2, (byte)0xAA, (byte)0x22, (byte)0xFE, (byte)0x93, (byte)0x43, (byte)0x93,
						(byte)0xCF, (byte)0x02, (byte)0xFD, (byte)0xFC, (byte)0x12, (byte)0xF3, (byte)0x1B, (byte)0xF8,
						(byte)0xB7, (byte)0x3B, (byte)0x26, (byte)0xF7, (byte)0x37, (byte)0xB7, (byte)0xC2, (byte)0x82,
						(byte)0x1B, (byte)0x01, (byte)0x06, (byte)0xAB, (byte)0xF1, (byte)0x72, (byte)0x63, (byte)0xF1,
						(byte)0xBA, (byte)0x2D, (byte)0xC3, (byte)0x7C, (byte)0xAA, (byte)0x7A, (byte)0x95, (byte)0x59,
						(byte)0x88, (byte)0x72, (byte)0x16, (byte)0x1B, (byte)0x3C, (byte)0x54, (byte)0x92, (byte)0xC6,
						(byte)0xFE, (byte)0x07, (byte)0xAB, (byte)0x82, (byte)0x3A, (byte)0x49, (byte)0x71, (byte)0xD7,
						(byte)0x45, (byte)0x0E, (byte)0xBF, (byte)0x0D, (byte)0x1A, (byte)0x86, (byte)0x47, (byte)0xAF,
						(byte)0xDB, (byte)0x88, (byte)0x2D, (byte)0xD9, (byte)0x1B, (byte)0xC6, (byte)0xF2, (byte)0xB5,
						(byte)0xF6, (byte)0xE6, (byte)0x84, (byte)0xAC, (byte)0x2A, (byte)0x61, (byte)0x26, (byte)0xA9,
						(byte)0x73, (byte)0xB3, (byte)0x51, (byte)0xC1, (byte)0x61, (byte)0x3A, (byte)0x90, (byte)0x55,
						(byte)0x93, (byte)0x61, (byte)0xB2, (byte)0x30, (byte)0x6D, (byte)0xD7, (byte)0xFA, (byte)0xC8,
						(byte)0x50, (byte)0x10, (byte)0x1E, (byte)0x4F, (byte)0x81, (byte)0xF7, (byte)0x77, (byte)0x89,
						(byte)0xE2, (byte)0x5B, (byte)0x21, (byte)0x7F, (byte)0x71, (byte)0x51, (byte)0x1A, (byte)0xE7,
						(byte)0x6E, (byte)0xFE, (byte)0x75, (byte)0xF0, (byte)0xBE, (byte)0x30, (byte)0x6B, (byte)0xA9},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x04, (byte)0x2C, (byte)0xE0, (byte)0x0D, (byte)0x60, (byte)0x6A, (byte)0x02, (byte)0x04,
						(byte)0x2E, (byte)0x87, (byte)0xB8, (byte)0x58, (byte)0x0C, (byte)0xFE, (byte)0x68, (byte)0x2A,
						(byte)0x60, (byte)0xEA, (byte)0x3C, (byte)0x91}
		);
		//49. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0x08,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)128,
				new byte[]{(byte)0xB7, (byte)0x46, (byte)0x70, (byte)0xDA, (byte)0xD1, (byte)0xDC, (byte)0x89, (byte)0x83,
						(byte)0x65, (byte)0x20, (byte)0x00, (byte)0xE5, (byte)0xA7, (byte)0xF2, (byte)0xF8, (byte)0xB3,
						(byte)0x5D, (byte)0xFD, (byte)0x08, (byte)0x3E, (byte)0xE5, (byte)0x93, (byte)0xE5, (byte)0xBA,
						(byte)0x89, (byte)0x5C, (byte)0x95, (byte)0x72, (byte)0x9F, (byte)0x2B, (byte)0xAD, (byte)0xE9,
						(byte)0xC8, (byte)0xAB, (byte)0xF3, (byte)0xDD, (byte)0x9C, (byte)0xE2, (byte)0x40, (byte)0xC4,
						(byte)0x51, (byte)0xC6, (byte)0xCE, (byte)0xFF, (byte)0xC7, (byte)0x68, (byte)0xD8, (byte)0x3C,
						(byte)0xBA, (byte)0xC7, (byte)0x6A, (byte)0xBB, (byte)0x8F, (byte)0xEA, (byte)0x58, (byte)0xF0,
						(byte)0x13, (byte)0xC6, (byte)0x47, (byte)0x00, (byte)0x7C, (byte)0xFF, (byte)0x76, (byte)0x17,
						(byte)0xBA, (byte)0xC2, (byte)0xAE, (byte)0x39, (byte)0x81, (byte)0x81, (byte)0x6F, (byte)0x25,
						(byte)0xCC, (byte)0x7E, (byte)0x52, (byte)0x38, (byte)0xEF, (byte)0x34, (byte)0xC4, (byte)0xF0,
						(byte)0x2D, (byte)0x0B, (byte)0x01, (byte)0xC2, (byte)0x4F, (byte)0x80, (byte)0xC2, (byte)0xC6,
						(byte)0x5E, (byte)0x7E, (byte)0x77, (byte)0x43, (byte)0xA4, (byte)0xFA, (byte)0x8E, (byte)0x23,
						(byte)0x20, (byte)0x6A, (byte)0x23, (byte)0xEC, (byte)0xE2, (byte)0x90, (byte)0xC2, (byte)0x6E,
						(byte)0xA5, (byte)0x6D, (byte)0xB0, (byte)0x85, (byte)0xC5, (byte)0xC5, (byte)0xEA, (byte)0xE2,
						(byte)0x62, (byte)0x92, (byte)0x45, (byte)0x1F, (byte)0xC8, (byte)0x29, (byte)0x2F, (byte)0x99,
						(byte)0x57, (byte)0xBE, (byte)0x8F, (byte)0xF2, (byte)0x0F, (byte)0xAD, (byte)0x53, (byte)0xE5},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xDD, (byte)0x36, (byte)0xD5, (byte)0x89, (byte)0x62, (byte)0x28, (byte)0xC8, (byte)0xC4,
						(byte)0x90, (byte)0x07, (byte)0x42, (byte)0xF1, (byte)0x07, (byte)0xE2, (byte)0xF9, (byte)0x1F,
						(byte)0xE5, (byte)0x0B, (byte)0xC7, (byte)0xEE}
		);
		//50. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0x09,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)128,
				new byte[]{(byte)0xB7, (byte)0x2A, (byte)0x8F, (byte)0xEF, (byte)0x5B, (byte)0x27, (byte)0xF2, (byte)0xB5,
						(byte)0x50, (byte)0x39, (byte)0x8F, (byte)0xDC, (byte)0xC2, (byte)0x56, (byte)0xF7, (byte)0x14,
						(byte)0xBA, (byte)0xD4, (byte)0x97, (byte)0xFF, (byte)0x56, (byte)0x09, (byte)0x4B, (byte)0x74,
						(byte)0x08, (byte)0x32, (byte)0x8C, (byte)0xB6, (byte)0x26, (byte)0xAA, (byte)0x6F, (byte)0x0E,
						(byte)0x6A, (byte)0x9D, (byte)0xF8, (byte)0x38, (byte)0x8E, (byte)0xB9, (byte)0x88, (byte)0x7B,
						(byte)0xC9, (byte)0x30, (byte)0x17, (byte)0x0B, (byte)0xCC, (byte)0x12, (byte)0x13, (byte)0xE9,
						(byte)0x0F, (byte)0xC0, (byte)0x70, (byte)0xD5, (byte)0x2C, (byte)0x8D, (byte)0xCD, (byte)0x0F,
						(byte)0xF9, (byte)0xE1, (byte)0x0F, (byte)0xAD, (byte)0x36, (byte)0x80, (byte)0x1F, (byte)0xE9,
						(byte)0x3F, (byte)0xC9, (byte)0x98, (byte)0xA7, (byte)0x21, (byte)0x70, (byte)0x50, (byte)0x91,
						(byte)0xF1, (byte)0x8B, (byte)0xC7, (byte)0xC9, (byte)0x82, (byte)0x41, (byte)0xCA, (byte)0xDC,
						(byte)0x15, (byte)0xA2, (byte)0xB9, (byte)0xDA, (byte)0x7F, (byte)0xB9, (byte)0x63, (byte)0x14,
						(byte)0x2C, (byte)0x0A, (byte)0xB6, (byte)0x40, (byte)0xD5, (byte)0xD0, (byte)0x13, (byte)0x5E,
						(byte)0x77, (byte)0xEB, (byte)0xAE, (byte)0x95, (byte)0xAF, (byte)0x1B, (byte)0x4F, (byte)0xEF,
						(byte)0xAD, (byte)0xCF, (byte)0x9C, (byte)0x01, (byte)0x23, (byte)0x66, (byte)0xBD, (byte)0xDA,
						(byte)0x04, (byte)0x55, (byte)0xC1, (byte)0x56, (byte)0x4A, (byte)0x68, (byte)0x81, (byte)0x0D,
						(byte)0x71, (byte)0x27, (byte)0x67, (byte)0x6D, (byte)0x49, (byte)0x38, (byte)0x90, (byte)0xBD},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x44, (byte)0x10, (byte)0xC6, (byte)0xD5, (byte)0x1C, (byte)0x2F, (byte)0x83, (byte)0xAD,
						(byte)0xFD, (byte)0x92, (byte)0x52, (byte)0x8F, (byte)0xA6, (byte)0xE3, (byte)0x8A, (byte)0x32,
						(byte)0xDF, (byte)0x04, (byte)0x8D, (byte)0x0A}
		);
		//51. JCB(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0x10,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0x99, (byte)0xB6, (byte)0x34, (byte)0x64, (byte)0xEE, (byte)0x0B, (byte)0x49, (byte)0x57,
						(byte)0xE4, (byte)0xFD, (byte)0x23, (byte)0xBF, (byte)0x92, (byte)0x3D, (byte)0x12, (byte)0xB6,
						(byte)0x14, (byte)0x69, (byte)0xB8, (byte)0xFF, (byte)0xF8, (byte)0x81, (byte)0x43, (byte)0x46,
						(byte)0xB2, (byte)0xED, (byte)0x6A, (byte)0x78, (byte)0x0F, (byte)0x89, (byte)0x88, (byte)0xEA,
						(byte)0x9C, (byte)0xF0, (byte)0x43, (byte)0x3B, (byte)0xC1, (byte)0xE6, (byte)0x55, (byte)0xF0,
						(byte)0x5E, (byte)0xFA, (byte)0x66, (byte)0xD0, (byte)0xC9, (byte)0x80, (byte)0x98, (byte)0xF2,
						(byte)0x5B, (byte)0x65, (byte)0x9D, (byte)0x7A, (byte)0x25, (byte)0xB8, (byte)0x47, (byte)0x8A,
						(byte)0x36, (byte)0xE4, (byte)0x89, (byte)0x76, (byte)0x0D, (byte)0x07, (byte)0x1F, (byte)0x54,
						(byte)0xCD, (byte)0xF7, (byte)0x41, (byte)0x69, (byte)0x48, (byte)0xED, (byte)0x73, (byte)0x3D,
						(byte)0x81, (byte)0x63, (byte)0x49, (byte)0xDA, (byte)0x2A, (byte)0xAD, (byte)0xDA, (byte)0x22,
						(byte)0x7E, (byte)0xE4, (byte)0x59, (byte)0x36, (byte)0x20, (byte)0x3C, (byte)0xBF, (byte)0x62,
						(byte)0x8C, (byte)0xD0, (byte)0x33, (byte)0xAA, (byte)0xBA, (byte)0x5E, (byte)0x5A, (byte)0x6E,
						(byte)0x4A, (byte)0xE3, (byte)0x7F, (byte)0xBA, (byte)0xCB, (byte)0x46, (byte)0x11, (byte)0xB4,
						(byte)0x11, (byte)0x3E, (byte)0xD4, (byte)0x27, (byte)0x52, (byte)0x9C, (byte)0x63, (byte)0x6F,
						(byte)0x6C, (byte)0x33, (byte)0x04, (byte)0xF8, (byte)0xAB, (byte)0xDD, (byte)0x6D, (byte)0x9A,
						(byte)0xD6, (byte)0x60, (byte)0x51, (byte)0x6A, (byte)0xE8, (byte)0x7F, (byte)0x7F, (byte)0x2D,
						(byte)0xDF, (byte)0x1D, (byte)0x2F, (byte)0xA4, (byte)0x4C, (byte)0x16, (byte)0x47, (byte)0x27,
						(byte)0xE5, (byte)0x6B, (byte)0xBC, (byte)0x9B, (byte)0xA2, (byte)0x3C, (byte)0x02, (byte)0x85},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC7, (byte)0x5E, (byte)0x52, (byte)0x10, (byte)0xCB, (byte)0xE6, (byte)0xE8, (byte)0xF0,
						(byte)0x59, (byte)0x4A, (byte)0x0F, (byte)0x19, (byte)0x11, (byte)0xB0, (byte)0x74, (byte)0x18,
						(byte)0xCA, (byte)0xDB, (byte)0x5B, (byte)0xAB}
		);
		//52. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},                // RID
				(byte)0x11,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)176,                                          // length in bits of modulus */
				new byte[]{(byte)0xA2, (byte)0x58, (byte)0x3A, (byte)0xA4, (byte)0x07, (byte)0x46, (byte)0xE3, (byte)0xA6,
						(byte)0x3C, (byte)0x22, (byte)0x47, (byte)0x8F, (byte)0x57, (byte)0x6D, (byte)0x1E, (byte)0xFC,
						(byte)0x5F, (byte)0xB0, (byte)0x46, (byte)0x13, (byte)0x5A, (byte)0x6F, (byte)0xC7, (byte)0x39,
						(byte)0xE8, (byte)0x2B, (byte)0x55, (byte)0x03, (byte)0x5F, (byte)0x71, (byte)0xB0, (byte)0x9B,
						(byte)0xEB, (byte)0x56, (byte)0x6E, (byte)0xDB, (byte)0x99, (byte)0x68, (byte)0xDD, (byte)0x64,
						(byte)0x9B, (byte)0x94, (byte)0xB6, (byte)0xDE, (byte)0xDC, (byte)0x03, (byte)0x38, (byte)0x99,
						(byte)0x88, (byte)0x4E, (byte)0x90, (byte)0x8C, (byte)0x27, (byte)0xBE, (byte)0x1C, (byte)0xD2,
						(byte)0x91, (byte)0xE5, (byte)0x43, (byte)0x6F, (byte)0x76, (byte)0x25, (byte)0x53, (byte)0x29,
						(byte)0x77, (byte)0x63, (byte)0xDA, (byte)0xA3, (byte)0xB8, (byte)0x90, (byte)0xD7, (byte)0x78,
						(byte)0xC0, (byte)0xF0, (byte)0x1E, (byte)0x33, (byte)0x44, (byte)0xCE, (byte)0xCD, (byte)0xFB,
						(byte)0x3B, (byte)0xA7, (byte)0x0D, (byte)0x7E, (byte)0x05, (byte)0x5B, (byte)0x8C, (byte)0x76,
						(byte)0x0D, (byte)0x01, (byte)0x79, (byte)0xA4, (byte)0x03, (byte)0xD6, (byte)0xB5, (byte)0x5F,
						(byte)0x2B, (byte)0x3B, (byte)0x08, (byte)0x39, (byte)0x12, (byte)0xB1, (byte)0x83, (byte)0xAD,
						(byte)0xB7, (byte)0x92, (byte)0x74, (byte)0x41, (byte)0xBE, (byte)0xD3, (byte)0x39, (byte)0x5A,
						(byte)0x19, (byte)0x9E, (byte)0xEF, (byte)0xE0, (byte)0xDE, (byte)0xBD, (byte)0x1F, (byte)0x5F,
						(byte)0xC3, (byte)0x26, (byte)0x40, (byte)0x33, (byte)0xDA, (byte)0x85, (byte)0x6F, (byte)0x4A,
						(byte)0x8B, (byte)0x93, (byte)0x91, (byte)0x68, (byte)0x85, (byte)0xBD, (byte)0x42, (byte)0xF9,
						(byte)0xC1, (byte)0xF4, (byte)0x56, (byte)0xAA, (byte)0xB8, (byte)0xCF, (byte)0xA8, (byte)0x3A,
						(byte)0xC5, (byte)0x74, (byte)0x83, (byte)0x3E, (byte)0xB5, (byte)0xE8, (byte)0x7B, (byte)0xB9,
						(byte)0xD4, (byte)0xC0, (byte)0x06, (byte)0xA4, (byte)0xB5, (byte)0x34, (byte)0x6B, (byte)0xD9,
						(byte)0xE1, (byte)0x7E, (byte)0x13, (byte)0x9A, (byte)0xB6, (byte)0x55, (byte)0x2D, (byte)0x9C,
						(byte)0x58, (byte)0xBC, (byte)0x04, (byte)0x11, (byte)0x95, (byte)0x33, (byte)0x64, (byte)0x85},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xD9, (byte)0xFD, (byte)0x62, (byte)0xC9, (byte)0xDD, (byte)0x4E, (byte)0x6D, (byte)0xE7,
						(byte)0x74, (byte)0x1E, (byte)0x9A, (byte)0x17, (byte)0xFB, (byte)0x1F, (byte)0xF2, (byte)0xC5,
						(byte)0xDB, (byte)0x94, (byte)0x8B, (byte)0xCB}
		);
		//53. JCB(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0x12,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0xAD, (byte)0xF0, (byte)0x5C, (byte)0xD4, (byte)0xC5, (byte)0xB4, (byte)0x90, (byte)0xB0,
						(byte)0x87, (byte)0xC3, (byte)0x46, (byte)0x7B, (byte)0x0F, (byte)0x30, (byte)0x43, (byte)0x75,
						(byte)0x04, (byte)0x38, (byte)0x84, (byte)0x84, (byte)0x61, (byte)0x28, (byte)0x8B, (byte)0xFE,
						(byte)0xFD, (byte)0x61, (byte)0x98, (byte)0xDD, (byte)0x57, (byte)0x6D, (byte)0xC3, (byte)0xAD,
						(byte)0x7A, (byte)0x7C, (byte)0xFA, (byte)0x07, (byte)0xDB, (byte)0xA1, (byte)0x28, (byte)0xC2,
						(byte)0x47, (byte)0xA8, (byte)0xEA, (byte)0xB3, (byte)0x0D, (byte)0xC3, (byte)0xA3, (byte)0x0B,
						(byte)0x02, (byte)0xFC, (byte)0xD7, (byte)0xF1, (byte)0xC8, (byte)0x16, (byte)0x79, (byte)0x65,
						(byte)0x46, (byte)0x36, (byte)0x26, (byte)0xFE, (byte)0xFF, (byte)0x8A, (byte)0xB1, (byte)0xAA,
						(byte)0x61, (byte)0xA4, (byte)0xB9, (byte)0xAE, (byte)0xF0, (byte)0x9E, (byte)0xE1, (byte)0x2B,
						(byte)0x00, (byte)0x98, (byte)0x42, (byte)0xA1, (byte)0xAB, (byte)0xA0, (byte)0x1A, (byte)0xDB,
						(byte)0x4A, (byte)0x2B, (byte)0x17, (byte)0x06, (byte)0x68, (byte)0x78, (byte)0x1E, (byte)0xC9,
						(byte)0x2B, (byte)0x60, (byte)0xF6, (byte)0x05, (byte)0xFD, (byte)0x12, (byte)0xB2, (byte)0xB2,
						(byte)0xA6, (byte)0xF1, (byte)0xFE, (byte)0x73, (byte)0x4B, (byte)0xE5, (byte)0x10, (byte)0xF6,
						(byte)0x0D, (byte)0xC5, (byte)0xD1, (byte)0x89, (byte)0xE4, (byte)0x01, (byte)0x45, (byte)0x1B,
						(byte)0x62, (byte)0xB4, (byte)0xE0, (byte)0x68, (byte)0x51, (byte)0xEC, (byte)0x20, (byte)0xEB,
						(byte)0xFF, (byte)0x45, (byte)0x22, (byte)0xAA, (byte)0xCC, (byte)0x2E, (byte)0x9C, (byte)0xDC,
						(byte)0x89, (byte)0xBC, (byte)0x5D, (byte)0x8C, (byte)0xDE, (byte)0x5D, (byte)0x63, (byte)0x3C,
						(byte)0xFD, (byte)0x77, (byte)0x22, (byte)0x0F, (byte)0xF6, (byte)0xBB, (byte)0xD4, (byte)0xA9,
						(byte)0xB4, (byte)0x41, (byte)0x47, (byte)0x3C, (byte)0xC3, (byte)0xC6, (byte)0xFE, (byte)0xFC,
						(byte)0x8D, (byte)0x13, (byte)0xE5, (byte)0x7C, (byte)0x3D, (byte)0xE9, (byte)0x7E, (byte)0x12,
						(byte)0x69, (byte)0xFA, (byte)0x19, (byte)0xF6, (byte)0x55, (byte)0x21, (byte)0x5B, (byte)0x23,
						(byte)0x56, (byte)0x3E, (byte)0xD1, (byte)0xD1, (byte)0x86, (byte)0x0D, (byte)0x86, (byte)0x81},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x87, (byte)0x4B, (byte)0x37, (byte)0x9B, (byte)0x7F, (byte)0x60, (byte)0x7D, (byte)0xC1,
						(byte)0xCA, (byte)0xF8, (byte)0x7A, (byte)0x19, (byte)0xE4, (byte)0x00, (byte)0xB6, (byte)0xA9,
						(byte)0xE2, (byte)0x51, (byte)0x63, (byte)0xE8}
		);
		//54. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0x13,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)248,
				new byte[]{(byte)0xA3, (byte)0x27, (byte)0x08, (byte)0x68, (byte)0x36, (byte)0x7E, (byte)0x6E, (byte)0x29,
						(byte)0x34, (byte)0x9F, (byte)0xC2, (byte)0x74, (byte)0x3E, (byte)0xE5, (byte)0x45, (byte)0xAC,
						(byte)0x53, (byte)0xBD, (byte)0x30, (byte)0x29, (byte)0x78, (byte)0x24, (byte)0x88, (byte)0x99,
						(byte)0x76, (byte)0x50, (byte)0x10, (byte)0x85, (byte)0x24, (byte)0xFD, (byte)0x05, (byte)0x1E,
						(byte)0x3B, (byte)0x6E, (byte)0xAC, (byte)0xA6, (byte)0xA9, (byte)0xA6, (byte)0xC1, (byte)0x44,
						(byte)0x1D, (byte)0x28, (byte)0x88, (byte)0x9A, (byte)0x5F, (byte)0x46, (byte)0x41, (byte)0x3C,
						(byte)0x8F, (byte)0x62, (byte)0xF3, (byte)0x64, (byte)0x5A, (byte)0xAE, (byte)0xB3, (byte)0x0A,
						(byte)0x15, (byte)0x21, (byte)0xEE, (byte)0xF4, (byte)0x1F, (byte)0xD4, (byte)0xF3, (byte)0x44,
						(byte)0x5B, (byte)0xFA, (byte)0x1A, (byte)0xB2, (byte)0x9F, (byte)0x9A, (byte)0xC1, (byte)0xA7,
						(byte)0x4D, (byte)0x9A, (byte)0x16, (byte)0xB9, (byte)0x32, (byte)0x93, (byte)0x29, (byte)0x6C,
						(byte)0xB0, (byte)0x91, (byte)0x62, (byte)0xB1, (byte)0x49, (byte)0xBA, (byte)0xC2, (byte)0x2F,
						(byte)0x88, (byte)0xAD, (byte)0x8F, (byte)0x32, (byte)0x2D, (byte)0x68, (byte)0x4D, (byte)0x6B,
						(byte)0x49, (byte)0xA1, (byte)0x24, (byte)0x13, (byte)0xFC, (byte)0x1B, (byte)0x6A, (byte)0xC7,
						(byte)0x0E, (byte)0xDE, (byte)0xDB, (byte)0x18, (byte)0xEC, (byte)0x15, (byte)0x85, (byte)0x51,
						(byte)0x9A, (byte)0x89, (byte)0xB5, (byte)0x0B, (byte)0x3D, (byte)0x03, (byte)0xE1, (byte)0x40,
						(byte)0x63, (byte)0xC2, (byte)0xCA, (byte)0x58, (byte)0xB7, (byte)0xC2, (byte)0xBA, (byte)0x7F,
						(byte)0xB2, (byte)0x27, (byte)0x99, (byte)0xA3, (byte)0x3B, (byte)0xCD, (byte)0xE6, (byte)0xAF,
						(byte)0xCB, (byte)0xEB, (byte)0x4A, (byte)0x7D, (byte)0x64, (byte)0x91, (byte)0x1D, (byte)0x08,
						(byte)0xD1, (byte)0x8C, (byte)0x47, (byte)0xF9, (byte)0xBD, (byte)0x14, (byte)0xA9, (byte)0xFA,
						(byte)0xD8, (byte)0x80, (byte)0x5A, (byte)0x15, (byte)0xDE, (byte)0x5A, (byte)0x38, (byte)0x94,
						(byte)0x5A, (byte)0x97, (byte)0x91, (byte)0x9B, (byte)0x7A, (byte)0xB8, (byte)0x8E, (byte)0xFA,
						(byte)0x11, (byte)0xA8, (byte)0x8C, (byte)0x0C, (byte)0xD9, (byte)0x2C, (byte)0x6E, (byte)0xE7,
						(byte)0xDC, (byte)0x35, (byte)0x2A, (byte)0xB0, (byte)0x74, (byte)0x6A, (byte)0xBF, (byte)0x13,
						(byte)0x58, (byte)0x59, (byte)0x13, (byte)0xC8, (byte)0xA4, (byte)0xE0, (byte)0x44, (byte)0x64,
						(byte)0xB7, (byte)0x79, (byte)0x09, (byte)0xC6, (byte)0xBD, (byte)0x94, (byte)0x34, (byte)0x1A,
						(byte)0x89, (byte)0x76, (byte)0xC4, (byte)0x76, (byte)0x9E, (byte)0xA6, (byte)0xC0, (byte)0xD3,
						(byte)0x0A, (byte)0x60, (byte)0xF4, (byte)0xEE, (byte)0x8F, (byte)0xA1, (byte)0x9E, (byte)0x76,
						(byte)0x7B, (byte)0x17, (byte)0x0D, (byte)0xF4, (byte)0xFA, (byte)0x80, (byte)0x31, (byte)0x2D,
						(byte)0xBA, (byte)0x61, (byte)0xDB, (byte)0x64, (byte)0x5D, (byte)0x5D, (byte)0x15, (byte)0x60,
						(byte)0x87, (byte)0x3E, (byte)0x26, (byte)0x74, (byte)0xE1, (byte)0xF6, (byte)0x20, (byte)0x08,
						(byte)0x3F, (byte)0x30, (byte)0x18, (byte)0x0B, (byte)0xD9, (byte)0x6C, (byte)0xA5, (byte)0x89},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x54, (byte)0xCF, (byte)0xAE, (byte)0x61, (byte)0x71, (byte)0x50, (byte)0xDF, (byte)0xA0,
						(byte)0x9D, (byte)0x3F, (byte)0x90, (byte)0x1C, (byte)0x91, (byte)0x23, (byte)0x52, (byte)0x45,
						(byte)0x23, (byte)0xEB, (byte)0xED, (byte)0xF3}
		);
		//55. JCB(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0x14,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xAE, (byte)0xED, (byte)0x55, (byte)0xB9, (byte)0xEE, (byte)0x00, (byte)0xE1, (byte)0xEC,
						(byte)0xEB, (byte)0x04, (byte)0x5F, (byte)0x61, (byte)0xD2, (byte)0xDA, (byte)0x9A, (byte)0x66,
						(byte)0xAB, (byte)0x63, (byte)0x7B, (byte)0x43, (byte)0xFB, (byte)0x5C, (byte)0xDB, (byte)0xDB,
						(byte)0x22, (byte)0xA2, (byte)0xFB, (byte)0xB2, (byte)0x5B, (byte)0xE0, (byte)0x61, (byte)0xE9,
						(byte)0x37, (byte)0xE3, (byte)0x82, (byte)0x44, (byte)0xEE, (byte)0x51, (byte)0x32, (byte)0xF5,
						(byte)0x30, (byte)0x14, (byte)0x4A, (byte)0x3F, (byte)0x26, (byte)0x89, (byte)0x07, (byte)0xD8,
						(byte)0xFD, (byte)0x64, (byte)0x88, (byte)0x63, (byte)0xF5, (byte)0xA9, (byte)0x6F, (byte)0xED,
						(byte)0x7E, (byte)0x42, (byte)0x08, (byte)0x9E, (byte)0x93, (byte)0x45, (byte)0x7A, (byte)0xDC,
						(byte)0x0E, (byte)0x1B, (byte)0xC8, (byte)0x9C, (byte)0x58, (byte)0xA0, (byte)0xDB, (byte)0x72,
						(byte)0x67, (byte)0x5F, (byte)0xBC, (byte)0x47, (byte)0xFE, (byte)0xE9, (byte)0xFF, (byte)0x33,
						(byte)0xC1, (byte)0x6A, (byte)0xDE, (byte)0x6D, (byte)0x34, (byte)0x19, (byte)0x36, (byte)0xB0,
						(byte)0x6B, (byte)0x6A, (byte)0x6F, (byte)0x5E, (byte)0xF6, (byte)0xF6, (byte)0x6A, (byte)0x4E,
						(byte)0xDD, (byte)0x98, (byte)0x1D, (byte)0xF7, (byte)0x5D, (byte)0xA8, (byte)0x39, (byte)0x9C,
						(byte)0x30, (byte)0x53, (byte)0xF4, (byte)0x30, (byte)0xEC, (byte)0xA3, (byte)0x42, (byte)0x43,
						(byte)0x7C, (byte)0x23, (byte)0xAF, (byte)0x42, (byte)0x3A, (byte)0x21, (byte)0x1A, (byte)0xC9,
						(byte)0xF5, (byte)0x8E, (byte)0xAF, (byte)0x09, (byte)0xB0, (byte)0xF8, (byte)0x37, (byte)0xDE,
						(byte)0x9D, (byte)0x86, (byte)0xC7, (byte)0x10, (byte)0x9D, (byte)0xB1, (byte)0x64, (byte)0x65,
						(byte)0x61, (byte)0xAA, (byte)0x5A, (byte)0xF0, (byte)0x28, (byte)0x9A, (byte)0xF5, (byte)0x51,
						(byte)0x4A, (byte)0xC6, (byte)0x4B, (byte)0xC2, (byte)0xD9, (byte)0xD3, (byte)0x6A, (byte)0x17,
						(byte)0x9B, (byte)0xB8, (byte)0xA7, (byte)0x97, (byte)0x1E, (byte)0x2B, (byte)0xFA, (byte)0x03,
						(byte)0xA9, (byte)0xE4, (byte)0xB8, (byte)0x47, (byte)0xFD, (byte)0x3D, (byte)0x63, (byte)0x52,
						(byte)0x4D, (byte)0x43, (byte)0xA0, (byte)0xE8, (byte)0x00, (byte)0x35, (byte)0x47, (byte)0xB9,
						(byte)0x4A, (byte)0x8A, (byte)0x75, (byte)0xE5, (byte)0x19, (byte)0xDF, (byte)0x31, (byte)0x77,
						(byte)0xD0, (byte)0xA6, (byte)0x0B, (byte)0xC0, (byte)0xB4, (byte)0xBA, (byte)0xB1, (byte)0xEA,
						(byte)0x59, (byte)0xA2, (byte)0xCB, (byte)0xB4, (byte)0xD2, (byte)0xD6, (byte)0x23, (byte)0x54,
						(byte)0xE9, (byte)0x26, (byte)0xE9, (byte)0xC7, (byte)0xD3, (byte)0xBE, (byte)0x41, (byte)0x81,
						(byte)0xE8, (byte)0x1B, (byte)0xA6, (byte)0x0F, (byte)0x82, (byte)0x85, (byte)0xA8, (byte)0x96,
						(byte)0xD1, (byte)0x7D, (byte)0xA8, (byte)0xC3, (byte)0x24, (byte)0x24, (byte)0x81, (byte)0xB6,
						(byte)0xC4, (byte)0x05, (byte)0x76, (byte)0x9A, (byte)0x39, (byte)0xD5, (byte)0x47, (byte)0xC7,
						(byte)0x4E, (byte)0xD9, (byte)0xFF, (byte)0x95, (byte)0xA7, (byte)0x0A, (byte)0x79, (byte)0x60,
						(byte)0x46, (byte)0xB5, (byte)0xEF, (byte)0xF3, (byte)0x66, (byte)0x82, (byte)0xDC, (byte)0x29},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC0, (byte)0xD1, (byte)0x5F, (byte)0x6C, (byte)0xD9, (byte)0x57, (byte)0xE4, (byte)0x91,
						(byte)0xDB, (byte)0x56, (byte)0xDC, (byte)0xDD, (byte)0x1C, (byte)0xA8, (byte)0x7A, (byte)0x03,
						(byte)0xEB, (byte)0xE0, (byte)0x6B, (byte)0x7B}
		);
		//56. JCB(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0x0F,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0x9E, (byte)0xFB, (byte)0xAD, (byte)0xDE, (byte)0x40, (byte)0x71, (byte)0xD4, (byte)0xEF,
						(byte)0x98, (byte)0xC9, (byte)0x69, (byte)0xEB, (byte)0x32, (byte)0xAF, (byte)0x85, (byte)0x48,
						(byte)0x64, (byte)0x60, (byte)0x2E, (byte)0x51, (byte)0x5D, (byte)0x65, (byte)0x01, (byte)0xFD,
						(byte)0xE5, (byte)0x76, (byte)0xB3, (byte)0x10, (byte)0x96, (byte)0x4A, (byte)0x4F, (byte)0x7C,
						(byte)0x2C, (byte)0xE8, (byte)0x42, (byte)0xAB, (byte)0xEF, (byte)0xAF, (byte)0xC5, (byte)0xDC,
						(byte)0x9E, (byte)0x26, (byte)0xA6, (byte)0x19, (byte)0xBC, (byte)0xF2, (byte)0x61, (byte)0x4F,
						(byte)0xE0, (byte)0x73, (byte)0x75, (byte)0xB9, (byte)0x24, (byte)0x9B, (byte)0xEF, (byte)0xA0,
						(byte)0x9C, (byte)0xFE, (byte)0xE7, (byte)0x02, (byte)0x32, (byte)0xE7, (byte)0x5F, (byte)0xFD,
						(byte)0x64, (byte)0x75, (byte)0x71, (byte)0x28, (byte)0x0C, (byte)0x76, (byte)0xFF, (byte)0xCA,
						(byte)0x87, (byte)0x51, (byte)0x1A, (byte)0xD2, (byte)0x55, (byte)0xB9, (byte)0x8A, (byte)0x6B,
						(byte)0x57, (byte)0x75, (byte)0x91, (byte)0xAF, (byte)0x01, (byte)0xD0, (byte)0x03, (byte)0xBD,
						(byte)0x6B, (byte)0xF7, (byte)0xE1, (byte)0xFC, (byte)0xE4, (byte)0xDF, (byte)0xD2, (byte)0x0D,
						(byte)0x0D, (byte)0x02, (byte)0x97, (byte)0xED, (byte)0x5E, (byte)0xCA, (byte)0x25, (byte)0xDE,
						(byte)0x26, (byte)0x1F, (byte)0x37, (byte)0xEF, (byte)0xE9, (byte)0xE1, (byte)0x75, (byte)0xFB,
						(byte)0x5F, (byte)0x12, (byte)0xD2, (byte)0x50, (byte)0x3D, (byte)0x8C, (byte)0xFB, (byte)0x06,
						(byte)0x0A, (byte)0x63, (byte)0x13, (byte)0x85, (byte)0x11, (byte)0xFE, (byte)0x0E, (byte)0x12,
						(byte)0x5C, (byte)0xF3, (byte)0xA6, (byte)0x43, (byte)0xAF, (byte)0xD7, (byte)0xD6, (byte)0x6D,
						(byte)0xCF, (byte)0x96, (byte)0x82, (byte)0xBD, (byte)0x24, (byte)0x6D, (byte)0xDE, (byte)0xA1},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x2A, (byte)0x1B, (byte)0x82, (byte)0xDE, (byte)0x00, (byte)0xF5, (byte)0xF0, (byte)0xC4,
						(byte)0x01, (byte)0x76, (byte)0x0A, (byte)0xDF, (byte)0x52, (byte)0x82, (byte)0x28, (byte)0xD3,
						(byte)0xED, (byte)0xE0, (byte)0xF4, (byte)0x03}
		);
		//57. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0xDA,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)128,
				new byte[]{(byte)0xDC, (byte)0x74, (byte)0x49, (byte)0xEC, (byte)0x24, (byte)0x94, (byte)0x4E, (byte)0xA4,
						(byte)0xC0, (byte)0x9E, (byte)0xF3, (byte)0x76, (byte)0x56, (byte)0xF5, (byte)0x39, (byte)0x05,
						(byte)0x94, (byte)0xDE, (byte)0x4F, (byte)0x16, (byte)0x86, (byte)0xAF, (byte)0xC4, (byte)0xB1,
						(byte)0xC2, (byte)0x1C, (byte)0x89, (byte)0x3F, (byte)0x5F, (byte)0x3A, (byte)0xEF, (byte)0xC5,
						(byte)0xA8, (byte)0x10, (byte)0x9E, (byte)0x06, (byte)0xA5, (byte)0x23, (byte)0x89, (byte)0xC0,
						(byte)0x41, (byte)0x4E, (byte)0x7D, (byte)0xFB, (byte)0xC4, (byte)0x42, (byte)0x93, (byte)0xB0,
						(byte)0x4D, (byte)0x5F, (byte)0x4E, (byte)0x85, (byte)0x52, (byte)0x8F, (byte)0xA8, (byte)0x5F,
						(byte)0x1A, (byte)0x97, (byte)0x06, (byte)0xBA, (byte)0xAA, (byte)0xA0, (byte)0x34, (byte)0xE8,
						(byte)0xB4, (byte)0x41, (byte)0x11, (byte)0xC0, (byte)0x43, (byte)0xB1, (byte)0xCC, (byte)0x95,
						(byte)0x30, (byte)0x9C, (byte)0x69, (byte)0x46, (byte)0x22, (byte)0x59, (byte)0x71, (byte)0xD4,
						(byte)0xB1, (byte)0x58, (byte)0x90, (byte)0x9F, (byte)0x44, (byte)0x38, (byte)0x72, (byte)0x68,
						(byte)0x12, (byte)0x77, (byte)0x7F, (byte)0xAC, (byte)0x4D, (byte)0x06, (byte)0x87, (byte)0x9A,
						(byte)0x7A, (byte)0xA4, (byte)0x10, (byte)0x89, (byte)0xF0, (byte)0xDD, (byte)0x2C, (byte)0x27,
						(byte)0xB3, (byte)0xEA, (byte)0xA2, (byte)0x3A, (byte)0x8D, (byte)0x02, (byte)0xE2, (byte)0xA9,
						(byte)0xA9, (byte)0xB8, (byte)0xED, (byte)0xAD, (byte)0x0C, (byte)0xA3, (byte)0x2A, (byte)0xE9,
						(byte)0x1B, (byte)0x38, (byte)0x37, (byte)0x40, (byte)0xCF, (byte)0x50, (byte)0xE5, (byte)0xE5},
				(byte)0x01,
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC0, (byte)0xD1, (byte)0x5F, (byte)0x6C, (byte)0xD9, (byte)0x57, (byte)0xE4, (byte)0x91,
						(byte)0xDB, (byte)0x56, (byte)0xDC, (byte)0xDD, (byte)0x1C, (byte)0xA8, (byte)0x7A, (byte)0x03,
						(byte)0xEB, (byte)0xE0, (byte)0x6B, (byte)0x7B}
		);
		//58. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0xEA,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)144,
				new byte[]{(byte)0xA9, (byte)0x79, (byte)0x6C, (byte)0x29, (byte)0xE3, (byte)0x9C, (byte)0x2D, (byte)0x44,
						(byte)0xFD, (byte)0xDA, (byte)0xE7, (byte)0xEE, (byte)0x13, (byte)0x41, (byte)0xDA, (byte)0x54,
						(byte)0x61, (byte)0xDC, (byte)0xE4, (byte)0xDC, (byte)0xB3, (byte)0x14, (byte)0x38, (byte)0xD5,
						(byte)0x83, (byte)0xB2, (byte)0xBC, (byte)0x08, (byte)0x45, (byte)0xB6, (byte)0x4A, (byte)0xA3,
						(byte)0x7D, (byte)0x05, (byte)0x5B, (byte)0x19, (byte)0x0D, (byte)0x7F, (byte)0x51, (byte)0x52,
						(byte)0xE5, (byte)0x05, (byte)0x7A, (byte)0x5F, (byte)0xB9, (byte)0xCD, (byte)0x27, (byte)0x63,
						(byte)0x4E, (byte)0xAC, (byte)0x40, (byte)0x03, (byte)0xA2, (byte)0x80, (byte)0x3C, (byte)0x80,
						(byte)0x4E, (byte)0x22, (byte)0xD4, (byte)0x92, (byte)0x73, (byte)0x8A, (byte)0x16, (byte)0x43,
						(byte)0x69, (byte)0xA1, (byte)0x7F, (byte)0x26, (byte)0x5F, (byte)0x80, (byte)0x16, (byte)0xC6,
						(byte)0x22, (byte)0xDA, (byte)0x06, (byte)0x31, (byte)0x49, (byte)0x4F, (byte)0x03, (byte)0xB2,
						(byte)0xDA, (byte)0x4D, (byte)0x5E, (byte)0x7D, (byte)0x13, (byte)0xF7, (byte)0x08, (byte)0x2F,
						(byte)0x9B, (byte)0xD8, (byte)0xA7, (byte)0x39, (byte)0x3B, (byte)0x11, (byte)0x9A, (byte)0xC7,
						(byte)0x0A, (byte)0x39, (byte)0xE8, (byte)0x61, (byte)0xB6, (byte)0x45, (byte)0xB1, (byte)0xFB,
						(byte)0xF2, (byte)0x9B, (byte)0xA9, (byte)0xCC, (byte)0x1B, (byte)0x8A, (byte)0x5A, (byte)0x97,
						(byte)0xB5, (byte)0xA8, (byte)0x44, (byte)0x4D, (byte)0xB0, (byte)0xFC, (byte)0xA5, (byte)0xBC,
						(byte)0x51, (byte)0x1E, (byte)0x68, (byte)0xE7, (byte)0xB0, (byte)0x1D, (byte)0x7A, (byte)0xDC,
						(byte)0xB8, (byte)0xE4, (byte)0x6D, (byte)0x96, (byte)0x48, (byte)0xA9, (byte)0x95, (byte)0xE2,
						(byte)0x56, (byte)0xF7, (byte)0x71, (byte)0x52, (byte)0x51, (byte)0xB4, (byte)0x31, (byte)0xB3},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC0, (byte)0xD1, (byte)0x5F, (byte)0x6C, (byte)0xD9, (byte)0x57, (byte)0xE4, (byte)0x91,
						(byte)0xDB, (byte)0x56, (byte)0xDC, (byte)0xDD, (byte)0x1C, (byte)0xA8, (byte)0x7A, (byte)0x03,
						(byte)0xEB, (byte)0xE0, (byte)0x6B, (byte)0x7B}
		);
		//59. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0xEB,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)176,
				new byte[]{(byte)0xA9, (byte)0xA6, (byte)0x96, (byte)0xA7, (byte)0xE3, (byte)0xC6, (byte)0xAC, (byte)0x14,
						(byte)0x21, (byte)0xE4, (byte)0xDE, (byte)0x89, (byte)0x36, (byte)0xEF, (byte)0xB6, (byte)0xD6,
						(byte)0x6C, (byte)0xE9, (byte)0x60, (byte)0xEA, (byte)0xFA, (byte)0x6E, (byte)0xA5, (byte)0xE0,
						(byte)0x3D, (byte)0x06, (byte)0x6F, (byte)0x29, (byte)0x62, (byte)0x84, (byte)0xA6, (byte)0x1D,
						(byte)0xA2, (byte)0x89, (byte)0x0A, (byte)0x6D, (byte)0x0D, (byte)0x86, (byte)0x9B, (byte)0xA8,
						(byte)0xC9, (byte)0xA9, (byte)0xE0, (byte)0x1E, (byte)0x4E, (byte)0xFF, (byte)0x3B, (byte)0xBE,
						(byte)0x33, (byte)0x1E, (byte)0xCE, (byte)0x2C, (byte)0xE1, (byte)0x42, (byte)0x9C, (byte)0x06,
						(byte)0x6D, (byte)0xD8, (byte)0x85, (byte)0x78, (byte)0x1E, (byte)0x2A, (byte)0xDA, (byte)0xBC,
						(byte)0x86, (byte)0xCF, (byte)0xFD, (byte)0x76, (byte)0x85, (byte)0x4F, (byte)0xB9, (byte)0xF1,
						(byte)0xBC, (byte)0xDA, (byte)0xED, (byte)0xCE, (byte)0x6B, (byte)0x54, (byte)0x72, (byte)0x7D,
						(byte)0x9C, (byte)0x2C, (byte)0x01, (byte)0xC9, (byte)0x64, (byte)0x2E, (byte)0x9C, (byte)0xD1,
						(byte)0xBF, (byte)0xC4, (byte)0xCF, (byte)0x24, (byte)0xA6, (byte)0xA2, (byte)0xE4, (byte)0x9C,
						(byte)0x15, (byte)0x41, (byte)0xB0, (byte)0x2E, (byte)0xBC, (byte)0x05, (byte)0x34, (byte)0x74,
						(byte)0x44, (byte)0x81, (byte)0xCC, (byte)0x89, (byte)0x22, (byte)0x07, (byte)0x3A, (byte)0x21,
						(byte)0xF8, (byte)0xE0, (byte)0xD7, (byte)0x2B, (byte)0xC8, (byte)0x99, (byte)0x8B, (byte)0xD5,
						(byte)0x29, (byte)0xC6, (byte)0x98, (byte)0x56, (byte)0x7A, (byte)0x87, (byte)0xF1, (byte)0x64,
						(byte)0x50, (byte)0xDF, (byte)0xB9, (byte)0x69, (byte)0x96, (byte)0x1A, (byte)0x41, (byte)0x86,
						(byte)0xAB, (byte)0x4C, (byte)0xC6, (byte)0x48, (byte)0xA4, (byte)0xD4, (byte)0x1B, (byte)0x14,
						(byte)0x9E, (byte)0x3D, (byte)0xD2, (byte)0x13, (byte)0x93, (byte)0xA9, (byte)0x93, (byte)0x83,
						(byte)0x3D, (byte)0x5E, (byte)0xEE, (byte)0xEB, (byte)0xFC, (byte)0xBC, (byte)0xE0, (byte)0xC7,
						(byte)0x77, (byte)0xB5, (byte)0x24, (byte)0x47, (byte)0xED, (byte)0x3B, (byte)0x81, (byte)0x6E,
						(byte)0x3A, (byte)0x29, (byte)0x84, (byte)0x93, (byte)0x0C, (byte)0x07, (byte)0xC0, (byte)0x21},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC0, (byte)0xD1, (byte)0x5F, (byte)0x6C, (byte)0xD9, (byte)0x57, (byte)0xE4, (byte)0x91,
						(byte)0xDB, (byte)0x56, (byte)0xDC, (byte)0xDD, (byte)0x1C, (byte)0xA8, (byte)0x7A, (byte)0x03,
						(byte)0xEB, (byte)0xE0, (byte)0x6B, (byte)0x7B}
		);
		//60. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x65},
				(byte)0xEC,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)248,
				new byte[]{(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0xA9, (byte)0xED, (byte)0xFD, (byte)0xC5, (byte)0x80, (byte)0x29, (byte)0xA7, (byte)0xEC,
						(byte)0x00, (byte)0x3D, (byte)0x13, (byte)0xF2, (byte)0x2F, (byte)0x6A, (byte)0xED, (byte)0x56,
						(byte)0x22, (byte)0x78, (byte)0x6D, (byte)0x45, (byte)0xF7, (byte)0xC3, (byte)0x65, (byte)0x16,
						(byte)0xA3, (byte)0xDB, (byte)0xFE, (byte)0x4D, (byte)0x75, (byte)0xBF, (byte)0xCE, (byte)0x00,
						(byte)0xF4, (byte)0xCF, (byte)0x65, (byte)0x66, (byte)0x70, (byte)0xCD, (byte)0x07, (byte)0xA6,
						(byte)0x6A, (byte)0x99, (byte)0xA7, (byte)0xCD, (byte)0x35, (byte)0xD2, (byte)0xF5, (byte)0x22,
						(byte)0x8C, (byte)0xB2, (byte)0xD7, (byte)0x94, (byte)0xB9, (byte)0x5C, (byte)0x49, (byte)0x30,
						(byte)0xFD, (byte)0xDA, (byte)0xD1, (byte)0x7F, (byte)0x8C, (byte)0x92, (byte)0x93, (byte)0x16,
						(byte)0x4A, (byte)0xFE, (byte)0xC8, (byte)0x76, (byte)0xD5, (byte)0x64, (byte)0x4D, (byte)0xD3,
						(byte)0x1A, (byte)0xBF, (byte)0xE8, (byte)0x6B, (byte)0x7A, (byte)0xA5, (byte)0x12, (byte)0xC5,
						(byte)0x8D, (byte)0x5C, (byte)0x71, (byte)0x31, (byte)0x0F, (byte)0xB3, (byte)0x6E, (byte)0x8D,
						(byte)0x7C, (byte)0xCF, (byte)0xF4, (byte)0xC9, (byte)0x58, (byte)0x66, (byte)0x9C, (byte)0x00,
						(byte)0x42, (byte)0xDF, (byte)0xF0, (byte)0x48, (byte)0xF5, (byte)0x2E, (byte)0x41, (byte)0x2B,
						(byte)0x53, (byte)0x0C, (byte)0x3B, (byte)0xB7, (byte)0x75, (byte)0x55, (byte)0xB6, (byte)0xF9,
						(byte)0xB3, (byte)0x5E, (byte)0x2C, (byte)0x0F, (byte)0x1B, (byte)0x17, (byte)0xA6, (byte)0x18,
						(byte)0x0D, (byte)0x03, (byte)0xD9, (byte)0x49, (byte)0x14, (byte)0xB4, (byte)0x97, (byte)0x0A,
						(byte)0x42, (byte)0x30, (byte)0x9F, (byte)0x25, (byte)0x9D, (byte)0xB3, (byte)0x7E, (byte)0xC7,
						(byte)0x7F, (byte)0xF6, (byte)0xBA, (byte)0x04, (byte)0xBA, (byte)0xCF, (byte)0x6B, (byte)0x17,
						(byte)0xFF, (byte)0x7B, (byte)0x10, (byte)0xC1, (byte)0xA0, (byte)0x42, (byte)0x72, (byte)0xD0,
						(byte)0x8C, (byte)0x04, (byte)0x3A, (byte)0x1C, (byte)0x8E, (byte)0x89, (byte)0x51, (byte)0x68,
						(byte)0x1D, (byte)0xE4, (byte)0x1B, (byte)0xE3, (byte)0x0F, (byte)0x4E, (byte)0x42, (byte)0xD3,
						(byte)0xED, (byte)0x3F, (byte)0xE3, (byte)0x32, (byte)0x8B, (byte)0xD4, (byte)0xC6, (byte)0x32,
						(byte)0x7B, (byte)0x19, (byte)0xD1, (byte)0x10, (byte)0xA2, (byte)0xE8, (byte)0x5D, (byte)0x9D,
						(byte)0xC4, (byte)0xC3, (byte)0x42, (byte)0x25, (byte)0xA2, (byte)0xF0, (byte)0xCA, (byte)0x76,
						(byte)0x84, (byte)0xFF, (byte)0x5C, (byte)0x05, (byte)0xC1, (byte)0xF0, (byte)0x11, (byte)0x35,
						(byte)0xFC, (byte)0x51, (byte)0xD7, (byte)0x33, (byte)0x1E, (byte)0x3A, (byte)0x41, (byte)0x3A,
						(byte)0xED, (byte)0x09, (byte)0x42, (byte)0xC8, (byte)0xBB, (byte)0xDB, (byte)0x97, (byte)0x51,
						(byte)0x04, (byte)0xE1, (byte)0x71, (byte)0xB0, (byte)0x8E, (byte)0xE7, (byte)0xC2, (byte)0xB3,
						(byte)0x88, (byte)0xEC, (byte)0x4E, (byte)0xA4, (byte)0x93, (byte)0xBE, (byte)0x5F, (byte)0xCB,
						(byte)0x0C, (byte)0x41, (byte)0x6D, (byte)0xF2, (byte)0xA9, (byte)0xDB, (byte)0xBC, (byte)0xDF,
						(byte)0xA5, (byte)0xD1, (byte)0x23, (byte)0x44, (byte)0xEC, (byte)0x30, (byte)0x57, (byte)0x6B},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC0, (byte)0xD1, (byte)0x5F, (byte)0x6C, (byte)0xD9, (byte)0x57, (byte)0xE4, (byte)0x91,
						(byte)0xDB, (byte)0x56, (byte)0xDC, (byte)0xDD, (byte)0x1C, (byte)0xA8, (byte)0x7A, (byte)0x03,
						(byte)0xEB, (byte)0xE0, (byte)0x6B, (byte)0x7B}
		);
		//61. AMEX(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},
				(byte)0x03,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,
				new byte[]{(byte)0xB0, (byte)0xC2, (byte)0xC6, (byte)0xE2, (byte)0xA6, (byte)0x38, (byte)0x69, (byte)0x33,
						(byte)0xCD, (byte)0x17, (byte)0xC2, (byte)0x39, (byte)0x49, (byte)0x6B, (byte)0xF4, (byte)0x8C,
						(byte)0x57, (byte)0xE3, (byte)0x89, (byte)0x16, (byte)0x4F, (byte)0x2A, (byte)0x96, (byte)0xBF,
						(byte)0xF1, (byte)0x33, (byte)0x43, (byte)0x9A, (byte)0xE8, (byte)0xA7, (byte)0x7B, (byte)0x20,
						(byte)0x49, (byte)0x8B, (byte)0xD4, (byte)0xDC, (byte)0x69, (byte)0x59, (byte)0xAB, (byte)0x0C,
						(byte)0x2D, (byte)0x05, (byte)0xD0, (byte)0x72, (byte)0x3A, (byte)0xF3, (byte)0x66, (byte)0x89,
						(byte)0x01, (byte)0x93, (byte)0x7B, (byte)0x67, (byte)0x4E, (byte)0x5A, (byte)0x2F, (byte)0xA9,
						(byte)0x2D, (byte)0xDD, (byte)0x5E, (byte)0x78, (byte)0xEA, (byte)0x9D, (byte)0x75, (byte)0xD7,
						(byte)0x96, (byte)0x20, (byte)0x17, (byte)0x3C, (byte)0xC2, (byte)0x69, (byte)0xB3, (byte)0x5F,
						(byte)0x46, (byte)0x3B, (byte)0x3D, (byte)0x4A, (byte)0xAF, (byte)0xF2, (byte)0x79, (byte)0x4F,
						(byte)0x92, (byte)0xE6, (byte)0xC7, (byte)0xA3, (byte)0xFB, (byte)0x95, (byte)0x32, (byte)0x5D,
						(byte)0x8A, (byte)0xB9, (byte)0x59, (byte)0x60, (byte)0xC3, (byte)0x06, (byte)0x6B, (byte)0xE5,
						(byte)0x48, (byte)0x08, (byte)0x7B, (byte)0xCB, (byte)0x6C, (byte)0xE1, (byte)0x26, (byte)0x88,
						(byte)0x14, (byte)0x4A, (byte)0x8B, (byte)0x4A, (byte)0x66, (byte)0x22, (byte)0x8A, (byte)0xE4,
						(byte)0x65, (byte)0x9C, (byte)0x63, (byte)0x4C, (byte)0x99, (byte)0xE3, (byte)0x60, (byte)0x11,
						(byte)0x58, (byte)0x4C, (byte)0x09, (byte)0x50, (byte)0x82, (byte)0xA3, (byte)0xA3, (byte)0xE3},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x87, (byte)0x08, (byte)0xA3, (byte)0xE3, (byte)0xBB, (byte)0xC1, (byte)0xBB, (byte)0x0B,
						(byte)0xE7, (byte)0x3E, (byte)0xBD, (byte)0x8D, (byte)0x19, (byte)0xD4, (byte)0xE5, (byte)0xD2,
						(byte)0x01, (byte)0x66, (byte)0xBF, (byte)0x6C}
		);
		//62. AMEX(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},
				(byte)0x04,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x60,
				new byte[]{(byte)0xD0, (byte)0xF5, (byte)0x43, (byte)0xF0, (byte)0x3F, (byte)0x25, (byte)0x17, (byte)0x13,
						(byte)0x3E, (byte)0xF2, (byte)0xBA, (byte)0x4A, (byte)0x11, (byte)0x04, (byte)0x48, (byte)0x67,
						(byte)0x58, (byte)0x63, (byte)0x0D, (byte)0xCF, (byte)0xE3, (byte)0xA8, (byte)0x83, (byte)0xC7,
						(byte)0x7B, (byte)0x4E, (byte)0x48, (byte)0x44, (byte)0xE3, (byte)0x9A, (byte)0x9B, (byte)0xD6,
						(byte)0x36, (byte)0x0D, (byte)0x23, (byte)0xE6, (byte)0x64, (byte)0x4E, (byte)0x1E, (byte)0x07,
						(byte)0x1F, (byte)0x19, (byte)0x6D, (byte)0xDF, (byte)0x2E, (byte)0x4A, (byte)0x68, (byte)0xB4,
						(byte)0xA3, (byte)0xD9, (byte)0x3D, (byte)0x14, (byte)0x26, (byte)0x8D, (byte)0x72, (byte)0x40,
						(byte)0xF6, (byte)0xA1, (byte)0x4F, (byte)0x0D, (byte)0x71, (byte)0x4C, (byte)0x17, (byte)0x82,
						(byte)0x7D, (byte)0x27, (byte)0x9D, (byte)0x19, (byte)0x2E, (byte)0x88, (byte)0x93, (byte)0x1A,
						(byte)0xF7, (byte)0x30, (byte)0x07, (byte)0x27, (byte)0xAE, (byte)0x9D, (byte)0xA8, (byte)0x0A,
						(byte)0x3F, (byte)0x0E, (byte)0x36, (byte)0x6A, (byte)0xEB, (byte)0xA6, (byte)0x17, (byte)0x78,
						(byte)0x17, (byte)0x17, (byte)0x37, (byte)0x98, (byte)0x9E, (byte)0x1E, (byte)0xE3, (byte)0x09},
				(byte)0x01,
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xFD, (byte)0xD7, (byte)0x13, (byte)0x9E, (byte)0xC7, (byte)0xE0, (byte)0xC3, (byte)0x31,
						(byte)0x67, (byte)0xFD, (byte)0x61, (byte)0xAD, (byte)0x3C, (byte)0xAD, (byte)0xBD, (byte)0x68,
						(byte)0xD6, (byte)0x6E, (byte)0x91, (byte)0xC5}
		);
		//63. AMEX(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},
				(byte)0x0E,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xAA, (byte)0x94, (byte)0xA8, (byte)0xC6, (byte)0xDA, (byte)0xD2, (byte)0x4F, (byte)0x9B,
						(byte)0xA5, (byte)0x6A, (byte)0x27, (byte)0xC0, (byte)0x9B, (byte)0x01, (byte)0x02, (byte)0x08,
						(byte)0x19, (byte)0x56, (byte)0x8B, (byte)0x81, (byte)0xA0, (byte)0x26, (byte)0xBE, (byte)0x9F,
						(byte)0xD0, (byte)0xA3, (byte)0x41, (byte)0x6C, (byte)0xA9, (byte)0xA7, (byte)0x11, (byte)0x66,
						(byte)0xED, (byte)0x50, (byte)0x84, (byte)0xED, (byte)0x91, (byte)0xCE, (byte)0xD4, (byte)0x7D,
						(byte)0xD4, (byte)0x57, (byte)0xDB, (byte)0x7E, (byte)0x6C, (byte)0xBC, (byte)0xD5, (byte)0x3E,
						(byte)0x56, (byte)0x0B, (byte)0xC5, (byte)0xDF, (byte)0x48, (byte)0xAB, (byte)0xC3, (byte)0x80,
						(byte)0x99, (byte)0x3B, (byte)0x6D, (byte)0x54, (byte)0x9F, (byte)0x51, (byte)0x96, (byte)0xCF,
						(byte)0xA7, (byte)0x7D, (byte)0xFB, (byte)0x20, (byte)0xA0, (byte)0x29, (byte)0x61, (byte)0x88,
						(byte)0xE9, (byte)0x69, (byte)0xA2, (byte)0x77, (byte)0x2E, (byte)0x8C, (byte)0x41, (byte)0x41,
						(byte)0x66, (byte)0x5F, (byte)0x8B, (byte)0xB2, (byte)0x51, (byte)0x6B, (byte)0xA2, (byte)0xC7,
						(byte)0xB5, (byte)0xFC, (byte)0x91, (byte)0xF8, (byte)0xDA, (byte)0x04, (byte)0xE8, (byte)0xD5,
						(byte)0x12, (byte)0xEB, (byte)0x0F, (byte)0x64, (byte)0x11, (byte)0x51, (byte)0x6F, (byte)0xB8,
						(byte)0x6F, (byte)0xC0, (byte)0x21, (byte)0xCE, (byte)0x7E, (byte)0x96, (byte)0x9D, (byte)0xA9,
						(byte)0x4D, (byte)0x33, (byte)0x93, (byte)0x79, (byte)0x09, (byte)0xA5, (byte)0x3A, (byte)0x57,
						(byte)0xF9, (byte)0x07, (byte)0xC4, (byte)0x0C, (byte)0x22, (byte)0x00, (byte)0x9D, (byte)0xA7,
						(byte)0x53, (byte)0x2C, (byte)0xB3, (byte)0xBE, (byte)0x50, (byte)0x9A, (byte)0xE1, (byte)0x73,
						(byte)0xB3, (byte)0x9A, (byte)0xD6, (byte)0xA0, (byte)0x1B, (byte)0xA5, (byte)0xBB, (byte)0x85},
				(byte)0x01,
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xA7, (byte)0x26, (byte)0x6A, (byte)0xBA, (byte)0xE6, (byte)0x4B, (byte)0x42, (byte)0xA3,
						(byte)0x66, (byte)0x88, (byte)0x51, (byte)0x19, (byte)0x1D, (byte)0x49, (byte)0x85, (byte)0x6E,
						(byte)0x17, (byte)0xF8, (byte)0xFB, (byte)0xCD}
		);
		//64. AMEX(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},
				(byte)0x0F,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0xC8, (byte)0xD5, (byte)0xAC, (byte)0x27, (byte)0xA5, (byte)0xE1, (byte)0xFB, (byte)0x89,
						(byte)0x97, (byte)0x8C, (byte)0x7C, (byte)0x64, (byte)0x79, (byte)0xAF, (byte)0x99, (byte)0x3A,
						(byte)0xB3, (byte)0x80, (byte)0x0E, (byte)0xB2, (byte)0x43, (byte)0x99, (byte)0x6F, (byte)0xBB,
						(byte)0x2A, (byte)0xE2, (byte)0x6B, (byte)0x67, (byte)0xB2, (byte)0x3A, (byte)0xC4, (byte)0x82,
						(byte)0xC4, (byte)0xB7, (byte)0x46, (byte)0x00, (byte)0x5A, (byte)0x51, (byte)0xAF, (byte)0xA7,
						(byte)0xD2, (byte)0xD8, (byte)0x3E, (byte)0x89, (byte)0x4F, (byte)0x59, (byte)0x1A, (byte)0x23,
						(byte)0x57, (byte)0xB3, (byte)0x0F, (byte)0x85, (byte)0xB8, (byte)0x56, (byte)0x27, (byte)0xFF,
						(byte)0x15, (byte)0xDA, (byte)0x12, (byte)0x29, (byte)0x0F, (byte)0x70, (byte)0xF0, (byte)0x57,
						(byte)0x66, (byte)0x55, (byte)0x2B, (byte)0xA1, (byte)0x1A, (byte)0xD3, (byte)0x4B, (byte)0x71,
						(byte)0x09, (byte)0xFA, (byte)0x49, (byte)0xDE, (byte)0x29, (byte)0xDC, (byte)0xB0, (byte)0x10,
						(byte)0x96, (byte)0x70, (byte)0x87, (byte)0x5A, (byte)0x17, (byte)0xEA, (byte)0x95, (byte)0x54,
						(byte)0x9E, (byte)0x92, (byte)0x34, (byte)0x7B, (byte)0x94, (byte)0x8A, (byte)0xA1, (byte)0xF0,
						(byte)0x45, (byte)0x75, (byte)0x6D, (byte)0xE5, (byte)0x6B, (byte)0x70, (byte)0x7E, (byte)0x38,
						(byte)0x63, (byte)0xE5, (byte)0x9A, (byte)0x6C, (byte)0xBE, (byte)0x99, (byte)0xC1, (byte)0x27,
						(byte)0x2E, (byte)0xF6, (byte)0x5F, (byte)0xB6, (byte)0x6C, (byte)0xBB, (byte)0x4C, (byte)0xFF,
						(byte)0x07, (byte)0x0F, (byte)0x36, (byte)0x02, (byte)0x9D, (byte)0xD7, (byte)0x62, (byte)0x18,
						(byte)0xB2, (byte)0x12, (byte)0x42, (byte)0x64, (byte)0x5B, (byte)0x51, (byte)0xCA, (byte)0x75,
						(byte)0x2A, (byte)0xF3, (byte)0x7E, (byte)0x70, (byte)0xBE, (byte)0x1A, (byte)0x84, (byte)0xFF,
						(byte)0x31, (byte)0x07, (byte)0x9D, (byte)0xC0, (byte)0x04, (byte)0x8E, (byte)0x92, (byte)0x88,
						(byte)0x83, (byte)0xEC, (byte)0x4F, (byte)0xAD, (byte)0xD4, (byte)0x97, (byte)0xA7, (byte)0x19,
						(byte)0x38, (byte)0x5C, (byte)0x2B, (byte)0xBB, (byte)0xEB, (byte)0xC5, (byte)0xA6, (byte)0x6A,
						(byte)0xA5, (byte)0xE5, (byte)0x65, (byte)0x5D, (byte)0x18, (byte)0x03, (byte)0x4E, (byte)0xC5},
				(byte)0x01,
				new byte[]{(byte)0x03, (byte)0x00, (byte)0x00},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xA7, (byte)0x34, (byte)0x72, (byte)0xB3, (byte)0xAB, (byte)0x55, (byte)0x74, (byte)0x93,
						(byte)0xA9, (byte)0xBC, (byte)0x21, (byte)0x79, (byte)0xCC, (byte)0x80, (byte)0x14, (byte)0x05,
						(byte)0x3B, (byte)0x12, (byte)0xBA, (byte)0xB4}
		);
		//65. AMEX(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},
				(byte)0x10,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xCF, (byte)0x98, (byte)0xDF, (byte)0xED, (byte)0xB3, (byte)0xD3, (byte)0x72, (byte)0x79,
						(byte)0x65, (byte)0xEE, (byte)0x77, (byte)0x97, (byte)0x72, (byte)0x33, (byte)0x55, (byte)0xE0,
						(byte)0x75, (byte)0x1C, (byte)0x81, (byte)0xD2, (byte)0xD3, (byte)0xDF, (byte)0x4D, (byte)0x18,
						(byte)0xEB, (byte)0xAB, (byte)0x9F, (byte)0xB9, (byte)0xD4, (byte)0x9F, (byte)0x38, (byte)0xC8,
						(byte)0xC4, (byte)0xA8, (byte)0x26, (byte)0xB9, (byte)0x9D, (byte)0xC9, (byte)0xDE, (byte)0xA3,
						(byte)0xF0, (byte)0x10, (byte)0x43, (byte)0xD4, (byte)0xBF, (byte)0x22, (byte)0xAC, (byte)0x35,
						(byte)0x50, (byte)0xE2, (byte)0x96, (byte)0x2A, (byte)0x59, (byte)0x63, (byte)0x9B, (byte)0x13,
						(byte)0x32, (byte)0x15, (byte)0x64, (byte)0x22, (byte)0xF7, (byte)0x88, (byte)0xB9, (byte)0xC1,
						(byte)0x6D, (byte)0x40, (byte)0x13, (byte)0x5E, (byte)0xFD, (byte)0x1B, (byte)0xA9, (byte)0x41,
						(byte)0x47, (byte)0x75, (byte)0x05, (byte)0x75, (byte)0xE6, (byte)0x36, (byte)0xB6, (byte)0xEB,
						(byte)0xC6, (byte)0x18, (byte)0x73, (byte)0x4C, (byte)0x91, (byte)0xC1, (byte)0xD1, (byte)0xBF,
						(byte)0x3E, (byte)0xDC, (byte)0x2A, (byte)0x46, (byte)0xA4, (byte)0x39, (byte)0x01, (byte)0x66,
						(byte)0x8E, (byte)0x0F, (byte)0xFC, (byte)0x13, (byte)0x67, (byte)0x74, (byte)0x08, (byte)0x0E,
						(byte)0x88, (byte)0x80, (byte)0x44, (byte)0xF6, (byte)0xA1, (byte)0xE6, (byte)0x5D, (byte)0xC9,
						(byte)0xAA, (byte)0xA8, (byte)0x92, (byte)0x8D, (byte)0xAC, (byte)0xBE, (byte)0xB0, (byte)0xDB,
						(byte)0x55, (byte)0xEA, (byte)0x35, (byte)0x14, (byte)0x68, (byte)0x6C, (byte)0x6A, (byte)0x73,
						(byte)0x2C, (byte)0xEF, (byte)0x55, (byte)0xEE, (byte)0x27, (byte)0xCF, (byte)0x87, (byte)0x7F,
						(byte)0x11, (byte)0x06, (byte)0x52, (byte)0x69, (byte)0x4A, (byte)0x0E, (byte)0x34, (byte)0x84,
						(byte)0xC8, (byte)0x55, (byte)0xD8, (byte)0x82, (byte)0xAE, (byte)0x19, (byte)0x16, (byte)0x74,
						(byte)0xE2, (byte)0x5C, (byte)0x29, (byte)0x62, (byte)0x05, (byte)0xBB, (byte)0xB5, (byte)0x99,
						(byte)0x45, (byte)0x51, (byte)0x76, (byte)0xFD, (byte)0xD7, (byte)0xBB, (byte)0xC5, (byte)0x49,
						(byte)0xF2, (byte)0x7B, (byte)0xA5, (byte)0xFE, (byte)0x35, (byte)0x33, (byte)0x6F, (byte)0x7E,
						(byte)0x29, (byte)0xE6, (byte)0x8D, (byte)0x78, (byte)0x39, (byte)0x73, (byte)0x19, (byte)0x94,
						(byte)0x36, (byte)0x63, (byte)0x3C, (byte)0x67, (byte)0xEE, (byte)0x5A, (byte)0x68, (byte)0x0F,
						(byte)0x05, (byte)0x16, (byte)0x0E, (byte)0xD1, (byte)0x2D, (byte)0x16, (byte)0x65, (byte)0xEC,
						(byte)0x83, (byte)0xD1, (byte)0x99, (byte)0x7F, (byte)0x10, (byte)0xFD, (byte)0x05, (byte)0xBB,
						(byte)0xDB, (byte)0xF9, (byte)0x43, (byte)0x3E, (byte)0x8F, (byte)0x79, (byte)0x7A, (byte)0xEE,
						(byte)0x3E, (byte)0x9F, (byte)0x02, (byte)0xA3, (byte)0x42, (byte)0x28, (byte)0xAC, (byte)0xE9,
						(byte)0x27, (byte)0xAB, (byte)0xE6, (byte)0x2B, (byte)0x8B, (byte)0x92, (byte)0x81, (byte)0xAD,
						(byte)0x08, (byte)0xD3, (byte)0xDF, (byte)0x5C, (byte)0x73, (byte)0x79, (byte)0x68, (byte)0x50,
						(byte)0x45, (byte)0xD7, (byte)0xBA, (byte)0x5F, (byte)0xCD, (byte)0xE5, (byte)0x86, (byte)0x37},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xC7, (byte)0x29, (byte)0xCF, (byte)0x2F, (byte)0xD2, (byte)0x62, (byte)0x39, (byte)0x4A,
						(byte)0xBC, (byte)0x4C, (byte)0xC1, (byte)0x73, (byte)0x50, (byte)0x65, (byte)0x02, (byte)0x44,
						(byte)0x6A, (byte)0xA9, (byte)0xB9, (byte)0xFD}
		);
		//66. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},                 // RID
				(byte)0x64,/*key index*/                                          // INDEX
				(byte)0x01,
				(byte)0x01,
				(byte)128,                                          // length in bits of modulus * /
				new byte[]{(byte)0xB0, (byte)0xDD, (byte)0x55, (byte)0x10, (byte)0x47, (byte)0xDA, (byte)0xFC, (byte)0xD1,
						(byte)0x0D, (byte)0x9A, (byte)0x5E, (byte)0x33, (byte)0xCF, (byte)0x47, (byte)0xA9, (byte)0x33,
						(byte)0x3E, (byte)0x3B, (byte)0x24, (byte)0xEC, (byte)0x57, (byte)0xE8, (byte)0xF0, (byte)0x66,
						(byte)0xA7, (byte)0x2D, (byte)0xED, (byte)0x60, (byte)0xE8, (byte)0x81, (byte)0xA8, (byte)0xAD,
						(byte)0x42, (byte)0x77, (byte)0x7C, (byte)0x67, (byte)0xAD, (byte)0xDF, (byte)0x07, (byte)0x08,
						(byte)0x04, (byte)0x2A, (byte)0xB9, (byte)0x43, (byte)0x60, (byte)0x1E, (byte)0xE6, (byte)0x02,
						(byte)0x48, (byte)0x54, (byte)0x0B, (byte)0x67, (byte)0xE0, (byte)0x63, (byte)0x70, (byte)0x18,
						(byte)0xEE, (byte)0xB3, (byte)0x91, (byte)0x1A, (byte)0xE9, (byte)0xC8, (byte)0x73, (byte)0xDA,
						(byte)0xD6, (byte)0x6C, (byte)0xB4, (byte)0x0B, (byte)0xC8, (byte)0xF4, (byte)0xDC, (byte)0x77,
						(byte)0xEB, (byte)0x25, (byte)0x95, (byte)0x25, (byte)0x2B, (byte)0x61, (byte)0xC2, (byte)0x15,
						(byte)0x18, (byte)0xF7, (byte)0x9B, (byte)0x70, (byte)0x6A, (byte)0xAC, (byte)0x29, (byte)0xE7,
						(byte)0xD3, (byte)0xFD, (byte)0x4D, (byte)0x25, (byte)0x9D, (byte)0xB7, (byte)0x2B, (byte)0x6E,
						(byte)0x6D, (byte)0x44, (byte)0x6D, (byte)0xD6, (byte)0x03, (byte)0x86, (byte)0xDB, (byte)0x40,
						(byte)0xF5, (byte)0xFD, (byte)0xB0, (byte)0x76, (byte)0xD8, (byte)0x03, (byte)0x74, (byte)0xC9,
						(byte)0x93, (byte)0xB4, (byte)0xBB, (byte)0x2D, (byte)0x1D, (byte)0xB9, (byte)0x77, (byte)0xC3,
						(byte)0x87, (byte)0x08, (byte)0x97, (byte)0xF9, (byte)0xDF, (byte)0xA4, (byte)0x54, (byte)0xF5}, // 8 * 32로 맞춤
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x79, (byte)0x2B, (byte)0x12, (byte)0x1D, (byte)0x86, (byte)0xD0, (byte)0xF3, (byte)0xA9,
						(byte)0x95, (byte)0x82, (byte)0xDB, (byte)0x06, (byte)0x97, (byte)0x44, (byte)0x81, (byte)0xF3,
						(byte)0xB2, (byte)0xE1, (byte)0x84, (byte)0x54}
		);
		//67. AMEX(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},
				(byte)0x65,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xE5, (byte)0x3E, (byte)0xB4, (byte)0x1F, (byte)0x83, (byte)0x9D, (byte)0xDF, (byte)0xB4,
						(byte)0x74, (byte)0xF2, (byte)0x72, (byte)0xCD, (byte)0x0C, (byte)0xBE, (byte)0x37, (byte)0x3D,
						(byte)0x54, (byte)0x68, (byte)0xEB, (byte)0x3F, (byte)0x50, (byte)0xF3, (byte)0x9C, (byte)0x95,
						(byte)0xBD, (byte)0xF4, (byte)0xD3, (byte)0x9F, (byte)0xA8, (byte)0x2B, (byte)0x98, (byte)0xDA,
						(byte)0xBC, (byte)0x94, (byte)0x76, (byte)0xB6, (byte)0xEA, (byte)0x35, (byte)0x0C, (byte)0x0D,
						(byte)0xCE, (byte)0x1C, (byte)0xD9, (byte)0x20, (byte)0x75, (byte)0xD8, (byte)0xC4, (byte)0x4D,
						(byte)0x1E, (byte)0x57, (byte)0x28, (byte)0x31, (byte)0x90, (byte)0xF9, (byte)0x6B, (byte)0x35,
						(byte)0x37, (byte)0xD9, (byte)0xE6, (byte)0x32, (byte)0xC4, (byte)0x61, (byte)0x81, (byte)0x5E,
						(byte)0xBD, (byte)0x2B, (byte)0xAF, (byte)0x36, (byte)0x89, (byte)0x1D, (byte)0xF6, (byte)0xBF,
						(byte)0xB1, (byte)0xD3, (byte)0x0F, (byte)0xA0, (byte)0xB7, (byte)0x52, (byte)0xC4, (byte)0x3D,
						(byte)0xCA, (byte)0x02, (byte)0x57, (byte)0xD3, (byte)0x5D, (byte)0xFF, (byte)0x4C, (byte)0xCF,
						(byte)0xC9, (byte)0x8F, (byte)0x84, (byte)0x19, (byte)0x8D, (byte)0x51, (byte)0x52, (byte)0xEC,
						(byte)0x61, (byte)0xD7, (byte)0xB5, (byte)0xF7, (byte)0x4B, (byte)0xD0, (byte)0x93, (byte)0x83,
						(byte)0xBD, (byte)0x0E, (byte)0x2A, (byte)0xA4, (byte)0x22, (byte)0x98, (byte)0xFF, (byte)0xB0,
						(byte)0x2F, (byte)0x0D, (byte)0x79, (byte)0xAD, (byte)0xB7, (byte)0x0D, (byte)0x72, (byte)0x24,
						(byte)0x3E, (byte)0xE5, (byte)0x37, (byte)0xF7, (byte)0x55, (byte)0x36, (byte)0xA8, (byte)0xA8,
						(byte)0xDF, (byte)0x96, (byte)0x25, (byte)0x82, (byte)0xE9, (byte)0xE6, (byte)0x81, (byte)0x2F,
						(byte)0x3A, (byte)0x0B, (byte)0xE0, (byte)0x2A, (byte)0x43, (byte)0x65, (byte)0x40, (byte)0x0D},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x89, (byte)0x4C, (byte)0x5D, (byte)0x08, (byte)0xD4, (byte)0xEA, (byte)0x28, (byte)0xBB,
						(byte)0x79, (byte)0xDC, (byte)0x46, (byte)0xCE, (byte)0xAD, (byte)0x99, (byte)0x8B, (byte)0x87,
						(byte)0x73, (byte)0x22, (byte)0xF4, (byte)0x16}
		);
		//68. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},
				(byte)0x67,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)176,
				new byte[]{(byte)0xC6, (byte)0x87, (byte)0xAD, (byte)0xCC, (byte)0xF3, (byte)0xD5, (byte)0x7D, (byte)0x33,
						(byte)0x60, (byte)0xB1, (byte)0x74, (byte)0xE4, (byte)0x71, (byte)0xED, (byte)0xA6, (byte)0x93,
						(byte)0xAA, (byte)0x55, (byte)0x5D, (byte)0xFD, (byte)0xC6, (byte)0xC8, (byte)0xCD, (byte)0x39,
						(byte)0x4C, (byte)0x74, (byte)0xBA, (byte)0x25, (byte)0xCC, (byte)0xDF, (byte)0x8E, (byte)0xAB,
						(byte)0xFD, (byte)0x1F, (byte)0x1C, (byte)0xEA, (byte)0xDF, (byte)0xBE, (byte)0x22, (byte)0x80,
						(byte)0xC9, (byte)0xE8, (byte)0x1F, (byte)0x7A, (byte)0x05, (byte)0x89, (byte)0x98, (byte)0xDC,
						(byte)0x22, (byte)0xB7, (byte)0xF2, (byte)0x25, (byte)0x76, (byte)0xFE, (byte)0x84, (byte)0x71,
						(byte)0x3D, (byte)0x0B, (byte)0xDD, (byte)0x3D, (byte)0x34, (byte)0xCF, (byte)0xCD, (byte)0x12,
						(byte)0xFC, (byte)0xD0, (byte)0xD2, (byte)0x69, (byte)0x01, (byte)0xBA, (byte)0x74, (byte)0x10,
						(byte)0x3D, (byte)0x07, (byte)0x5C, (byte)0x66, (byte)0x4D, (byte)0xAB, (byte)0xCC, (byte)0xAF,
						(byte)0x57, (byte)0xBF, (byte)0x78, (byte)0x94, (byte)0x94, (byte)0x05, (byte)0x1C, (byte)0x5E,
						(byte)0xC3, (byte)0x03, (byte)0xA2, (byte)0xE1, (byte)0xD7, (byte)0x84, (byte)0x30, (byte)0x6D,
						(byte)0x3D, (byte)0xB3, (byte)0xEB, (byte)0x66, (byte)0x5C, (byte)0xD3, (byte)0x60, (byte)0xA5,
						(byte)0x58, (byte)0xF4, (byte)0x0B, (byte)0x7C, (byte)0x05, (byte)0xC9, (byte)0x19, (byte)0xB2,
						(byte)0xF0, (byte)0x28, (byte)0x2F, (byte)0xE1, (byte)0xED, (byte)0x9B, (byte)0xF6, (byte)0x26,
						(byte)0x1A, (byte)0xA8, (byte)0x14, (byte)0x64, (byte)0x8F, (byte)0xBC, (byte)0x26, (byte)0x3B,
						(byte)0x14, (byte)0x21, (byte)0x44, (byte)0x91, (byte)0xDE, (byte)0x42, (byte)0x6D, (byte)0x24,
						(byte)0x2D, (byte)0x65, (byte)0xCD, (byte)0x1F, (byte)0xFF, (byte)0x0F, (byte)0xBE, (byte)0x4D,
						(byte)0x4D, (byte)0xAF, (byte)0xF5, (byte)0xCF, (byte)0xAC, (byte)0xB2, (byte)0xAD, (byte)0xC7,
						(byte)0x13, (byte)0x1C, (byte)0x9B, (byte)0x14, (byte)0x7E, (byte)0xE7, (byte)0x91, (byte)0x95,
						(byte)0x65, (byte)0x51, (byte)0x07, (byte)0x62, (byte)0x70, (byte)0x69, (byte)0x6B, (byte)0x75,
						(byte)0xFD, (byte)0x97, (byte)0x37, (byte)0x3F, (byte)0x1F, (byte)0xD7, (byte)0x80, (byte)0x4F},// 8 * 32로 맞춤
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x52, (byte)0xA2, (byte)0x90, (byte)0x73, (byte)0x00, (byte)0xC8, (byte)0x44, (byte)0x5B,
						(byte)0xF5, (byte)0x4B, (byte)0x97, (byte)0x0C, (byte)0x89, (byte)0x46, (byte)0x91, (byte)0xFE,
						(byte)0xAD, (byte)0xF2, (byte)0xD2, (byte)0x8E}
		);
		//69. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x25},
				(byte)0x68,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)248,
				new byte[]{(byte)0xF4, (byte)0xD1, (byte)0x98, (byte)0xF2, (byte)0xF0, (byte)0xCF, (byte)0x14, (byte)0x0E,
						(byte)0x4D, (byte)0x2D, (byte)0x81, (byte)0xB7, (byte)0x65, (byte)0xEB, (byte)0x4E, (byte)0x24,
						(byte)0xCE, (byte)0xD4, (byte)0xC0, (byte)0x83, (byte)0x48, (byte)0x22, (byte)0x76, (byte)0x98,
						(byte)0x54, (byte)0xD0, (byte)0xE9, (byte)0x7E, (byte)0x80, (byte)0x66, (byte)0xCB, (byte)0xE4,
						(byte)0x65, (byte)0x02, (byte)0x9B, (byte)0x3F, (byte)0x41, (byte)0x0E, (byte)0x35, (byte)0x0F,
						(byte)0x62, (byte)0x96, (byte)0x38, (byte)0x1A, (byte)0x25, (byte)0x3B, (byte)0xE7, (byte)0x1A,
						(byte)0x4B, (byte)0xBA, (byte)0xBB, (byte)0xD5, (byte)0x16, (byte)0x62, (byte)0x5D, (byte)0xAE,
						(byte)0x67, (byte)0xD0, (byte)0x73, (byte)0xD0, (byte)0x01, (byte)0x13, (byte)0xAA, (byte)0xB9,
						(byte)0xEA, (byte)0x4D, (byte)0xCE, (byte)0xCA, (byte)0x29, (byte)0xF3, (byte)0xBB, (byte)0x7A,
						(byte)0x5D, (byte)0x46, (byte)0xC0, (byte)0xD8, (byte)0xB9, (byte)0x83, (byte)0xE2, (byte)0x48,
						(byte)0x2C, (byte)0x2A, (byte)0xD7, (byte)0x59, (byte)0x73, (byte)0x5A, (byte)0x5A, (byte)0xB9,
						(byte)0xAA, (byte)0xAE, (byte)0xFB, (byte)0x31, (byte)0xD3, (byte)0xE7, (byte)0x18, (byte)0xB8,
						(byte)0xCA, (byte)0x66, (byte)0xC0, (byte)0x19, (byte)0xEC, (byte)0xA0, (byte)0xA8, (byte)0xBE,
						(byte)0x31, (byte)0x2E, (byte)0x24, (byte)0x3E, (byte)0xB4, (byte)0x7A, (byte)0x62, (byte)0x30,
						(byte)0x06, (byte)0x20, (byte)0xBD, (byte)0x51, (byte)0xCF, (byte)0x16, (byte)0x9A, (byte)0x91,
						(byte)0x94, (byte)0xC1, (byte)0x7A, (byte)0x42, (byte)0xE5, (byte)0x1B, (byte)0x34, (byte)0xD8,
						(byte)0x37, (byte)0x75, (byte)0xA9, (byte)0x8E, (byte)0x80, (byte)0xB2, (byte)0xD6, (byte)0x6F,
						(byte)0x4F, (byte)0x98, (byte)0x08, (byte)0x4A, (byte)0x44, (byte)0x8F, (byte)0xE0, (byte)0x50,
						(byte)0x7E, (byte)0xA2, (byte)0x7C, (byte)0x90, (byte)0x5A, (byte)0xEE, (byte)0x72, (byte)0xB6,
						(byte)0x2A, (byte)0x8A, (byte)0x29, (byte)0x43, (byte)0x8B, (byte)0x6A, (byte)0x44, (byte)0x80,
						(byte)0xFF, (byte)0xF7, (byte)0x2F, (byte)0x93, (byte)0x28, (byte)0x04, (byte)0x32, (byte)0xA5,
						(byte)0x5F, (byte)0xDD, (byte)0x64, (byte)0x8A, (byte)0xD9, (byte)0x3D, (byte)0x82, (byte)0xB9,
						(byte)0xEC, (byte)0xF0, (byte)0x12, (byte)0x75, (byte)0xC0, (byte)0x91, (byte)0x4B, (byte)0xAD,
						(byte)0x8E, (byte)0xB3, (byte)0xAA, (byte)0xF4, (byte)0x6B, (byte)0x12, (byte)0x9F, (byte)0x87,
						(byte)0x49, (byte)0xFE, (byte)0xA4, (byte)0x25, (byte)0xA2, (byte)0xDC, (byte)0xDD, (byte)0x7E,
						(byte)0x81, (byte)0x3A, (byte)0x08, (byte)0xFC, (byte)0x0C, (byte)0xA7, (byte)0x84, (byte)0x1E,
						(byte)0xDD, (byte)0x49, (byte)0x98, (byte)0x5C, (byte)0xD8, (byte)0xBC, (byte)0x6D, (byte)0x5D,
						(byte)0x56, (byte)0xF1, (byte)0x7A, (byte)0xB9, (byte)0xC6, (byte)0x7C, (byte)0xEC, (byte)0x50,
						(byte)0xBA, (byte)0x42, (byte)0x24, (byte)0x40, (byte)0x56, (byte)0x3E, (byte)0xCC, (byte)0xE2,
						(byte)0x16, (byte)0x99, (byte)0xE4, (byte)0x35, (byte)0xC8, (byte)0x68, (byte)0x2B, (byte)0x62,
						(byte)0x66, (byte)0x39, (byte)0x36, (byte)0x72, (byte)0xC6, (byte)0x93, (byte)0xD8, (byte)0xB7},// 8 * 32로 맞춤
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x52, (byte)0xA2, (byte)0x90, (byte)0x73, (byte)0x00, (byte)0xC8, (byte)0x44, (byte)0x5B,
						(byte)0xF5, (byte)0x4B, (byte)0x97, (byte)0x0C, (byte)0x89, (byte)0x46, (byte)0x91, (byte)0xFE,
						(byte)0xAD, (byte)0xF2, (byte)0xD2, (byte)0x8E}
		);
		//70. DFS(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x01,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,
				new byte[]{(byte)0x8D, (byte)0x17, (byte)0x27, (byte)0xAB, (byte)0x9D, (byte)0xC8, (byte)0x52, (byte)0x45,
						(byte)0x31, (byte)0x93, (byte)0xEA, (byte)0x08, (byte)0x10, (byte)0xB1, (byte)0x10, (byte)0xF2,
						(byte)0xA3, (byte)0xFD, (byte)0x30, (byte)0x4B, (byte)0xE2, (byte)0x58, (byte)0x33, (byte)0x8A,
						(byte)0xC2, (byte)0x65, (byte)0x0F, (byte)0xA2, (byte)0xA0, (byte)0x40, (byte)0xFA, (byte)0x10,
						(byte)0x30, (byte)0x1E, (byte)0xA5, (byte)0x3D, (byte)0xF1, (byte)0x8F, (byte)0xD9, (byte)0xF4,
						(byte)0x0F, (byte)0x55, (byte)0xC4, (byte)0x4F, (byte)0xE0, (byte)0xEE, (byte)0x7C, (byte)0x72,
						(byte)0x23, (byte)0xBC, (byte)0x64, (byte)0x9B, (byte)0x8F, (byte)0x93, (byte)0x28, (byte)0x92,
						(byte)0x57, (byte)0x07, (byte)0x77, (byte)0x6C, (byte)0xB8, (byte)0x6F, (byte)0x3A, (byte)0xC3,
						(byte)0x7D, (byte)0x1B, (byte)0x22, (byte)0x30, (byte)0x0D, (byte)0x00, (byte)0x83, (byte)0xB4,
						(byte)0x93, (byte)0x50, (byte)0xE0, (byte)0x9A, (byte)0xBB, (byte)0x4B, (byte)0x62, (byte)0xA9,
						(byte)0x63, (byte)0x63, (byte)0xB0, (byte)0x1E, (byte)0x41, (byte)0x80, (byte)0xE1, (byte)0x58,
						(byte)0xEA, (byte)0xDD, (byte)0xD6, (byte)0x87, (byte)0x8E, (byte)0x85, (byte)0xA6, (byte)0xC9,
						(byte)0xD5, (byte)0x65, (byte)0x09, (byte)0xBF, (byte)0x68, (byte)0xF0, (byte)0x40, (byte)0x0A,
						(byte)0xFF, (byte)0xBC, (byte)0x44, (byte)0x1D, (byte)0xDC, (byte)0xCD, (byte)0xAF, (byte)0x91,
						(byte)0x63, (byte)0xC4, (byte)0xAA, (byte)0xCE, (byte)0xB2, (byte)0xC3, (byte)0xE1, (byte)0xEC,
						(byte)0x13, (byte)0x69, (byte)0x9D, (byte)0x23, (byte)0xCD, (byte)0xA9, (byte)0xD3, (byte)0xAD},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xE0, (byte)0xC2, (byte)0xC1, (byte)0xEA, (byte)0x41, (byte)0x1D, (byte)0xB2, (byte)0x4E,
						(byte)0xC3, (byte)0xE7, (byte)0x6A, (byte)0x94, (byte)0x03, (byte)0xF0, (byte)0xB7, (byte)0xB6,
						(byte)0xF4, (byte)0x06, (byte)0xF3, (byte)0x98}
		);
		//71. DFS(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x03,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xBF, (byte)0x32, (byte)0x12, (byte)0x41, (byte)0xBD, (byte)0xBF, (byte)0x35, (byte)0x85,
						(byte)0xFF, (byte)0xF2, (byte)0xAC, (byte)0xB8, (byte)0x97, (byte)0x72, (byte)0xEB, (byte)0xD1,
						(byte)0x8F, (byte)0x2C, (byte)0x87, (byte)0x21, (byte)0x59, (byte)0xEA, (byte)0xA4, (byte)0xBC,
						(byte)0x17, (byte)0x9F, (byte)0xB0, (byte)0x3A, (byte)0x1B, (byte)0x85, (byte)0x0A, (byte)0x1A,
						(byte)0x75, (byte)0x8F, (byte)0xA2, (byte)0xC6, (byte)0x84, (byte)0x9F, (byte)0x48, (byte)0xD4,
						(byte)0xC4, (byte)0xFF, (byte)0x47, (byte)0xE0, (byte)0x2A, (byte)0x57, (byte)0x5F, (byte)0xC1,
						(byte)0x3E, (byte)0x8E, (byte)0xB7, (byte)0x7A, (byte)0xC3, (byte)0x71, (byte)0x35, (byte)0x03,
						(byte)0x0C, (byte)0x56, (byte)0x00, (byte)0x36, (byte)0x9B, (byte)0x55, (byte)0x67, (byte)0xD3,
						(byte)0xA7, (byte)0xAA, (byte)0xF0, (byte)0x20, (byte)0x15, (byte)0x11, (byte)0x5E, (byte)0x98,
						(byte)0x7E, (byte)0x6B, (byte)0xE5, (byte)0x66, (byte)0xB4, (byte)0xB4, (byte)0xCC, (byte)0x03,
						(byte)0xA4, (byte)0xE2, (byte)0xB1, (byte)0x6C, (byte)0xD9, (byte)0x05, (byte)0x16, (byte)0x67,
						(byte)0xC2, (byte)0xCD, (byte)0x0E, (byte)0xEF, (byte)0x4D, (byte)0x76, (byte)0xD2, (byte)0x7A,
						(byte)0x6F, (byte)0x74, (byte)0x5E, (byte)0x8B, (byte)0xBE, (byte)0xB4, (byte)0x54, (byte)0x98,
						(byte)0xED, (byte)0x8C, (byte)0x30, (byte)0xE2, (byte)0x61, (byte)0x6D, (byte)0xB4, (byte)0xDB,
						(byte)0xDA, (byte)0x4B, (byte)0xAF, (byte)0x8D, (byte)0x71, (byte)0x99, (byte)0x0C, (byte)0xDC,
						(byte)0x22, (byte)0xA8, (byte)0xA3, (byte)0x87, (byte)0xAC, (byte)0xB2, (byte)0x1D, (byte)0xD8,
						(byte)0x8E, (byte)0x2C, (byte)0xC2, (byte)0x79, (byte)0x62, (byte)0xB3, (byte)0x1F, (byte)0xBD,
						(byte)0x78, (byte)0x6B, (byte)0xBB, (byte)0x55, (byte)0xF9, (byte)0xE0, (byte)0xB0, (byte)0x41},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xCA, (byte)0x1E, (byte)0x90, (byte)0x99, (byte)0x32, (byte)0x7F, (byte)0x0B, (byte)0x78,
						(byte)0x6D, (byte)0x85, (byte)0x83, (byte)0xEC, (byte)0x2F, (byte)0x27, (byte)0xE5, (byte)0x71,
						(byte)0x89, (byte)0x50, (byte)0x3A, (byte)0x57}
		);
		//72. DFS(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x04,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0x8E, (byte)0xEE, (byte)0xC0, (byte)0xD6, (byte)0xD3, (byte)0x85, (byte)0x7F, (byte)0xD5,
						(byte)0x58, (byte)0x28, (byte)0x5E, (byte)0x49, (byte)0xB6, (byte)0x23, (byte)0xB1, (byte)0x09,
						(byte)0xE6, (byte)0x77, (byte)0x4E, (byte)0x06, (byte)0xE9, (byte)0x47, (byte)0x6F, (byte)0xE1,
						(byte)0xB2, (byte)0xFB, (byte)0x27, (byte)0x36, (byte)0x85, (byte)0xB5, (byte)0xA2, (byte)0x35,
						(byte)0xE9, (byte)0x55, (byte)0x81, (byte)0x0A, (byte)0xDD, (byte)0xB5, (byte)0xCD, (byte)0xCC,
						(byte)0x2C, (byte)0xB6, (byte)0xE1, (byte)0xA9, (byte)0x7A, (byte)0x07, (byte)0x08, (byte)0x9D,
						(byte)0x7F, (byte)0xDE, (byte)0x0A, (byte)0x54, (byte)0x8B, (byte)0xDC, (byte)0x62, (byte)0x21,
						(byte)0x45, (byte)0xCA, (byte)0x2D, (byte)0xE3, (byte)0xC7, (byte)0x3D, (byte)0x6B, (byte)0x14,
						(byte)0xF2, (byte)0x84, (byte)0xB3, (byte)0xDC, (byte)0x1F, (byte)0xA0, (byte)0x56, (byte)0xFC,
						(byte)0x0F, (byte)0xB2, (byte)0x81, (byte)0x8B, (byte)0xCD, (byte)0x7C, (byte)0x85, (byte)0x2F,
						(byte)0x0C, (byte)0x97, (byte)0x96, (byte)0x31, (byte)0x69, (byte)0xF0, (byte)0x14, (byte)0x83,
						(byte)0xCE, (byte)0x1A, (byte)0x63, (byte)0xF0, (byte)0xBF, (byte)0x89, (byte)0x9D, (byte)0x41,
						(byte)0x2A, (byte)0xB6, (byte)0x7C, (byte)0x5B, (byte)0xBD, (byte)0xC8, (byte)0xB4, (byte)0xF6,
						(byte)0xFB, (byte)0x9A, (byte)0xBB, (byte)0x57, (byte)0xE9, (byte)0x51, (byte)0x25, (byte)0x36,
						(byte)0x3D, (byte)0xBD, (byte)0x8F, (byte)0x5E, (byte)0xBA, (byte)0xA9, (byte)0xB7, (byte)0x4A,
						(byte)0xDB, (byte)0x93, (byte)0x20, (byte)0x20, (byte)0x50, (byte)0x34, (byte)0x18, (byte)0x33,
						(byte)0xDE, (byte)0xE8, (byte)0xE3, (byte)0x8D, (byte)0x28, (byte)0xBD, (byte)0x17, (byte)0x5C,
						(byte)0x83, (byte)0xA6, (byte)0xEA, (byte)0x72, (byte)0x0C, (byte)0x26, (byte)0x26, (byte)0x82,
						(byte)0xBE, (byte)0xAB, (byte)0xEA, (byte)0x8E, (byte)0x95, (byte)0x5F, (byte)0xE6, (byte)0x7B,
						(byte)0xD9, (byte)0xC2, (byte)0xEF, (byte)0xF7, (byte)0xCB, (byte)0x9A, (byte)0x9F, (byte)0x45,
						(byte)0xDD, (byte)0x5B, (byte)0xDA, (byte)0x4A, (byte)0x1E, (byte)0xEF, (byte)0xB1, (byte)0x48,
						(byte)0xBC, (byte)0x44, (byte)0xFF, (byte)0xF6, (byte)0x8D, (byte)0x93, (byte)0x29, (byte)0xFD},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x17, (byte)0xF9, (byte)0x71, (byte)0xCA, (byte)0xF6, (byte)0xB7, (byte)0x08, (byte)0xE5,
						(byte)0xB9, (byte)0x16, (byte)0x53, (byte)0x31, (byte)0xFB, (byte)0xA9, (byte)0x15, (byte)0x93,
						(byte)0xD0, (byte)0xC0, (byte)0xBF, (byte)0x66}
		);
		//73. DFS(live)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x05,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xE1, (byte)0x20, (byte)0x0E, (byte)0x9F, (byte)0x44, (byte)0x28, (byte)0xEB, (byte)0x71,
						(byte)0xA5, (byte)0x26, (byte)0xD6, (byte)0xBB, (byte)0x44, (byte)0xC9, (byte)0x57, (byte)0xF1,
						(byte)0x8F, (byte)0x27, (byte)0xB2, (byte)0x0B, (byte)0xAC, (byte)0xE9, (byte)0x78, (byte)0x06,
						(byte)0x1C, (byte)0xCE, (byte)0xF2, (byte)0x35, (byte)0x32, (byte)0xDB, (byte)0xEB, (byte)0xFA,
						(byte)0xF6, (byte)0x54, (byte)0xA1, (byte)0x49, (byte)0x70, (byte)0x1C, (byte)0x14, (byte)0xE6,
						(byte)0xA2, (byte)0xA7, (byte)0xC2, (byte)0xEC, (byte)0xAC, (byte)0x4C, (byte)0x92, (byte)0x13,
						(byte)0x5B, (byte)0xE3, (byte)0xE9, (byte)0x25, (byte)0x83, (byte)0x31, (byte)0xDD, (byte)0xB0,
						(byte)0x96, (byte)0x7C, (byte)0x3D, (byte)0x1D, (byte)0x37, (byte)0x5B, (byte)0x99, (byte)0x6F,
						(byte)0x25, (byte)0xB7, (byte)0x78, (byte)0x11, (byte)0xCC, (byte)0xCC, (byte)0x06, (byte)0xA1,
						(byte)0x53, (byte)0xB4, (byte)0xCE, (byte)0x69, (byte)0x90, (byte)0xA5, (byte)0x1A, (byte)0x02,
						(byte)0x58, (byte)0xEA, (byte)0x84, (byte)0x37, (byte)0xED, (byte)0xBE, (byte)0xB7, (byte)0x01,
						(byte)0xCB, (byte)0x1F, (byte)0x33, (byte)0x59, (byte)0x93, (byte)0xE3, (byte)0xF4, (byte)0x84,
						(byte)0x58, (byte)0xBC, (byte)0x11, (byte)0x94, (byte)0xBA, (byte)0xD2, (byte)0x9B, (byte)0xF6,
						(byte)0x83, (byte)0xD5, (byte)0xF3, (byte)0xEC, (byte)0xB9, (byte)0x84, (byte)0xE3, (byte)0x1B,
						(byte)0x7B, (byte)0x9D, (byte)0x2F, (byte)0x6D, (byte)0x94, (byte)0x7B, (byte)0x39, (byte)0xDE,
						(byte)0xDE, (byte)0x02, (byte)0x79, (byte)0xEE, (byte)0x45, (byte)0xB4, (byte)0x7F, (byte)0x2F,
						(byte)0x3D, (byte)0x4E, (byte)0xEE, (byte)0xF9, (byte)0x3F, (byte)0x92, (byte)0x61, (byte)0xF8,
						(byte)0xF5, (byte)0xA5, (byte)0x71, (byte)0xAF, (byte)0xBF, (byte)0xB5, (byte)0x69, (byte)0xC1,
						(byte)0x50, (byte)0x37, (byte)0x0A, (byte)0x78, (byte)0xF6, (byte)0x68, (byte)0x3D, (byte)0x68,
						(byte)0x7C, (byte)0xB6, (byte)0x77, (byte)0x77, (byte)0x7B, (byte)0x2E, (byte)0x7A, (byte)0xBE,
						(byte)0xFC, (byte)0xFC, (byte)0x8F, (byte)0x5F, (byte)0x93, (byte)0x50, (byte)0x17, (byte)0x36,
						(byte)0x99, (byte)0x7E, (byte)0x83, (byte)0x10, (byte)0xEE, (byte)0x0F, (byte)0xD8, (byte)0x7A,
						(byte)0xFA, (byte)0xC5, (byte)0xDA, (byte)0x77, (byte)0x2B, (byte)0xA2, (byte)0x77, (byte)0xF8,
						(byte)0x8B, (byte)0x44, (byte)0x45, (byte)0x9F, (byte)0xCA, (byte)0x56, (byte)0x35, (byte)0x55,
						(byte)0x01, (byte)0x7C, (byte)0xD0, (byte)0xD6, (byte)0x67, (byte)0x71, (byte)0x43, (byte)0x7F,
						(byte)0x8B, (byte)0x66, (byte)0x08, (byte)0xAA, (byte)0x1A, (byte)0x66, (byte)0x5F, (byte)0x88,
						(byte)0xD8, (byte)0x46, (byte)0x40, (byte)0x3E, (byte)0x4C, (byte)0x41, (byte)0xAF, (byte)0xEE,
						(byte)0xDB, (byte)0x97, (byte)0x29, (byte)0xC2, (byte)0xB2, (byte)0x51, (byte)0x1C, (byte)0xFE,
						(byte)0x22, (byte)0x8B, (byte)0x50, (byte)0xC1, (byte)0xB1, (byte)0x52, (byte)0xB2, (byte)0xA6,
						(byte)0x0B, (byte)0xBF, (byte)0x61, (byte)0xD8, (byte)0x91, (byte)0x3E, (byte)0x08, (byte)0x62,
						(byte)0x10, (byte)0x02, (byte)0x3A, (byte)0x3A, (byte)0xA4, (byte)0x99, (byte)0xE4, (byte)0x23},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x12, (byte)0xBC, (byte)0xD4, (byte)0x07, (byte)0xB6, (byte)0xE6, (byte)0x27, (byte)0xA7,
						(byte)0x50, (byte)0xFD, (byte)0xF6, (byte)0x29, (byte)0xEE, (byte)0x8C, (byte)0x2C, (byte)0x9C,
						(byte)0xC7, (byte)0xBA, (byte)0x63, (byte)0x6A}
		);
		//74. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},                 // RID
				(byte)0x09,/*key index*/                                          // INDEX
				(byte)0x01,
				(byte)0x01,
				(byte)176,                                          // length in bits of modulus * /
				new byte[]{(byte)0xEB, (byte)0x37, (byte)0x4D, (byte)0xFC, (byte)0x5A, (byte)0x96, (byte)0xB7, (byte)0x1D,
						(byte)0x28, (byte)0x63, (byte)0x87, (byte)0x5E, (byte)0xDA, (byte)0x2E, (byte)0xAF, (byte)0xB9,
						(byte)0x6B, (byte)0x1B, (byte)0x43, (byte)0x9D, (byte)0x3E, (byte)0xCE, (byte)0x0B, (byte)0x18,
						(byte)0x26, (byte)0xA2, (byte)0x67, (byte)0x2E, (byte)0xEE, (byte)0xFA, (byte)0x79, (byte)0x90,
						(byte)0x28, (byte)0x67, (byte)0x76, (byte)0xF8, (byte)0xBD, (byte)0x98, (byte)0x9A, (byte)0x15,
						(byte)0x14, (byte)0x1A, (byte)0x75, (byte)0xC3, (byte)0x84, (byte)0xDF, (byte)0xC1, (byte)0x4F,
						(byte)0xEF, (byte)0x92, (byte)0x43, (byte)0xAA, (byte)0xB3, (byte)0x27, (byte)0x07, (byte)0x65,
						(byte)0x9B, (byte)0xE9, (byte)0xE4, (byte)0x79, (byte)0x7A, (byte)0x24, (byte)0x7C, (byte)0x2F,
						(byte)0x0B, (byte)0x6D, (byte)0x99, (byte)0x37, (byte)0x2F, (byte)0x38, (byte)0x4A, (byte)0xF6,
						(byte)0x2F, (byte)0xE2, (byte)0x3B, (byte)0xC5, (byte)0x4B, (byte)0xCD, (byte)0xC5, (byte)0x7A,
						(byte)0x9A, (byte)0xCD, (byte)0x1D, (byte)0x55, (byte)0x85, (byte)0xC3, (byte)0x03, (byte)0xF2,
						(byte)0x01, (byte)0xEF, (byte)0x4E, (byte)0x8B, (byte)0x80, (byte)0x6A, (byte)0xFB, (byte)0x80,
						(byte)0x9D, (byte)0xB1, (byte)0xA3, (byte)0xDB, (byte)0x1C, (byte)0xD1, (byte)0x12, (byte)0xAC,
						(byte)0x88, (byte)0x4F, (byte)0x16, (byte)0x4A, (byte)0x67, (byte)0xB9, (byte)0x9C, (byte)0x7D,
						(byte)0x6E, (byte)0x5A, (byte)0x8A, (byte)0x6D, (byte)0xF1, (byte)0xD3, (byte)0xCA, (byte)0xE6,
						(byte)0xD7, (byte)0xED, (byte)0x3D, (byte)0x5B, (byte)0xE7, (byte)0x25, (byte)0xB2, (byte)0xDE,
						(byte)0x4A, (byte)0xDE, (byte)0x23, (byte)0xFA, (byte)0x67, (byte)0x9B, (byte)0xF4, (byte)0xEB,
						(byte)0x15, (byte)0xA9, (byte)0x3D, (byte)0x8A, (byte)0x6E, (byte)0x29, (byte)0xC7, (byte)0xFF,
						(byte)0xA1, (byte)0xA7, (byte)0x0D, (byte)0xE2, (byte)0xE5, (byte)0x4F, (byte)0x59, (byte)0x3D,
						(byte)0x90, (byte)0x8A, (byte)0x3B, (byte)0xF9, (byte)0xEB, (byte)0xBD, (byte)0x76, (byte)0x0B,
						(byte)0xBF, (byte)0xDC, (byte)0x8D, (byte)0xB8, (byte)0xB5, (byte)0x44, (byte)0x97, (byte)0xE6,
						(byte)0xC5, (byte)0xBE, (byte)0x0E, (byte)0x4A, (byte)0x4D, (byte)0xAC, (byte)0x29, (byte)0xE5},	// 8 * 32로 맞춤
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}
		);
		//75. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},                 // RID
				(byte)0x10,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)144,                                          // length in bits of modulus * /
				new byte[]{(byte)0x99, (byte)0xB6, (byte)0x34, (byte)0x64, (byte)0xEE, (byte)0x0B, (byte)0x49, (byte)0x57,
						(byte)0xE4, (byte)0xFD, (byte)0x23, (byte)0xBF, (byte)0x92, (byte)0x3D, (byte)0x12, (byte)0xB6,
						(byte)0x14, (byte)0x69, (byte)0xB8, (byte)0xFF, (byte)0xF8, (byte)0x81, (byte)0x43, (byte)0x46,
						(byte)0xB2, (byte)0xED, (byte)0x6A, (byte)0x78, (byte)0x0F, (byte)0x89, (byte)0x88, (byte)0xEA,
						(byte)0x9C, (byte)0xF0, (byte)0x43, (byte)0x3B, (byte)0xC1, (byte)0xE6, (byte)0x55, (byte)0xF0,
						(byte)0x5E, (byte)0xFA, (byte)0x66, (byte)0xD0, (byte)0xC9, (byte)0x80, (byte)0x98, (byte)0xF2,
						(byte)0x5B, (byte)0x65, (byte)0x9D, (byte)0x7A, (byte)0x25, (byte)0xB8, (byte)0x47, (byte)0x8A,
						(byte)0x36, (byte)0xE4, (byte)0x89, (byte)0x76, (byte)0x0D, (byte)0x07, (byte)0x1F, (byte)0x54,
						(byte)0xCD, (byte)0xF7, (byte)0x41, (byte)0x69, (byte)0x48, (byte)0xED, (byte)0x73, (byte)0x3D,
						(byte)0x81, (byte)0x63, (byte)0x49, (byte)0xDA, (byte)0x2A, (byte)0xAD, (byte)0xDA, (byte)0x22,
						(byte)0x7E, (byte)0xE4, (byte)0x59, (byte)0x36, (byte)0x20, (byte)0x3C, (byte)0xBF, (byte)0x62,
						(byte)0x8C, (byte)0xD0, (byte)0x33, (byte)0xAA, (byte)0xBA, (byte)0x5E, (byte)0x5A, (byte)0x6E,
						(byte)0x4A, (byte)0xE3, (byte)0x7F, (byte)0xBA, (byte)0xCB, (byte)0x46, (byte)0x11, (byte)0xB4,
						(byte)0x11, (byte)0x3E, (byte)0xD4, (byte)0x27, (byte)0x52, (byte)0x9C, (byte)0x63, (byte)0x6F,
						(byte)0x6C, (byte)0x33, (byte)0x04, (byte)0xF8, (byte)0xAB, (byte)0xDD, (byte)0x6D, (byte)0x9A,
						(byte)0xD6, (byte)0x60, (byte)0x51, (byte)0x6A, (byte)0xE8, (byte)0x7F, (byte)0x7F, (byte)0x2D,
						(byte)0xDF, (byte)0x1D, (byte)0x2F, (byte)0xA4, (byte)0x4C, (byte)0x16, (byte)0x47, (byte)0x27,
						(byte)0xE5, (byte)0x6B, (byte)0xBC, (byte)0x9B, (byte)0xA2, (byte)0x3C, (byte)0x02, (byte)0x85},	// 8 * 32로 맞춤
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}
		);
		//76. non KOCES
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x12,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)176,
				new byte[]{(byte)0xAD, (byte)0xF0, (byte)0x5C, (byte)0xD4, (byte)0xC5, (byte)0xB4, (byte)0x90, (byte)0xB0,
						(byte)0x87, (byte)0xC3, (byte)0x46, (byte)0x7B, (byte)0x0F, (byte)0x30, (byte)0x43, (byte)0x75,
						(byte)0x04, (byte)0x38, (byte)0x84, (byte)0x84, (byte)0x61, (byte)0x28, (byte)0x8B, (byte)0xFE,
						(byte)0xFD, (byte)0x61, (byte)0x98, (byte)0xDD, (byte)0x57, (byte)0x6D, (byte)0xC3, (byte)0xAD,
						(byte)0x7A, (byte)0x7C, (byte)0xFA, (byte)0x07, (byte)0xDB, (byte)0xA1, (byte)0x28, (byte)0xC2,
						(byte)0x47, (byte)0xA8, (byte)0xEA, (byte)0xB3, (byte)0x0D, (byte)0xC3, (byte)0xA3, (byte)0x0B,
						(byte)0x02, (byte)0xFC, (byte)0xD7, (byte)0xF1, (byte)0xC8, (byte)0x16, (byte)0x79, (byte)0x65,
						(byte)0x46, (byte)0x36, (byte)0x26, (byte)0xFE, (byte)0xFF, (byte)0x8A, (byte)0xB1, (byte)0xAA,
						(byte)0x61, (byte)0xA4, (byte)0xB9, (byte)0xAE, (byte)0xF0, (byte)0x9E, (byte)0xE1, (byte)0x2B,
						(byte)0x00, (byte)0x98, (byte)0x42, (byte)0xA1, (byte)0xAB, (byte)0xA0, (byte)0x1A, (byte)0xDB,
						(byte)0x4A, (byte)0x2B, (byte)0x17, (byte)0x06, (byte)0x68, (byte)0x78, (byte)0x1E, (byte)0xC9,
						(byte)0x2B, (byte)0x60, (byte)0xF6, (byte)0x05, (byte)0xFD, (byte)0x12, (byte)0xB2, (byte)0xB2,
						(byte)0xA6, (byte)0xF1, (byte)0xFE, (byte)0x73, (byte)0x4B, (byte)0xE5, (byte)0x10, (byte)0xF6,
						(byte)0x0D, (byte)0xC5, (byte)0xD1, (byte)0x89, (byte)0xE4, (byte)0x01, (byte)0x45, (byte)0x1B,
						(byte)0x62, (byte)0xB4, (byte)0xE0, (byte)0x68, (byte)0x51, (byte)0xEC, (byte)0x20, (byte)0xEB,
						(byte)0xFF, (byte)0x45, (byte)0x22, (byte)0xAA, (byte)0xCC, (byte)0x2E, (byte)0x9C, (byte)0xDC,
						(byte)0x89, (byte)0xBC, (byte)0x5D, (byte)0x8C, (byte)0xDE, (byte)0x5D, (byte)0x63, (byte)0x3C,
						(byte)0xFD, (byte)0x77, (byte)0x22, (byte)0x0F, (byte)0xF6, (byte)0xBB, (byte)0xD4, (byte)0xA9,
						(byte)0xB4, (byte)0x41, (byte)0x47, (byte)0x3C, (byte)0xC3, (byte)0xC6, (byte)0xFE, (byte)0xFC,
						(byte)0x8D, (byte)0x13, (byte)0xE5, (byte)0x7C, (byte)0x3D, (byte)0xE9, (byte)0x7E, (byte)0x12,
						(byte)0x69, (byte)0xFA, (byte)0x19, (byte)0xF6, (byte)0x55, (byte)0x21, (byte)0x5B, (byte)0x23,
						(byte)0x56, (byte)0x3E, (byte)0xD1, (byte)0xD1, (byte)0x86, (byte)0x0D, (byte)0x86, (byte)0x81},	// 8 * 32로 맞춤
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,
						(byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00}
		);
		//77. DFS(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x5A,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x80,
				new byte[]{(byte)0xED, (byte)0xD8, (byte)0x25, (byte)0x24, (byte)0x68, (byte)0xA7, (byte)0x05, (byte)0x61,
						(byte)0x4B, (byte)0x4D, (byte)0x07, (byte)0xDE, (byte)0x32, (byte)0x11, (byte)0xB3, (byte)0x00,
						(byte)0x31, (byte)0xAE, (byte)0xDB, (byte)0x6D, (byte)0x33, (byte)0xA4, (byte)0x31, (byte)0x5F,
						(byte)0x2C, (byte)0xFF, (byte)0x7C, (byte)0x97, (byte)0xDB, (byte)0x91, (byte)0x89, (byte)0x93,
						(byte)0xC2, (byte)0xDC, (byte)0x02, (byte)0xE7, (byte)0x9E, (byte)0x2F, (byte)0xF8, (byte)0xA2,
						(byte)0x68, (byte)0x3D, (byte)0x5B, (byte)0xBD, (byte)0x0F, (byte)0x61, (byte)0x4B, (byte)0xC9,
						(byte)0xAB, (byte)0x36, (byte)0x0A, (byte)0x44, (byte)0x82, (byte)0x83, (byte)0xEF, (byte)0x8B,
						(byte)0x9C, (byte)0xF6, (byte)0x73, (byte)0x1D, (byte)0x71, (byte)0xD6, (byte)0xBE, (byte)0x93,
						(byte)0x9B, (byte)0x7C, (byte)0x5D, (byte)0x0B, (byte)0x04, (byte)0x52, (byte)0xD6, (byte)0x60,
						(byte)0xCF, (byte)0x24, (byte)0xC2, (byte)0x1C, (byte)0x47, (byte)0xCA, (byte)0xC8, (byte)0xE2,
						(byte)0x69, (byte)0x48, (byte)0xC8, (byte)0xEE, (byte)0xD8, (byte)0xE3, (byte)0xD0, (byte)0x0C,
						(byte)0x01, (byte)0x68, (byte)0x28, (byte)0xD6, (byte)0x42, (byte)0x81, (byte)0x6E, (byte)0x65,
						(byte)0x8D, (byte)0xC2, (byte)0xCF, (byte)0xC6, (byte)0x1E, (byte)0x7E, (byte)0x7D, (byte)0x77,
						(byte)0x40, (byte)0x63, (byte)0x3B, (byte)0xEF, (byte)0xE3, (byte)0x41, (byte)0x07, (byte)0xC1,
						(byte)0xFB, (byte)0x55, (byte)0xDE, (byte)0xA7, (byte)0xFA, (byte)0xAE, (byte)0xA2, (byte)0xB2,
						(byte)0x5E, (byte)0x85, (byte)0xBE, (byte)0xD9, (byte)0x48, (byte)0x89, (byte)0x3D, (byte)0x07},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xCC, (byte)0x95, (byte)0x85, (byte)0xE8, (byte)0xE6, (byte)0x37, (byte)0x19, (byte)0x1C,
						(byte)0x10, (byte)0xFC, (byte)0xEC, (byte)0xB3, (byte)0x2B, (byte)0x5A, (byte)0xE1, (byte)0xB9,
						(byte)0xD4, (byte)0x10, (byte)0xB5, (byte)0x2D}
		);
		//78. DFS(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x5B,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0x90,
				new byte[]{(byte)0xD3, (byte)0xF4, (byte)0x5D, (byte)0x06, (byte)0x5D, (byte)0x4D, (byte)0x90, (byte)0x0F,
						(byte)0x68, (byte)0xB2, (byte)0x12, (byte)0x9A, (byte)0xFA, (byte)0x38, (byte)0xF5, (byte)0x49,
						(byte)0xAB, (byte)0x9A, (byte)0xE4, (byte)0x61, (byte)0x9E, (byte)0x55, (byte)0x45, (byte)0x81,
						(byte)0x4E, (byte)0x46, (byte)0x8F, (byte)0x38, (byte)0x20, (byte)0x49, (byte)0xA0, (byte)0xB9,
						(byte)0x77, (byte)0x66, (byte)0x20, (byte)0xDA, (byte)0x60, (byte)0xD6, (byte)0x25, (byte)0x37,
						(byte)0xF0, (byte)0x70, (byte)0x5A, (byte)0x2C, (byte)0x92, (byte)0x6D, (byte)0xBE, (byte)0xAD,
						(byte)0x4C, (byte)0xA7, (byte)0xCB, (byte)0x43, (byte)0xF0, (byte)0xF0, (byte)0xDD, (byte)0x80,
						(byte)0x95, (byte)0x84, (byte)0xE9, (byte)0xF7, (byte)0xEF, (byte)0xBD, (byte)0xA3, (byte)0x77,
						(byte)0x87, (byte)0x47, (byte)0xBC, (byte)0x9E, (byte)0x25, (byte)0xC5, (byte)0x60, (byte)0x65,
						(byte)0x26, (byte)0xFA, (byte)0xB5, (byte)0xE4, (byte)0x91, (byte)0x64, (byte)0x6D, (byte)0x4D,
						(byte)0xD2, (byte)0x82, (byte)0x78, (byte)0x69, (byte)0x1C, (byte)0x25, (byte)0x95, (byte)0x6C,
						(byte)0x8F, (byte)0xED, (byte)0x5E, (byte)0x45, (byte)0x2F, (byte)0x24, (byte)0x42, (byte)0xE2,
						(byte)0x5E, (byte)0xDC, (byte)0x6B, (byte)0x0C, (byte)0x1A, (byte)0xA4, (byte)0xB2, (byte)0xE9,
						(byte)0xEC, (byte)0x4A, (byte)0xD9, (byte)0xB2, (byte)0x5A, (byte)0x1B, (byte)0x83, (byte)0x62,
						(byte)0x95, (byte)0xB8, (byte)0x23, (byte)0xED, (byte)0xDC, (byte)0x5E, (byte)0xB6, (byte)0xE1,
						(byte)0xE0, (byte)0xA3, (byte)0xF4, (byte)0x1B, (byte)0x28, (byte)0xDB, (byte)0x8C, (byte)0x3B,
						(byte)0x7E, (byte)0x3E, (byte)0x9B, (byte)0x59, (byte)0x79, (byte)0xCD, (byte)0x7E, (byte)0x07,
						(byte)0x9E, (byte)0xF0, (byte)0x24, (byte)0x09, (byte)0x5A, (byte)0x1D, (byte)0x19, (byte)0xDD},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x4D, (byte)0xC5, (byte)0xC6, (byte)0xCA, (byte)0xB6, (byte)0xAE, (byte)0x96, (byte)0x97,
						(byte)0x4D, (byte)0x9D, (byte)0xC8, (byte)0xB2, (byte)0x43, (byte)0x5E, (byte)0x21, (byte)0xF5,
						(byte)0x26, (byte)0xBC, (byte)0x7A, (byte)0x60}
		);
		
		//79. DFS(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x5C,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xB0,
				new byte[]{(byte)0x83, (byte)0x3F, (byte)0x27, (byte)0x5F, (byte)0xCF, (byte)0x5C, (byte)0xA4, (byte)0xCB,
						(byte)0x6F, (byte)0x1B, (byte)0xF8, (byte)0x80, (byte)0xE5, (byte)0x4D, (byte)0xCF, (byte)0xEB,
						(byte)0x72, (byte)0x1A, (byte)0x31, (byte)0x66, (byte)0x92, (byte)0xCA, (byte)0xFE, (byte)0xB2,
						(byte)0x8B, (byte)0x69, (byte)0x8C, (byte)0xAE, (byte)0xCA, (byte)0xFA, (byte)0x2B, (byte)0x2D,
						(byte)0x2A, (byte)0xD8, (byte)0x51, (byte)0x7B, (byte)0x1E, (byte)0xFB, (byte)0x59, (byte)0xDD,
						(byte)0xEF, (byte)0xC3, (byte)0x9F, (byte)0x9C, (byte)0x3B, (byte)0x33, (byte)0xDD, (byte)0xEE,
						(byte)0x40, (byte)0xE7, (byte)0xA6, (byte)0x3C, (byte)0x03, (byte)0xE9, (byte)0x0A, (byte)0x4D,
						(byte)0xD2, (byte)0x61, (byte)0xBC, (byte)0x0F, (byte)0x28, (byte)0xB4, (byte)0x2E, (byte)0xA6,
						(byte)0xE7, (byte)0xA1, (byte)0xF3, (byte)0x07, (byte)0x17, (byte)0x8E, (byte)0x2D, (byte)0x63,
						(byte)0xFA, (byte)0x16, (byte)0x49, (byte)0x15, (byte)0x5C, (byte)0x3A, (byte)0x5F, (byte)0x92,
						(byte)0x6B, (byte)0x4C, (byte)0x7D, (byte)0x7C, (byte)0x25, (byte)0x8B, (byte)0xCA, (byte)0x98,
						(byte)0xEF, (byte)0x90, (byte)0xC7, (byte)0xF4, (byte)0x11, (byte)0x7C, (byte)0x20, (byte)0x5E,
						(byte)0x8E, (byte)0x32, (byte)0xC4, (byte)0x5D, (byte)0x10, (byte)0xE3, (byte)0xD4, (byte)0x94,
						(byte)0x05, (byte)0x9D, (byte)0x2F, (byte)0x29, (byte)0x33, (byte)0x89, (byte)0x1B, (byte)0x97,
						(byte)0x9C, (byte)0xE4, (byte)0xA8, (byte)0x31, (byte)0xB3, (byte)0x01, (byte)0xB0, (byte)0x55,
						(byte)0x0C, (byte)0xDA, (byte)0xE9, (byte)0xB6, (byte)0x70, (byte)0x64, (byte)0xB3, (byte)0x1D,
						(byte)0x8B, (byte)0x48, (byte)0x1B, (byte)0x85, (byte)0xA5, (byte)0xB0, (byte)0x46, (byte)0xBE,
						(byte)0x8F, (byte)0xFA, (byte)0x7B, (byte)0xDB, (byte)0x58, (byte)0xDC, (byte)0x0D, (byte)0x70,
						(byte)0x32, (byte)0x52, (byte)0x52, (byte)0x97, (byte)0xF2, (byte)0x6F, (byte)0xF6, (byte)0x19,
						(byte)0xAF, (byte)0x7F, (byte)0x15, (byte)0xBC, (byte)0xEC, (byte)0x0C, (byte)0x92, (byte)0xBC,
						(byte)0xDC, (byte)0xBC, (byte)0x4F, (byte)0xB2, (byte)0x07, (byte)0xD1, (byte)0x15, (byte)0xAA,
						(byte)0x65, (byte)0xCD, (byte)0x04, (byte)0xC1, (byte)0xCF, (byte)0x98, (byte)0x21, (byte)0x91},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0x60, (byte)0x15, (byte)0x40, (byte)0x98, (byte)0xCB, (byte)0xBA, (byte)0x35, (byte)0x0F,
						(byte)0x5F, (byte)0x48, (byte)0x6C, (byte)0xA3, (byte)0x10, (byte)0x83, (byte)0xD1, (byte)0xFC,
						(byte)0x47, (byte)0x4E, (byte)0x31, (byte)0xF8}
		);
		//80. DFS(test)
		capk[i++] = new EMVCAPK(
				new byte[]{(byte)0xA0, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x52},
				(byte)0x5D,/*key index*/
				(byte)0x01,
				(byte)0x01,
				(byte)0xF8,
				new byte[]{(byte)0xAD, (byte)0x93, (byte)0x8E, (byte)0xA9, (byte)0x88, (byte)0x8E, (byte)0x51, (byte)0x55,
						(byte)0xF8, (byte)0xCD, (byte)0x27, (byte)0x27, (byte)0x49, (byte)0x17, (byte)0x2B, (byte)0x3A,
						(byte)0x8C, (byte)0x50, (byte)0x4C, (byte)0x17, (byte)0x46, (byte)0x0E, (byte)0xFA, (byte)0x0B,
						(byte)0xED, (byte)0x7C, (byte)0xBC, (byte)0x5F, (byte)0xD3, (byte)0x2C, (byte)0x4A, (byte)0x80,
						(byte)0xFD, (byte)0x81, (byte)0x03, (byte)0x12, (byte)0x28, (byte)0x1B, (byte)0x5A, (byte)0x35,
						(byte)0x56, (byte)0x28, (byte)0x00, (byte)0xCD, (byte)0xC3, (byte)0x25, (byte)0x35, (byte)0x8A,
						(byte)0x96, (byte)0x39, (byte)0xC5, (byte)0x01, (byte)0xA5, (byte)0x37, (byte)0xB7, (byte)0xAE,
						(byte)0x43, (byte)0xDF, (byte)0x26, (byte)0x3E, (byte)0x6D, (byte)0x23, (byte)0x2B, (byte)0x81,
						(byte)0x1A, (byte)0xCD, (byte)0xB6, (byte)0xDD, (byte)0xE9, (byte)0x79, (byte)0xD5, (byte)0x5D,
						(byte)0x6C, (byte)0x91, (byte)0x11, (byte)0x73, (byte)0x48, (byte)0x39, (byte)0x93, (byte)0xA4,
						(byte)0x23, (byte)0xA0, (byte)0xA5, (byte)0xB1, (byte)0xE1, (byte)0xA7, (byte)0x02, (byte)0x37,
						(byte)0x88, (byte)0x5A, (byte)0x24, (byte)0x1B, (byte)0x8E, (byte)0xEB, (byte)0xB5, (byte)0x57,
						(byte)0x1E, (byte)0x2D, (byte)0x32, (byte)0xB4, (byte)0x1F, (byte)0x9C, (byte)0xC5, (byte)0x51,
						(byte)0x4D, (byte)0xF8, (byte)0x3F, (byte)0x0D, (byte)0x69, (byte)0x27, (byte)0x0E, (byte)0x10,
						(byte)0x9A, (byte)0xF1, (byte)0x42, (byte)0x2F, (byte)0x98, (byte)0x5A, (byte)0x52, (byte)0xCC,
						(byte)0xE0, (byte)0x4F, (byte)0x3D, (byte)0xF2, (byte)0x69, (byte)0xB7, (byte)0x95, (byte)0x15,
						(byte)0x5A, (byte)0x68, (byte)0xAD, (byte)0x2D, (byte)0x6B, (byte)0x66, (byte)0x0D, (byte)0xDC,
						(byte)0xD7, (byte)0x59, (byte)0xF0, (byte)0xA5, (byte)0xDA, (byte)0x7B, (byte)0x64, (byte)0x10,
						(byte)0x4D, (byte)0x22, (byte)0xC2, (byte)0x77, (byte)0x1E, (byte)0xCE, (byte)0x7A, (byte)0x5F,
						(byte)0xFD, (byte)0x40, (byte)0xC7, (byte)0x74, (byte)0xE4, (byte)0x41, (byte)0x37, (byte)0x9D,
						(byte)0x11, (byte)0x32, (byte)0xFA, (byte)0xF0, (byte)0x4C, (byte)0xDF, (byte)0x55, (byte)0xB9,
						(byte)0x50, (byte)0x4C, (byte)0x6D, (byte)0xCE, (byte)0x9F, (byte)0x61, (byte)0x77, (byte)0x6D,
						(byte)0x81, (byte)0xC7, (byte)0xC4, (byte)0x5F, (byte)0x19, (byte)0xB9, (byte)0xEF, (byte)0xB3,
						(byte)0x74, (byte)0x9A, (byte)0xC7, (byte)0xD4, (byte)0x86, (byte)0xA5, (byte)0xAD, (byte)0x2E,
						(byte)0x78, (byte)0x1F, (byte)0xA9, (byte)0xD0, (byte)0x82, (byte)0xFB, (byte)0x26, (byte)0x77,
						(byte)0x66, (byte)0x5B, (byte)0x99, (byte)0xFA, (byte)0x5F, (byte)0x15, (byte)0x53, (byte)0x13,
						(byte)0x5A, (byte)0x1F, (byte)0xD2, (byte)0xA2, (byte)0xA9, (byte)0xFB, (byte)0xF6, (byte)0x25,
						(byte)0xCA, (byte)0x84, (byte)0xA7, (byte)0xD7, (byte)0x36, (byte)0x52, (byte)0x14, (byte)0x31,
						(byte)0x17, (byte)0x8F, (byte)0x13, (byte)0x10, (byte)0x0A, (byte)0x25, (byte)0x16, (byte)0xF9,
						(byte)0xA4, (byte)0x3C, (byte)0xE0, (byte)0x95, (byte)0xB0, (byte)0x32, (byte)0xB8, (byte)0x86,
						(byte)0xC7, (byte)0xA6, (byte)0xAB, (byte)0x12, (byte)0x6E, (byte)0x20, (byte)0x3B, (byte)0xE7},
				(byte)0x01,
				new byte[]{(byte)0x03},
				new byte[]{(byte) 0x50, (byte) 0x12, (byte) 0x31},//expiration date
				new byte[]{(byte)0xB5, (byte)0x1E, (byte)0xC5, (byte)0xF7, (byte)0xDE, (byte)0x9B, (byte)0xB6, (byte)0xD8,
						(byte)0xBC, (byte)0xE8, (byte)0xFB, (byte)0x5F, (byte)0x69, (byte)0xBA, (byte)0x57, (byte)0xA0,
						(byte)0x42, (byte)0x21, (byte)0xF3, (byte)0x9B}
		);

		return i;
	}
	
	public static int setDefaultLiveCAPK3RD(int i) {
//		//
//		capk[i++] = new EMVCAPK(
//
//		);

		int     ret=0;
		int     j=0;

		Log.d("Lib-PM500", "# num of CAPK = " + i);
		
		for(j = 0; j < i; j++) {
			if((ret = EmvKernel.EmvLib_AddCapk(capk[j])) != 0) {
				break;
			}
		}

		Log.d("Lib-PM500", "# num of writing CAPK = " + j);
		
		return ret;
	}
		
		public static void setDefaultTestCAPK1st() {
		byte[] RID = {(byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03};
		byte KeyID = (byte) 0x50;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = {(byte) 0xD1, (byte) 0x11, (byte) 0x97, (byte) 0x59,
				(byte) 0x00, (byte) 0x57, (byte) 0xB8, (byte) 0x41,
				(byte) 0x96, (byte) 0xC2, (byte) 0xF4, (byte) 0xD1,
				(byte) 0x1A, (byte) 0x8F, (byte) 0x3C, (byte) 0x05,
				(byte) 0x40, (byte) 0x8F, (byte) 0x42, (byte) 0x2A,
				(byte) 0x35, (byte) 0xD7, (byte) 0x02, (byte) 0xF9,
				(byte) 0x01, (byte) 0x06, (byte) 0xEA, (byte) 0x5B,
				(byte) 0x01, (byte) 0x9B, (byte) 0xB2, (byte) 0x8A,
				(byte) 0xE6, (byte) 0x07, (byte) 0xAA, (byte) 0x9C,
				(byte) 0xDE, (byte) 0xBC, (byte) 0xD0, (byte) 0xD8,
				(byte) 0x1A, (byte) 0x38, (byte) 0xD4, (byte) 0x8C,
				(byte) 0x7E, (byte) 0xBB, (byte) 0x00, (byte) 0x62,
				(byte) 0xD2, (byte) 0x87, (byte) 0x36, (byte) 0x9E,
				(byte) 0xC0, (byte) 0xC4, (byte) 0x21, (byte) 0x24,
				(byte) 0x24, (byte) 0x6A, (byte) 0xC3, (byte) 0x0D,
				(byte) 0x80, (byte) 0xCD, (byte) 0x60, (byte) 0x2A,
				(byte) 0xB7, (byte) 0x23, (byte) 0x8D, (byte) 0x51,
				(byte) 0x08, (byte) 0x4D, (byte) 0xED, (byte) 0x46,
				(byte) 0x98, (byte) 0x16, (byte) 0x2C, (byte) 0x59,
				(byte) 0xD2, (byte) 0x5E, (byte) 0xAC, (byte) 0x1E,
				(byte) 0x66, (byte) 0x25, (byte) 0x5B, (byte) 0x4D,
				(byte) 0xB2, (byte) 0x35, (byte) 0x25, (byte) 0x26,
				(byte) 0xEF, (byte) 0x09, (byte) 0x82, (byte) 0xC3,
				(byte) 0xB8, (byte) 0xAD, (byte) 0x3D, (byte) 0x1C,
				(byte) 0xCE, (byte) 0x85, (byte) 0xB0, (byte) 0x1D,
				(byte) 0xB5, (byte) 0x78, (byte) 0x8E, (byte) 0x75,
				(byte) 0xE0, (byte) 0x9F, (byte) 0x44, (byte) 0xBE,
				(byte) 0x73, (byte) 0x61, (byte) 0x36, (byte) 0x6D,
				(byte) 0xEF, (byte) 0x9D, (byte) 0x1E, (byte) 0x13,
				(byte) 0x17, (byte) 0xB0, (byte) 0x5E, (byte) 0x5D,
				(byte) 0x0F, (byte) 0xF5, (byte) 0x29, (byte) 0x0F,
				(byte) 0x88, (byte) 0xA0, (byte) 0xDB, (byte) 0x47};
		byte ExponentLen = 3;
		byte[] Exponent = {(byte) 0x01, (byte) 0x00, (byte) 0x01};
		byte[] ExpDate = {(byte) 0x15, (byte) 0x12, (byte) 0x31};
		byte[] CheckSum = {(byte) 0xB7, (byte) 0x69, (byte) 0x77, (byte) 0x56,
				(byte) 0x68, (byte) 0xCA, (byte) 0xCB, (byte) 0x5D,
				(byte) 0x22, (byte) 0xA6, (byte) 0x47, (byte) 0xD1,
				(byte) 0xD9, (byte) 0x93, (byte) 0x14, (byte) 0x1E,
				(byte) 0xDA, (byte) 0xB7, (byte) 0x23, (byte) 0x7B};

//		EMVCAPK capk = new vpos.emvkernel.EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
//				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));

		//===========================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,	(byte) 0x03 };
		KeyID = (byte) 0x51;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xDB, (byte) 0x5F, (byte) 0xA2, (byte) 0x9D,
				(byte) 0x1F, (byte) 0xDA, (byte) 0x8C, (byte) 0x16,
				(byte) 0x34, (byte) 0xB0, (byte) 0x4D, (byte) 0xCC,
				(byte) 0xFF, (byte) 0x14, (byte) 0x8A, (byte) 0xBE,
				(byte) 0xE6, (byte) 0x3C, (byte) 0x77, (byte) 0x20,
				(byte) 0x35, (byte) 0xC7, (byte) 0x98, (byte) 0x51,
				(byte) 0xD3, (byte) 0x51, (byte) 0x21, (byte) 0x07,
				(byte) 0x58, (byte) 0x6E, (byte) 0x02, (byte) 0xA9,
				(byte) 0x17, (byte) 0xF7, (byte) 0xC7, (byte) 0xE8,
				(byte) 0x85, (byte) 0xE7, (byte) 0xC4, (byte) 0xA7,
				(byte) 0xD5, (byte) 0x29, (byte) 0x71, (byte) 0x0A,
				(byte) 0x14, (byte) 0x53, (byte) 0x34, (byte) 0xCE,
				(byte) 0x67, (byte) 0xDC, (byte) 0x41, (byte) 0x2C,
				(byte) 0xB1, (byte) 0x59, (byte) 0x7B, (byte) 0x77,
				(byte) 0xAA, (byte) 0x25, (byte) 0x43, (byte) 0xB9,
				(byte) 0x8D, (byte) 0x19, (byte) 0xCF, (byte) 0x2C,
				(byte) 0xB8, (byte) 0x0C, (byte) 0x52, (byte) 0x2B,
				(byte) 0xDB, (byte) 0xEA, (byte) 0x0F, (byte) 0x1B,
				(byte) 0x11, (byte) 0x3F, (byte) 0xA2, (byte) 0xC8,
				(byte) 0x62, (byte) 0x16, (byte) 0xC8, (byte) 0xC6,
				(byte) 0x10, (byte) 0xA2, (byte) 0xD5, (byte) 0x8F,
				(byte) 0x29, (byte) 0xCF, (byte) 0x33, (byte) 0x55,
				(byte) 0xCE, (byte) 0xB1, (byte) 0xBD, (byte) 0x3E,
				(byte) 0xF4, (byte) 0x10, (byte) 0xD1, (byte) 0xED,
				(byte) 0xD1, (byte) 0xF7, (byte) 0xAE, (byte) 0x0F,
				(byte) 0x16, (byte) 0x89, (byte) 0x79, (byte) 0x79,
				(byte) 0xDE, (byte) 0x28, (byte) 0xC6, (byte) 0xEF,
				(byte) 0x29, (byte) 0x3E, (byte) 0x0A, (byte) 0x19,
				(byte) 0x28, (byte) 0x2B, (byte) 0xD1, (byte) 0xD7,
				(byte) 0x93, (byte) 0xF1, (byte) 0x33, (byte) 0x15,
				(byte) 0x23, (byte) 0xFC, (byte) 0x71, (byte) 0xA2,
				(byte) 0x28, (byte) 0x80, (byte) 0x04, (byte) 0x68,
				(byte) 0xC0, (byte) 0x1A, (byte) 0x36, (byte) 0x53,
				(byte) 0xD1, (byte) 0x4C, (byte) 0x6B, (byte) 0x48,
				(byte) 0x51, (byte) 0xA5, (byte) 0xC0, (byte) 0x29,
				(byte) 0x47, (byte) 0x8E, (byte) 0x75, (byte) 0x7F };
		ExponentLen = (byte)1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB9, (byte) 0xD2, (byte) 0x48, (byte) 0x07,
				(byte) 0x5A, (byte) 0x3F, (byte) 0x23, (byte) 0xB5,
				(byte) 0x22, (byte) 0xFE, (byte) 0x45, (byte) 0x57,
				(byte) 0x3E, (byte) 0x04, (byte) 0x37, (byte) 0x4D,
				(byte) 0xC4, (byte) 0x99, (byte) 0x5D, (byte) 0x71 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));

		//===========================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x53;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xBC, (byte) 0xD8, (byte) 0x37, (byte) 0x21,
				(byte) 0xBE, (byte) 0x52, (byte) 0xCC, (byte) 0xCC,
				(byte) 0x4B, (byte) 0x64, (byte) 0x57, (byte) 0x32,
				(byte) 0x1F, (byte) 0x22, (byte) 0xA7, (byte) 0xDC,
				(byte) 0x76, (byte) 0x9F, (byte) 0x54, (byte) 0xEB,
				(byte) 0x80, (byte) 0x25, (byte) 0x91, (byte) 0x3B,
				(byte) 0xE8, (byte) 0x04, (byte) 0xD9, (byte) 0xEA,
				(byte) 0xBB, (byte) 0xFA, (byte) 0x19, (byte) 0xB3,
				(byte) 0xD7, (byte) 0xC5, (byte) 0xD3, (byte) 0xCA,
				(byte) 0x65, (byte) 0x8D, (byte) 0x76, (byte) 0x8C,
				(byte) 0xAF, (byte) 0x57, (byte) 0x06, (byte) 0x7E,
				(byte) 0xEC, (byte) 0x83, (byte) 0xC7, (byte) 0xE6,
				(byte) 0xE9, (byte) 0xF8, (byte) 0x1D, (byte) 0x05,
				(byte) 0x86, (byte) 0x70, (byte) 0x3E, (byte) 0xD9,
				(byte) 0xDD, (byte) 0xDA, (byte) 0xDD, (byte) 0x20,
				(byte) 0x67, (byte) 0x5D, (byte) 0x63, (byte) 0x42,
				(byte) 0x49, (byte) 0x80, (byte) 0xB1, (byte) 0x0E,
				(byte) 0xB3, (byte) 0x64, (byte) 0xE8, (byte) 0x1E,
				(byte) 0xB3, (byte) 0x7D, (byte) 0xB4, (byte) 0x0E,
				(byte) 0xD1, (byte) 0x00, (byte) 0x34, (byte) 0x4C,
				(byte) 0x92, (byte) 0x88, (byte) 0x86, (byte) 0xFF,
				(byte) 0x4C, (byte) 0xCC, (byte) 0x37, (byte) 0x20,
				(byte) 0x3E, (byte) 0xE6, (byte) 0x10, (byte) 0x6D,
				(byte) 0x5B, (byte) 0x59, (byte) 0xD1, (byte) 0xAC,
				(byte) 0x10, (byte) 0x2E, (byte) 0x2C, (byte) 0xD2,
				(byte) 0xD7, (byte) 0xAC, (byte) 0x17, (byte) 0xF4,
				(byte) 0xD9, (byte) 0x6C, (byte) 0x39, (byte) 0x8E,
				(byte) 0x5F, (byte) 0xD9, (byte) 0x93, (byte) 0xEC,
				(byte) 0xB4, (byte) 0xFF, (byte) 0xDF, (byte) 0x79,
				(byte) 0xB1, (byte) 0x75, (byte) 0x47, (byte) 0xFF,
				(byte) 0x9F, (byte) 0xA2, (byte) 0xAA, (byte) 0x8E,
				(byte) 0xEF, (byte) 0xD6, (byte) 0xCB, (byte) 0xDA,
				(byte) 0x12, (byte) 0x4C, (byte) 0xBB, (byte) 0x17,
				(byte) 0xA0, (byte) 0xF8, (byte) 0x52, (byte) 0x81,
				(byte) 0x46, (byte) 0x38, (byte) 0x71, (byte) 0x35,
				(byte) 0xE2, (byte) 0x26, (byte) 0xB0, (byte) 0x05,
				(byte) 0xA4, (byte) 0x74, (byte) 0xB9, (byte) 0x06,
				(byte) 0x2F, (byte) 0xF2, (byte) 0x64, (byte) 0xD2,
				(byte) 0xFF, (byte) 0x8E, (byte) 0xFA, (byte) 0x36,
				(byte) 0x81, (byte) 0x4A, (byte) 0xA2, (byte) 0x95,
				(byte) 0x00, (byte) 0x65, (byte) 0xB1, (byte) 0xB0,
				(byte) 0x4C, (byte) 0x0A, (byte) 0x1A, (byte) 0xE9,
				(byte) 0xB2, (byte) 0xF6, (byte) 0x9D, (byte) 0x4A,
				(byte) 0x4A, (byte) 0xA9, (byte) 0x79, (byte) 0xD6,
				(byte) 0xCE, (byte) 0x95, (byte) 0xFE, (byte) 0xE9,
				(byte) 0x48, (byte) 0x5E, (byte) 0xD0, (byte) 0xA0,
				(byte) 0x3A, (byte) 0xEE, (byte) 0x9B, (byte) 0xD9,
				(byte) 0x53, (byte) 0xE8, (byte) 0x1C, (byte) 0xFD,
				(byte) 0x1E, (byte) 0xF6, (byte) 0xE8, (byte) 0x14,
				(byte) 0xDF, (byte) 0xD3, (byte) 0xC2, (byte) 0xCE,
				(byte) 0x37, (byte) 0xAE, (byte) 0xFA, (byte) 0x38,
				(byte) 0xC1, (byte) 0xF9, (byte) 0x87, (byte) 0x73,
				(byte) 0x71, (byte) 0xE9, (byte) 0x1D, (byte) 0x6A,
				(byte) 0x5E, (byte) 0xB5, (byte) 0x9F, (byte) 0xDE,
				(byte) 0xDF, (byte) 0x75, (byte) 0xD3, (byte) 0x32,
				(byte) 0x5F, (byte) 0xA3, (byte) 0xCA, (byte) 0x66,
				(byte) 0xCD, (byte) 0xFB, (byte) 0xA0, (byte) 0xE5,
				(byte) 0x71, (byte) 0x46, (byte) 0xCC, (byte) 0x78,
				(byte) 0x98, (byte) 0x18, (byte) 0xFF, (byte) 0x06,
				(byte) 0xBE, (byte) 0x5F, (byte) 0xCC, (byte) 0x50,
				(byte) 0xAB, (byte) 0xD3, (byte) 0x62, (byte) 0xAE,
				(byte) 0x4B, (byte) 0x80, (byte) 0x99, (byte) 0x6D };
		ExponentLen = (byte)1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xAC, (byte) 0x21, (byte) 0x3A, (byte) 0x2E,
				(byte) 0x0D, (byte) 0x2C, (byte) 0x0C, (byte) 0xA3,
				(byte) 0x5A, (byte) 0xD0, (byte) 0x20, (byte) 0x13,
				(byte) 0x23, (byte) 0x53, (byte) 0x6D, (byte) 0x58,
				(byte) 0x09, (byte) 0x7E, (byte) 0x4E, (byte) 0x57 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x57;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 96;
		Modul = new byte[]{ (byte) 0x94, (byte) 0x2B, (byte) 0x7F, (byte) 0x2B,
				(byte) 0xA5, (byte) 0xEA, (byte) 0x30, (byte) 0x73,
				(byte) 0x12, (byte) 0xB6, (byte) 0x3D, (byte) 0xF7,
				(byte) 0x7C, (byte) 0x52, (byte) 0x43, (byte) 0x61,
				(byte) 0x8A, (byte) 0xCC, (byte) 0x20, (byte) 0x02,
				(byte) 0xBD, (byte) 0x7E, (byte) 0xCB, (byte) 0x74,
				(byte) 0xD8, (byte) 0x21, (byte) 0xFE, (byte) 0x7B,
				(byte) 0xDC, (byte) 0x78, (byte) 0xBF, (byte) 0x28,
				(byte) 0xF4, (byte) 0x9F, (byte) 0x74, (byte) 0x19,
				(byte) 0x0A, (byte) 0xD9, (byte) 0xB2, (byte) 0x3B,
				(byte) 0x97, (byte) 0x13, (byte) 0xB1, (byte) 0x40,
				(byte) 0xFF, (byte) 0xEC, (byte) 0x1F, (byte) 0xB4,
				(byte) 0x29, (byte) 0xD9, (byte) 0x3F, (byte) 0x56,
				(byte) 0xBD, (byte) 0xC7, (byte) 0xAD, (byte) 0xE4,
				(byte) 0xAC, (byte) 0x07, (byte) 0x5D, (byte) 0x75,
				(byte) 0x53, (byte) 0x2C, (byte) 0x1E, (byte) 0x59,
				(byte) 0x0B, (byte) 0x21, (byte) 0x87, (byte) 0x4C,
				(byte) 0x79, (byte) 0x52, (byte) 0xF2, (byte) 0x9B,
				(byte) 0x8C, (byte) 0x0F, (byte) 0x0C, (byte) 0x1C,
				(byte) 0xE3, (byte) 0xAE, (byte) 0xED, (byte) 0xC8,
				(byte) 0xDA, (byte) 0x25, (byte) 0x34, (byte) 0x31,
				(byte) 0x23, (byte) 0xE7, (byte) 0x1D, (byte) 0xCF,
				(byte) 0x86, (byte) 0xC6, (byte) 0x99, (byte) 0x8E,
				(byte) 0x15, (byte) 0xF7, (byte) 0x56, (byte) 0xE3 };
		ExponentLen = (byte) 0x03;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x25, (byte) 0x1A, (byte) 0x5F, (byte) 0x5D,
				(byte) 0xE6, (byte) 0x1C, (byte) 0xF2, (byte) 0x8B,
				(byte) 0x5C, (byte) 0x6E, (byte) 0x2B, (byte) 0x58,
				(byte) 0x07, (byte) 0xC0, (byte) 0x64, (byte) 0x4A,
				(byte) 0x01, (byte) 0xD4, (byte) 0x6F, (byte) 0xF5 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
								Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		//========================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x58;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 200;
		Modul = new byte[]{ (byte) 0x99, (byte) 0x55, (byte) 0x2C, (byte) 0x4A,
				(byte) 0x1E, (byte) 0xCD, (byte) 0x68, (byte) 0xA0,
				(byte) 0x26, (byte) 0x01, (byte) 0x57, (byte) 0xFC,
				(byte) 0x41, (byte) 0x51, (byte) 0xB5, (byte) 0x99,
				(byte) 0x28, (byte) 0x37, (byte) 0x44, (byte) 0x5D,
				(byte) 0x3F, (byte) 0xC5, (byte) 0x73, (byte) 0x65,
				(byte) 0xCA, (byte) 0x56, (byte) 0x92, (byte) 0xC8,
				(byte) 0x7B, (byte) 0xE3, (byte) 0x58, (byte) 0xCD,
				(byte) 0xCD, (byte) 0xF2, (byte) 0xC9, (byte) 0x2F,
				(byte) 0xB6, (byte) 0x83, (byte) 0x75, (byte) 0x22,
				(byte) 0x84, (byte) 0x2A, (byte) 0x48, (byte) 0xEB,
				(byte) 0x11, (byte) 0xCD, (byte) 0xFF, (byte) 0xE2,
				(byte) 0xFD, (byte) 0x91, (byte) 0x77, (byte) 0x0C,
				(byte) 0x72, (byte) 0x21, (byte) 0xE4, (byte) 0xAF,
				(byte) 0x62, (byte) 0x07, (byte) 0xC2, (byte) 0xDE,
				(byte) 0x40, (byte) 0x04, (byte) 0xC7, (byte) 0xDE,
				(byte) 0xE1, (byte) 0xB6, (byte) 0x27, (byte) 0x6D,
				(byte) 0xC6, (byte) 0x2D, (byte) 0x52, (byte) 0xA8,
				(byte) 0x7D, (byte) 0x2C, (byte) 0xD0, (byte) 0x1F,
				(byte) 0xBF, (byte) 0x2D, (byte) 0xC4, (byte) 0x06,
				(byte) 0x5D, (byte) 0xB5, (byte) 0x28, (byte) 0x24,
				(byte) 0xD2, (byte) 0xA2, (byte) 0x16, (byte) 0x7A,
				(byte) 0x06, (byte) 0xD1, (byte) 0x9E, (byte) 0x6A,
				(byte) 0x0F, (byte) 0x78, (byte) 0x10, (byte) 0x71,
				(byte) 0xCD, (byte) 0xB2, (byte) 0xDD, (byte) 0x31,
				(byte) 0x4C, (byte) 0xB9, (byte) 0x44, (byte) 0x41,
				(byte) 0xD8, (byte) 0xDC, (byte) 0x0E, (byte) 0x93,
				(byte) 0x63, (byte) 0x17, (byte) 0xB7, (byte) 0x7B,
				(byte) 0xF0, (byte) 0x6F, (byte) 0x51, (byte) 0x77,
				(byte) 0xF6, (byte) 0xC5, (byte) 0xAB, (byte) 0xA3,
				(byte) 0xA3, (byte) 0xBC, (byte) 0x6A, (byte) 0xA3,
				(byte) 0x02, (byte) 0x09, (byte) 0xC9, (byte) 0x72,
				(byte) 0x60, (byte) 0xB7, (byte) 0xA1, (byte) 0xAD,
				(byte) 0x3A, (byte) 0x19, (byte) 0x2C, (byte) 0x9B,
				(byte) 0x8C, (byte) 0xD1, (byte) 0xD1, (byte) 0x53,
				(byte) 0x57, (byte) 0x0A, (byte) 0xFC, (byte) 0xC8,
				(byte) 0x7C, (byte) 0x3C, (byte) 0xD6, (byte) 0x81,
				(byte) 0xD1, (byte) 0x3E, (byte) 0x99, (byte) 0x7F,
				(byte) 0xE3, (byte) 0x3B, (byte) 0x39, (byte) 0x63,
				(byte) 0xA0, (byte) 0xA1, (byte) 0xC7, (byte) 0x97,
				(byte) 0x72, (byte) 0xAC, (byte) 0xF9, (byte) 0x91,
				(byte) 0x03, (byte) 0x3E, (byte) 0x1B, (byte) 0x83,
				(byte) 0x97, (byte) 0xAD, (byte) 0x03, (byte) 0x41,
				(byte) 0x50, (byte) 0x0E, (byte) 0x48, (byte) 0xA2,
				(byte) 0x47, (byte) 0x70, (byte) 0xBC, (byte) 0x4C,
				(byte) 0xBE, (byte) 0x19, (byte) 0xD2, (byte) 0xCC,
				(byte) 0xF4, (byte) 0x19, (byte) 0x50, (byte) 0x4F,
				(byte) 0xDB, (byte) 0xF0, (byte) 0x38, (byte) 0x9B,
				(byte) 0xC2, (byte) 0xF2, (byte) 0xFD, (byte) 0xCD,
				(byte) 0x4D, (byte) 0x44, (byte) 0xE6, (byte) 0x1F };
		ExponentLen = (byte) 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x75, (byte) 0x3E, (byte) 0xD0, (byte) 0xAA,
				(byte) 0x23, (byte) 0xE4, (byte) 0xCD, (byte) 0x5A,
				(byte) 0xBD, (byte) 0x69, (byte) 0xEA, (byte) 0xE7,
				(byte) 0x90, (byte) 0x4B, (byte) 0x68, (byte) 0x4A,
				(byte) 0x34, (byte) 0xA5, (byte) 0x7C, (byte) 0x22 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
								Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		//========================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x54;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xC6, (byte) 0xDD, (byte) 0xC0, (byte) 0xB7,
				(byte) 0x64, (byte) 0x5F, (byte) 0x7F, (byte) 0x16,
				(byte) 0x28, (byte) 0x6A, (byte) 0xB7, (byte) 0xE4,
				(byte) 0x11, (byte) 0x66, (byte) 0x55, (byte) 0xF5,
				(byte) 0x6D, (byte) 0xD0, (byte) 0xC9, (byte) 0x44,
				(byte) 0x76, (byte) 0x60, (byte) 0x40, (byte) 0xDC,
				(byte) 0x68, (byte) 0x66, (byte) 0x4D, (byte) 0xD9,
				(byte) 0x73, (byte) 0xBD, (byte) 0x3B, (byte) 0xFD,
				(byte) 0x4C, (byte) 0x52, (byte) 0x5B, (byte) 0xCB,
				(byte) 0xB9, (byte) 0x52, (byte) 0x72, (byte) 0xB6,
				(byte) 0xB3, (byte) 0xAD, (byte) 0x9B, (byte) 0xA8,
				(byte) 0x86, (byte) 0x03, (byte) 0x03, (byte) 0xAD,
				(byte) 0x08, (byte) 0xD9, (byte) 0xE8, (byte) 0xCC,
				(byte) 0x34, (byte) 0x4A, (byte) 0x40, (byte) 0x70,
				(byte) 0xF4, (byte) 0xCF, (byte) 0xB9, (byte) 0xEE,
				(byte) 0xAF, (byte) 0x29, (byte) 0xC8, (byte) 0xA3,
				(byte) 0x46, (byte) 0x08, (byte) 0x50, (byte) 0xC2,
				(byte) 0x64, (byte) 0xCD, (byte) 0xA3, (byte) 0x9B,
				(byte) 0xBE, (byte) 0x3A, (byte) 0x7E, (byte) 0x7D,
				(byte) 0x08, (byte) 0xA6, (byte) 0x9C, (byte) 0x31,
				(byte) 0xB5, (byte) 0xC8, (byte) 0xDD, (byte) 0x9F,
				(byte) 0x94, (byte) 0xDD, (byte) 0xBC, (byte) 0x92,
				(byte) 0x65, (byte) 0x75, (byte) 0x8C, (byte) 0x0E,
				(byte) 0x73, (byte) 0x99, (byte) 0xAD, (byte) 0xCF,
				(byte) 0x43, (byte) 0x62, (byte) 0xCA, (byte) 0xEE,
				(byte) 0x45, (byte) 0x8D, (byte) 0x41, (byte) 0x4C,
				(byte) 0x52, (byte) 0xB4, (byte) 0x98, (byte) 0x27,
				(byte) 0x48, (byte) 0x81, (byte) 0xB1, (byte) 0x96,
				(byte) 0xDA, (byte) 0xCC, (byte) 0xA7, (byte) 0x27,
				(byte) 0x3F, (byte) 0x68, (byte) 0x7F, (byte) 0x2A,
				(byte) 0x65, (byte) 0xFA, (byte) 0xEB, (byte) 0x80,
				(byte) 0x9D, (byte) 0x4B, (byte) 0x2A, (byte) 0xC1,
				(byte) 0xD3, (byte) 0xD1, (byte) 0xEF, (byte) 0xB4,
				(byte) 0xF6, (byte) 0x49, (byte) 0x03, (byte) 0x22,
				(byte) 0x31, (byte) 0x8B, (byte) 0xD2, (byte) 0x96,
				(byte) 0xD1, (byte) 0x53, (byte) 0xB3, (byte) 0x07,
				(byte) 0xA3, (byte) 0x28, (byte) 0x3A, (byte) 0xB4,
				(byte) 0xE5, (byte) 0xBE, (byte) 0x6E, (byte) 0xBD,
				(byte) 0x91, (byte) 0x03, (byte) 0x59, (byte) 0xA8,
				(byte) 0x56, (byte) 0x5E, (byte) 0xB9, (byte) 0xC4,
				(byte) 0x36, (byte) 0x0D, (byte) 0x24, (byte) 0xBA,
				(byte) 0xAC, (byte) 0xA3, (byte) 0xDB, (byte) 0xFE,
				(byte) 0x39, (byte) 0x3F, (byte) 0x3D, (byte) 0x6C,
				(byte) 0x83, (byte) 0x0D, (byte) 0x60, (byte) 0x3C,
				(byte) 0x6F, (byte) 0xC1, (byte) 0xE8, (byte) 0x34,
				(byte) 0x09, (byte) 0xDF, (byte) 0xCD, (byte) 0x80,
				(byte) 0xD3, (byte) 0xA3, (byte) 0x3B, (byte) 0xA2,
				(byte) 0x43, (byte) 0x81, (byte) 0x3B, (byte) 0xBB,
				(byte) 0x4C, (byte) 0xEA, (byte) 0xF9, (byte) 0xCB,
				(byte) 0xAB, (byte) 0x6B, (byte) 0x74, (byte) 0xB0,
				(byte) 0x01, (byte) 0x16, (byte) 0xF7, (byte) 0x2A,
				(byte) 0xB2, (byte) 0x78, (byte) 0xA8, (byte) 0x8A,
				(byte) 0x01, (byte) 0x1D, (byte) 0x70, (byte) 0x07,
				(byte) 0x1E, (byte) 0x06, (byte) 0xCA, (byte) 0xB1,
				(byte) 0x40, (byte) 0x64, (byte) 0x64, (byte) 0x38,
				(byte) 0xD9, (byte) 0x86, (byte) 0xD4, (byte) 0x82,
				(byte) 0x81, (byte) 0x62, (byte) 0x4B, (byte) 0x85,
				(byte) 0xB3, (byte) 0xB2, (byte) 0xEB, (byte) 0xB9,
				(byte) 0xA6, (byte) 0xAB, (byte) 0x3B, (byte) 0xF2,
				(byte) 0x17, (byte) 0x8F, (byte) 0xCC, (byte) 0x30,
				(byte) 0x11, (byte) 0xE7, (byte) 0xCA, (byte) 0xF2,
				(byte) 0x48, (byte) 0x97, (byte) 0xAE, (byte) 0x7D };
		ExponentLen = (byte) 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x06, (byte) 0x96, (byte) 0x06, (byte) 0x18,
				(byte) 0x79, (byte) 0x1A, (byte) 0x86, (byte) 0xD3,
				(byte) 0x87, (byte) 0x30, (byte) 0x1E, (byte) 0xDD,
				(byte) 0x4A, (byte) 0x3B, (byte) 0xAF, (byte) 0x2D,
				(byte) 0x34, (byte) 0xFE, (byte) 0xF1, (byte) 0xB4 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));

		//========================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x65 };
		KeyID = (byte) 0x02;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xBB, (byte) 0x7F, (byte) 0x51, (byte) 0x98,
				(byte) 0x3F, (byte) 0xD8, (byte) 0x70, (byte) 0x7F,
				(byte) 0xD6, (byte) 0x22, (byte) 0x7C, (byte) 0x23,
				(byte) 0xDE, (byte) 0xF5, (byte) 0xD5, (byte) 0x37,
				(byte) 0x7A, (byte) 0x5A, (byte) 0x73, (byte) 0x7C,
				(byte) 0xEF, (byte) 0x3C, (byte) 0x52, (byte) 0x52,
				(byte) 0xE5, (byte) 0x78, (byte) 0xEF, (byte) 0xE1,
				(byte) 0x36, (byte) 0xDF, (byte) 0x87, (byte) 0xB5,
				(byte) 0x04, (byte) 0x73, (byte) 0xF9, (byte) 0x34,
				(byte) 0x1F, (byte) 0x16, (byte) 0x40, (byte) 0xC8,
				(byte) 0xD2, (byte) 0x58, (byte) 0x03, (byte) 0x4E,
				(byte) 0x14, (byte) 0xC1, (byte) 0x69, (byte) 0x93,
				(byte) 0xFC, (byte) 0xE6, (byte) 0xC6, (byte) 0xB8,
				(byte) 0xC3, (byte) 0xCE, (byte) 0xEB, (byte) 0x65,
				(byte) 0xFC, (byte) 0x8F, (byte) 0xBC, (byte) 0xD8,
				(byte) 0xEB, (byte) 0x77, (byte) 0xB3, (byte) 0xB0,
				(byte) 0x5A, (byte) 0xC7, (byte) 0xC4, (byte) 0xD0,
				(byte) 0x9E, (byte) 0x0F, (byte) 0xA1, (byte) 0xBA,
				(byte) 0x2E, (byte) 0xFE, (byte) 0x87, (byte) 0xD3,
				(byte) 0x18, (byte) 0x4D, (byte) 0xB6, (byte) 0x71,
				(byte) 0x8A, (byte) 0xE4, (byte) 0x1A, (byte) 0x7C,
				(byte) 0xAD, (byte) 0x89, (byte) 0xB8, (byte) 0xDC,
				(byte) 0xE0, (byte) 0xFE, (byte) 0x80, (byte) 0xCE,
				(byte) 0xB5, (byte) 0x23, (byte) 0xD5, (byte) 0xD6,
				(byte) 0x47, (byte) 0xF9, (byte) 0xDB, (byte) 0x58,
				(byte) 0xA3, (byte) 0x1D, (byte) 0x2E, (byte) 0x71,
				(byte) 0xAC, (byte) 0x67, (byte) 0x7E, (byte) 0x67,
				(byte) 0xFA, (byte) 0x6E, (byte) 0x75, (byte) 0x82,
				(byte) 0x07, (byte) 0x36, (byte) 0xC9, (byte) 0x89,
				(byte) 0x37, (byte) 0x61, (byte) 0xEE, (byte) 0x4A,
				(byte) 0xCD, (byte) 0x11, (byte) 0xF3, (byte) 0x1D,
				(byte) 0xBD, (byte) 0xC3, (byte) 0x49, (byte) 0xEF };
		ExponentLen = (byte) 0x03;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB9, (byte) 0x73, (byte) 0xE9, (byte) 0xF3,
				(byte) 0x77, (byte) 0xB4, (byte) 0x19, (byte) 0xC3,
				(byte) 0x6A, (byte) 0xC9, (byte) 0x69, (byte) 0x6E,
				(byte) 0xD9, (byte) 0x5F, (byte) 0xFB, (byte) 0x25,
				(byte) 0xC8, (byte) 0x02, (byte) 0x06, (byte) 0x87 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));

		//========================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x65 };
		KeyID = (byte) 0x03;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xC9, (byte) 0xE6, (byte) 0xC1, (byte) 0xF3,
				(byte) 0xC6, (byte) 0x94, (byte) 0x9A, (byte) 0x8A,
				(byte) 0x42, (byte) 0xA9, (byte) 0x1F, (byte) 0x8D,
				(byte) 0x02, (byte) 0x24, (byte) 0x13, (byte) 0x2B,
				(byte) 0x28, (byte) 0x65, (byte) 0xE6, (byte) 0xD9,
				(byte) 0x53, (byte) 0xA5, (byte) 0xB5, (byte) 0xA5,
				(byte) 0x4C, (byte) 0xFF, (byte) 0xB0, (byte) 0x41,
				(byte) 0x24, (byte) 0x39, (byte) 0xD5, (byte) 0x4A,
				(byte) 0xEB, (byte) 0xA7, (byte) 0x9E, (byte) 0x9B,
				(byte) 0x39, (byte) 0x9A, (byte) 0x6C, (byte) 0x10,
				(byte) 0x46, (byte) 0x84, (byte) 0xDF, (byte) 0x3F,
				(byte) 0xB7, (byte) 0x27, (byte) 0xC7, (byte) 0xF5,
				(byte) 0x59, (byte) 0x84, (byte) 0xDB, (byte) 0x7A,
				(byte) 0x45, (byte) 0x0E, (byte) 0x6A, (byte) 0xA9,
				(byte) 0x17, (byte) 0xE1, (byte) 0x10, (byte) 0xA7,
				(byte) 0xF2, (byte) 0x34, (byte) 0x3A, (byte) 0x00,
				(byte) 0x24, (byte) 0xD2, (byte) 0x78, (byte) 0x5D,
				(byte) 0x9E, (byte) 0xBE, (byte) 0x09, (byte) 0xF6,
				(byte) 0x01, (byte) 0xD5, (byte) 0x92, (byte) 0x36,
				(byte) 0x2F, (byte) 0xDB, (byte) 0x23, (byte) 0x77,
				(byte) 0x00, (byte) 0xB5, (byte) 0x67, (byte) 0xBA,
				(byte) 0x14, (byte) 0xBB, (byte) 0xE2, (byte) 0xA6,
				(byte) 0xD3, (byte) 0xD2, (byte) 0x3C, (byte) 0xF1,
				(byte) 0x27, (byte) 0x0B, (byte) 0x3D, (byte) 0xD8,
				(byte) 0x22, (byte) 0xB5, (byte) 0x49, (byte) 0x65,
				(byte) 0x49, (byte) 0xBF, (byte) 0x88, (byte) 0x49,
				(byte) 0x48, (byte) 0xF5, (byte) 0x5A, (byte) 0x0D,
				(byte) 0x30, (byte) 0x83, (byte) 0x48, (byte) 0xC4,
				(byte) 0xB7, (byte) 0x23, (byte) 0xBA, (byte) 0xFB,
				(byte) 0x6A, (byte) 0x7F, (byte) 0x39, (byte) 0x75,
				(byte) 0xAC, (byte) 0x39, (byte) 0x7C, (byte) 0xAD,
				(byte) 0x3C, (byte) 0x5D, (byte) 0x0F, (byte) 0xC2,
				(byte) 0xD1, (byte) 0x78, (byte) 0x71, (byte) 0x6F,
				(byte) 0x5E, (byte) 0x8E, (byte) 0x79, (byte) 0xE7,
				(byte) 0x5B, (byte) 0xEB, (byte) 0x1C, (byte) 0x84,
				(byte) 0xFA, (byte) 0x20, (byte) 0x2F, (byte) 0x80,
				(byte) 0xE6, (byte) 0x80, (byte) 0x69, (byte) 0xA9,
				(byte) 0x84, (byte) 0xE0, (byte) 0x08, (byte) 0x70,
				(byte) 0x6B, (byte) 0x30, (byte) 0xC2, (byte) 0x12,
				(byte) 0x30, (byte) 0x54, (byte) 0x56, (byte) 0x20,
				(byte) 0x15, (byte) 0x40, (byte) 0x78, (byte) 0x79,
				(byte) 0x25, (byte) 0xE8, (byte) 0x6A, (byte) 0x8B,
				(byte) 0x28, (byte) 0xB1, (byte) 0x29, (byte) 0xA1,
				(byte) 0x1A, (byte) 0xF2, (byte) 0x04, (byte) 0xB3,
				(byte) 0x87, (byte) 0xCB, (byte) 0x6E, (byte) 0xE4,
				(byte) 0x3D, (byte) 0xB5, (byte) 0x3D, (byte) 0x15,
				(byte) 0xA4, (byte) 0x6E, (byte) 0x13, (byte) 0x90,
				(byte) 0x1B, (byte) 0xEB, (byte) 0xD5, (byte) 0xCE,
				(byte) 0xCF, (byte) 0x48, (byte) 0x54, (byte) 0x25,
				(byte) 0x1D, (byte) 0x9E, (byte) 0x98, (byte) 0x75,
				(byte) 0xB1, (byte) 0x6E, (byte) 0x82, (byte) 0xAD,
				(byte) 0x1C, (byte) 0x59, (byte) 0x38, (byte) 0xA9,
				(byte) 0x72, (byte) 0x84, (byte) 0x2C, (byte) 0x8F,
				(byte) 0x1A, (byte) 0x42, (byte) 0xEB, (byte) 0xB5,
				(byte) 0xAE, (byte) 0x53, (byte) 0x36, (byte) 0xB0,
				(byte) 0x4F, (byte) 0xF3, (byte) 0xDA, (byte) 0x8B,
				(byte) 0x8D, (byte) 0xFB, (byte) 0xE6, (byte) 0x06,
				(byte) 0xFC, (byte) 0xA8, (byte) 0xB9, (byte) 0x08,
				(byte) 0x4E, (byte) 0xE0, (byte) 0x5B, (byte) 0xF6,
				(byte) 0x79, (byte) 0x50, (byte) 0xBA, (byte) 0x89,
				(byte) 0x89, (byte) 0x7C, (byte) 0xD0, (byte) 0x89,
				(byte) 0xF9, (byte) 0x24, (byte) 0xDB, (byte) 0xCD };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x7D, (byte) 0xC4, (byte) 0x35, (byte) 0xDB,
				(byte) 0xDE, (byte) 0x09, (byte) 0x3D, (byte) 0x1F,
				(byte) 0x0A, (byte) 0xD0, (byte) 0xBA, (byte) 0xE0,
				(byte) 0xFE, (byte) 0xA4, (byte) 0xDC, (byte) 0x12,
				(byte) 0x05, (byte) 0x64, (byte) 0x13, (byte) 0xDC };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// VISA 512 bits Test Key 90
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x90;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 64;
		Modul = new byte[]{ (byte) 0xC2, (byte) 0x6B, (byte) 0x3C, (byte) 0xB3,
				(byte) 0x83, (byte) 0x3E, (byte) 0x42, (byte) 0xD8,
				(byte) 0x27, (byte) 0x0D, (byte) 0xC1, (byte) 0x0C,
				(byte) 0x89, (byte) 0x99, (byte) 0xB2, (byte) 0xDA,
				(byte) 0x18, (byte) 0x10, (byte) 0x68, (byte) 0x38,
				(byte) 0x65, (byte) 0x0D, (byte) 0xA0, (byte) 0xDB,
				(byte) 0xF1, (byte) 0x54, (byte) 0xEF, (byte) 0xD5,
				(byte) 0x11, (byte) 0x00, (byte) 0xAD, (byte) 0x14,
				(byte) 0x47, (byte) 0x41, (byte) 0xB2, (byte) 0xA8,
				(byte) 0x7D, (byte) 0x68, (byte) 0x81, (byte) 0xF8,
				(byte) 0x63, (byte) 0x0E, (byte) 0x33, (byte) 0x48,
				(byte) 0xDE, (byte) 0xA3, (byte) 0xF7, (byte) 0x80,
				(byte) 0x38, (byte) 0xE9, (byte) 0xB2, (byte) 0x1A,
				(byte) 0x69, (byte) 0x7E, (byte) 0xB2, (byte) 0xA6,
				(byte) 0x71, (byte) 0x6D, (byte) 0x32, (byte) 0xCB,
				(byte) 0xF2, (byte) 0x60, (byte) 0x86, (byte) 0xF1 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB3, (byte) 0xAE, (byte) 0x2B, (byte) 0xC3,
				(byte) 0xCA, (byte) 0xFC, (byte) 0x05, (byte) 0xEE,
				(byte) 0xEF, (byte) 0xAA, (byte) 0x46, (byte) 0xA2,
				(byte) 0xA4, (byte) 0x7E, (byte) 0xD5, (byte) 0x1D,
				(byte) 0xE6, (byte) 0x79, (byte) 0xF8, (byte) 0x23 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// VISA 1984 bits Test Key 94
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x94;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xD1, (byte) 0xBE, (byte) 0x39, (byte) 0x61,
				(byte) 0x5F, (byte) 0x39, (byte) 0x5A, (byte) 0xC9,
				(byte) 0x33, (byte) 0x7E, (byte) 0x33, (byte) 0x07,
				(byte) 0xAA, (byte) 0x5A, (byte) 0x7A, (byte) 0xC3,
				(byte) 0x5E, (byte) 0xAE, (byte) 0x00, (byte) 0x36,
				(byte) 0xBF, (byte) 0x20, (byte) 0xB9, (byte) 0x2F,
				(byte) 0x9A, (byte) 0x45, (byte) 0xD1, (byte) 0x90,
				(byte) 0xB2, (byte) 0xF4, (byte) 0x61, (byte) 0x6A,
				(byte) 0xBF, (byte) 0x9D, (byte) 0x34, (byte) 0x0C,
				(byte) 0xBF, (byte) 0x5F, (byte) 0xBB, (byte) 0x3A,
				(byte) 0x2B, (byte) 0x94, (byte) 0xBD, (byte) 0x8F,
				(byte) 0x2F, (byte) 0x97, (byte) 0x7C, (byte) 0x0A,
				(byte) 0x10, (byte) 0xB9, (byte) 0x0E, (byte) 0x59,
				(byte) 0xD4, (byte) 0x20, (byte) 0x1A, (byte) 0xA3,
				(byte) 0x26, (byte) 0x69, (byte) 0xE8, (byte) 0xCB,
				(byte) 0xE7, (byte) 0x53, (byte) 0xF5, (byte) 0x36,
				(byte) 0x11, (byte) 0x9D, (byte) 0xF4, (byte) 0xFB,
				(byte) 0x5E, (byte) 0x63, (byte) 0xCE, (byte) 0xD8,
				(byte) 0x7F, (byte) 0x11, (byte) 0x53, (byte) 0xCE,
				(byte) 0x91, (byte) 0x4B, (byte) 0x12, (byte) 0x4F,
				(byte) 0x3E, (byte) 0x6B, (byte) 0x64, (byte) 0x8C,
				(byte) 0xD5, (byte) 0xC9, (byte) 0x76, (byte) 0x55,
				(byte) 0xF7, (byte) 0xAB, (byte) 0x4D, (byte) 0xF6,
				(byte) 0x26, (byte) 0x07, (byte) 0xC9, (byte) 0x5D,
				(byte) 0xA5, (byte) 0x05, (byte) 0x17, (byte) 0xAB,
				(byte) 0x8B, (byte) 0xE3, (byte) 0x83, (byte) 0x66,
				(byte) 0x72, (byte) 0xD1, (byte) 0xC7, (byte) 0x1B,
				(byte) 0xCD, (byte) 0xE9, (byte) 0xBA, (byte) 0x72,
				(byte) 0x93, (byte) 0xFF, (byte) 0x34, (byte) 0x82,
				(byte) 0xF1, (byte) 0x24, (byte) 0xF8, (byte) 0x66,
				(byte) 0x91, (byte) 0x13, (byte) 0x0A, (byte) 0xB0,
				(byte) 0x81, (byte) 0x77, (byte) 0xB0, (byte) 0x2F,
				(byte) 0x45, (byte) 0x9C, (byte) 0x02, (byte) 0x5A,
				(byte) 0x1F, (byte) 0x3D, (byte) 0xFF, (byte) 0xE0,
				(byte) 0x88, (byte) 0x4C, (byte) 0xE7, (byte) 0x81,
				(byte) 0x22, (byte) 0x54, (byte) 0x2E, (byte) 0xA1,
				(byte) 0xC8, (byte) 0xEA, (byte) 0x09, (byte) 0x2B,
				(byte) 0x55, (byte) 0x2B, (byte) 0x58, (byte) 0x69,
				(byte) 0x07, (byte) 0xC8, (byte) 0x3A, (byte) 0xD6,
				(byte) 0x5E, (byte) 0x0C, (byte) 0x6F, (byte) 0x91,
				(byte) 0xA4, (byte) 0x00, (byte) 0xE4, (byte) 0x85,
				(byte) 0xE1, (byte) 0x11, (byte) 0x92, (byte) 0xAA,
				(byte) 0x4C, (byte) 0x17, (byte) 0x1C, (byte) 0x5A,
				(byte) 0x1E, (byte) 0xF5, (byte) 0x63, (byte) 0x81,
				(byte) 0xF4, (byte) 0xD0, (byte) 0x91, (byte) 0xCC,
				(byte) 0x7E, (byte) 0xF6, (byte) 0xBD, (byte) 0x86,
				(byte) 0x04, (byte) 0xCB, (byte) 0xC4, (byte) 0xC7,
				(byte) 0x4D, (byte) 0x5D, (byte) 0x77, (byte) 0xFF,
				(byte) 0xA0, (byte) 0x7B, (byte) 0x64, (byte) 0x1D,
				(byte) 0x53, (byte) 0x99, (byte) 0x8C, (byte) 0xDB,
				(byte) 0x5C, (byte) 0x21, (byte) 0xB7, (byte) 0xBC,
				(byte) 0x65, (byte) 0xE0, (byte) 0x82, (byte) 0xA6,
				(byte) 0x51, (byte) 0x3F, (byte) 0x42, (byte) 0x4A,
				(byte) 0x4B, (byte) 0x25, (byte) 0x2E, (byte) 0x0D,
				(byte) 0x77, (byte) 0xFA, (byte) 0x40, (byte) 0x56,
				(byte) 0x98, (byte) 0x6A, (byte) 0x0A, (byte) 0xB0,
				(byte) 0xCD, (byte) 0xA6, (byte) 0x15, (byte) 0x5E,
				(byte) 0xD9, (byte) 0xA8, (byte) 0x83, (byte) 0xC6,
				(byte) 0x9C, (byte) 0xC2, (byte) 0x99, (byte) 0x2D,
				(byte) 0x49, (byte) 0xEC, (byte) 0xBD, (byte) 0x47,
				(byte) 0x97, (byte) 0xDD, (byte) 0x28, (byte) 0x64,
				(byte) 0xFF, (byte) 0xC9, (byte) 0x6B, (byte) 0x8D };
		ExponentLen = (byte) 0x03;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x1D, (byte) 0x19, (byte) 0x31, (byte) 0x49,
				(byte) 0xFD, (byte) 0x83, (byte) 0xDC, (byte) 0xB3,
				(byte) 0x37, (byte) 0xF4, (byte) 0xA1, (byte) 0xB5,
				(byte) 0xCF, (byte) 0xAA, (byte) 0x14, (byte) 0x4D,
				(byte) 0x06, (byte) 0x6B, (byte) 0x66, (byte) 0xFB };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// VISA 1152 bits Test Key 95
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x95;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xBE, (byte) 0x9E, (byte) 0x1F, (byte) 0xA5,
				(byte) 0xE9, (byte) 0xA8, (byte) 0x03, (byte) 0x85,
				(byte) 0x29, (byte) 0x99, (byte) 0xC4, (byte) 0xAB,
				(byte) 0x43, (byte) 0x2D, (byte) 0xB2, (byte) 0x86,
				(byte) 0x00, (byte) 0xDC, (byte) 0xD9, (byte) 0xDA,
				(byte) 0xB7, (byte) 0x6D, (byte) 0xFA, (byte) 0xAA,
				(byte) 0x47, (byte) 0x35, (byte) 0x5A, (byte) 0x0F,
				(byte) 0xE3, (byte) 0x7B, (byte) 0x15, (byte) 0x08,
				(byte) 0xAC, (byte) 0x6B, (byte) 0xF3, (byte) 0x88,
				(byte) 0x60, (byte) 0xD3, (byte) 0xC6, (byte) 0xC2,
				(byte) 0xE5, (byte) 0xB1, (byte) 0x2A, (byte) 0x3C,
				(byte) 0xAA, (byte) 0xF2, (byte) 0xA7, (byte) 0x00,
				(byte) 0x5A, (byte) 0x72, (byte) 0x41, (byte) 0xEB,
				(byte) 0xAA, (byte) 0x77, (byte) 0x71, (byte) 0x11,
				(byte) 0x2C, (byte) 0x74, (byte) 0xCF, (byte) 0x9A,
				(byte) 0x06, (byte) 0x34, (byte) 0x65, (byte) 0x2F,
				(byte) 0xBC, (byte) 0xA0, (byte) 0xE5, (byte) 0x98,
				(byte) 0x0C, (byte) 0x54, (byte) 0xA6, (byte) 0x47,
				(byte) 0x61, (byte) 0xEA, (byte) 0x10, (byte) 0x1A,
				(byte) 0x11, (byte) 0x4E, (byte) 0x0F, (byte) 0x0B,
				(byte) 0x55, (byte) 0x72, (byte) 0xAD, (byte) 0xD5,
				(byte) 0x7D, (byte) 0x01, (byte) 0x0B, (byte) 0x7C,
				(byte) 0x9C, (byte) 0x88, (byte) 0x7E, (byte) 0x10,
				(byte) 0x4C, (byte) 0xA4, (byte) 0xEE, (byte) 0x12,
				(byte) 0x72, (byte) 0xDA, (byte) 0x66, (byte) 0xD9,
				(byte) 0x97, (byte) 0xB9, (byte) 0xA9, (byte) 0x0B,
				(byte) 0x5A, (byte) 0x6D, (byte) 0x62, (byte) 0x4A,
				(byte) 0xB6, (byte) 0xC5, (byte) 0x7E, (byte) 0x73,
				(byte) 0xC8, (byte) 0xF9, (byte) 0x19, (byte) 0x00,
				(byte) 0x0E, (byte) 0xB5, (byte) 0xF6, (byte) 0x84,
				(byte) 0x89, (byte) 0x8E, (byte) 0xF8, (byte) 0xC3,
				(byte) 0xDB, (byte) 0xEF, (byte) 0xB3, (byte) 0x30,
				(byte) 0xC6, (byte) 0x26, (byte) 0x60, (byte) 0xBE,
				(byte) 0xD8, (byte) 0x8E, (byte) 0xA7, (byte) 0x8E,
				(byte) 0x90, (byte) 0x9A, (byte) 0xFF, (byte) 0x05,
				(byte) 0xF6, (byte) 0xDA, (byte) 0x62, (byte) 0x7B };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xEE, (byte) 0x15, (byte) 0x11, (byte) 0xCE,
				(byte) 0xC7, (byte) 0x10, (byte) 0x20, (byte) 0xA9,
				(byte) 0xB9, (byte) 0x04, (byte) 0x43, (byte) 0xB3,
				(byte) 0x7B, (byte) 0x1D, (byte) 0x5F, (byte) 0x6E,
				(byte) 0x70, (byte) 0x30, (byte) 0x30, (byte) 0xF6 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));

		// VISA 1024 bits Test Key 96
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x03 };
		KeyID = (byte) 0x96;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xB7, (byte) 0x45, (byte) 0x86, (byte) 0xD1,
				(byte) 0x9A, (byte) 0x20, (byte) 0x7B, (byte) 0xE6,
				(byte) 0x62, (byte) 0x7C, (byte) 0x5B, (byte) 0x0A,
				(byte) 0xAF, (byte) 0xBC, (byte) 0x44, (byte) 0xA2,
				(byte) 0xEC, (byte) 0xF5, (byte) 0xA2, (byte) 0x94,
				(byte) 0x2D, (byte) 0x3A, (byte) 0x26, (byte) 0xCE,
				(byte) 0x19, (byte) 0xC4, (byte) 0xFF, (byte) 0xAE,
				(byte) 0xEE, (byte) 0x92, (byte) 0x05, (byte) 0x21,
				(byte) 0x86, (byte) 0x89, (byte) 0x22, (byte) 0xE8,
				(byte) 0x93, (byte) 0xE7, (byte) 0x83, (byte) 0x82,
				(byte) 0x25, (byte) 0xA3, (byte) 0x94, (byte) 0x7A,
				(byte) 0x26, (byte) 0x14, (byte) 0x79, (byte) 0x6F,
				(byte) 0xB2, (byte) 0xC0, (byte) 0x62, (byte) 0x8C,
				(byte) 0xE8, (byte) 0xC1, (byte) 0x1E, (byte) 0x38,
				(byte) 0x25, (byte) 0xA5, (byte) 0x6D, (byte) 0x3B,
				(byte) 0x1B, (byte) 0xBA, (byte) 0xEF, (byte) 0x78,
				(byte) 0x3A, (byte) 0x5C, (byte) 0x6A, (byte) 0x81,
				(byte) 0xF3, (byte) 0x6F, (byte) 0x86, (byte) 0x25,
				(byte) 0x39, (byte) 0x51, (byte) 0x26, (byte) 0xFA,
				(byte) 0x98, (byte) 0x3C, (byte) 0x52, (byte) 0x16,
				(byte) 0xD3, (byte) 0x16, (byte) 0x6D, (byte) 0x48,
				(byte) 0xAC, (byte) 0xDE, (byte) 0x8A, (byte) 0x43,
				(byte) 0x12, (byte) 0x12, (byte) 0xFF, (byte) 0x76,
				(byte) 0x3A, (byte) 0x7F, (byte) 0x79, (byte) 0xD9,
				(byte) 0xED, (byte) 0xB7, (byte) 0xFE, (byte) 0xD7,
				(byte) 0x6B, (byte) 0x48, (byte) 0x5D, (byte) 0xE4,
				(byte) 0x5B, (byte) 0xEB, (byte) 0x82, (byte) 0x9A,
				(byte) 0x3D, (byte) 0x47, (byte) 0x30, (byte) 0x84,
				(byte) 0x8A, (byte) 0x36, (byte) 0x6D, (byte) 0x33,
				(byte) 0x24, (byte) 0xC3, (byte) 0x02, (byte) 0x70,
				(byte) 0x32, (byte) 0xFF, (byte) 0x8D, (byte) 0x16,
				(byte) 0xA1, (byte) 0xE4, (byte) 0x4D, (byte) 0x8D };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x76, (byte) 0x16, (byte) 0xE9, (byte) 0xAC,
				(byte) 0x8B, (byte) 0xE0, (byte) 0x14, (byte) 0xAF,
				(byte) 0x88, (byte) 0xCA, (byte) 0x11, (byte) 0xA8,
				(byte) 0xFB, (byte) 0x17, (byte) 0x96, (byte) 0x7B,
				(byte) 0x73, (byte) 0x94, (byte) 0x03, (byte) 0x0E };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));

		// VISA 768 bits Test Key 97
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x97;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 96;
		Modul = new byte[]{ (byte) 0xAF, (byte) 0x07, (byte) 0x54, (byte) 0xEA,
				(byte) 0xED, (byte) 0x97, (byte) 0x70, (byte) 0x43,
				(byte) 0xAB, (byte) 0x6F, (byte) 0x41, (byte) 0xD6,
				(byte) 0x31, (byte) 0x2A, (byte) 0xB1, (byte) 0xE2,
				(byte) 0x2A, (byte) 0x68, (byte) 0x09, (byte) 0x17,
				(byte) 0x5B, (byte) 0xEB, (byte) 0x28, (byte) 0xE7,
				(byte) 0x0D, (byte) 0x5F, (byte) 0x99, (byte) 0xB2,
				(byte) 0xDF, (byte) 0x18, (byte) 0xCA, (byte) 0xE7,
				(byte) 0x35, (byte) 0x19, (byte) 0x34, (byte) 0x1B,
				(byte) 0xBB, (byte) 0xD3, (byte) 0x27, (byte) 0xD0,
				(byte) 0xB8, (byte) 0xBE, (byte) 0x9D, (byte) 0x4D,
				(byte) 0x0E, (byte) 0x15, (byte) 0xF0, (byte) 0x7D,
				(byte) 0x36, (byte) 0xEA, (byte) 0x3E, (byte) 0x3A,
				(byte) 0x05, (byte) 0xC8, (byte) 0x92, (byte) 0xF5,
				(byte) 0xB1, (byte) 0x9A, (byte) 0x3E, (byte) 0x9D,
				(byte) 0x34, (byte) 0x13, (byte) 0xB0, (byte) 0xD9,
				(byte) 0x7E, (byte) 0x7A, (byte) 0xD1, (byte) 0x0A,
				(byte) 0x5F, (byte) 0x5D, (byte) 0xE8, (byte) 0xE3,
				(byte) 0x88, (byte) 0x60, (byte) 0xC0, (byte) 0xAD,
				(byte) 0x00, (byte) 0x4B, (byte) 0x1E, (byte) 0x06,
				(byte) 0xF4, (byte) 0x04, (byte) 0x0C, (byte) 0x29,
				(byte) 0x5A, (byte) 0xCB, (byte) 0x45, (byte) 0x7A,
				(byte) 0x78, (byte) 0x85, (byte) 0x51, (byte) 0xB6,
				(byte) 0x12, (byte) 0x7C, (byte) 0x0B, (byte) 0x29 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x80, (byte) 0x01, (byte) 0xCA, (byte) 0x76,
				(byte) 0xC1, (byte) 0x20, (byte) 0x39, (byte) 0x55,
				(byte) 0xE2, (byte) 0xC6, (byte) 0x28, (byte) 0x41,
				(byte) 0xCD, (byte) 0x6F, (byte) 0x20, (byte) 0x10,
				(byte) 0x87, (byte) 0xE5, (byte) 0x64, (byte) 0xBF };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));

		// VISA 896 bits Test Key 98
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x98;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 112;
		Modul = new byte[]{ (byte) 0xCA, (byte) 0x02, (byte) 0x6E, (byte) 0x52,
				(byte) 0xA6, (byte) 0x95, (byte) 0xE7, (byte) 0x2B,
				(byte) 0xD3, (byte) 0x0A, (byte) 0xF9, (byte) 0x28,
				(byte) 0x19, (byte) 0x6E, (byte) 0xED, (byte) 0xC9,
				(byte) 0xFA, (byte) 0xF4, (byte) 0xA6, (byte) 0x19,
				(byte) 0xF2, (byte) 0x49, (byte) 0x2E, (byte) 0x3F,
				(byte) 0xB3, (byte) 0x11, (byte) 0x69, (byte) 0x78,
				(byte) 0x9C, (byte) 0x27, (byte) 0x6F, (byte) 0xFB,
				(byte) 0xB7, (byte) 0xD4, (byte) 0x31, (byte) 0x16,
				(byte) 0x64, (byte) 0x7B, (byte) 0xA9, (byte) 0xE0,
				(byte) 0xD1, (byte) 0x06, (byte) 0xA3, (byte) 0x54,
				(byte) 0x2E, (byte) 0x39, (byte) 0x65, (byte) 0x29,
				(byte) 0x2C, (byte) 0xF7, (byte) 0x78, (byte) 0x23,
				(byte) 0xDD, (byte) 0x34, (byte) 0xCA, (byte) 0x8E,
				(byte) 0xEC, (byte) 0x7D, (byte) 0xE3, (byte) 0x67,
				(byte) 0xE0, (byte) 0x80, (byte) 0x70, (byte) 0x89,
				(byte) 0x50, (byte) 0x77, (byte) 0xC7, (byte) 0xEF,
				(byte) 0xAD, (byte) 0x93, (byte) 0x99, (byte) 0x24,
				(byte) 0xCB, (byte) 0x18, (byte) 0x70, (byte) 0x67,
				(byte) 0xDB, (byte) 0xF9, (byte) 0x2C, (byte) 0xB1,
				(byte) 0xE7, (byte) 0x85, (byte) 0x91, (byte) 0x7B,
				(byte) 0xD3, (byte) 0x8B, (byte) 0xAC, (byte) 0xE0,
				(byte) 0xC1, (byte) 0x94, (byte) 0xCA, (byte) 0x12,
				(byte) 0xDF, (byte) 0x0C, (byte) 0xE5, (byte) 0xB7,
				(byte) 0xA5, (byte) 0x02, (byte) 0x75, (byte) 0xAC,
				(byte) 0x61, (byte) 0xBE, (byte) 0x7C, (byte) 0x3B,
				(byte) 0x43, (byte) 0x68, (byte) 0x87, (byte) 0xCA,
				(byte) 0x98, (byte) 0xC9, (byte) 0xFD, (byte) 0x39 };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xE7, (byte) 0xAC, (byte) 0x9A, (byte) 0xA8,
				(byte) 0xEE, (byte) 0xD1, (byte) 0xB5, (byte) 0xFF,
				(byte) 0x1B, (byte) 0xD5, (byte) 0x32, (byte) 0xCF,
				(byte) 0x14, (byte) 0x89, (byte) 0xA3, (byte) 0xE5,
				(byte) 0x55, (byte) 0x75, (byte) 0x72, (byte) 0xC1 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// VISA 1024 bits Test Key 99
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x99;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xAB, (byte) 0x79, (byte) 0xFC, (byte) 0xC9,
				(byte) 0x52, (byte) 0x08, (byte) 0x96, (byte) 0x96,
				(byte) 0x7E, (byte) 0x77, (byte) 0x6E, (byte) 0x64,
				(byte) 0x44, (byte) 0x4E, (byte) 0x5D, (byte) 0xCD,
				(byte) 0xD6, (byte) 0xE1, (byte) 0x36, (byte) 0x11,
				(byte) 0x87, (byte) 0x4F, (byte) 0x39, (byte) 0x85,
				(byte) 0x72, (byte) 0x25, (byte) 0x20, (byte) 0x42,
				(byte) 0x52, (byte) 0x95, (byte) 0xEE, (byte) 0xA4,
				(byte) 0xBD, (byte) 0x0C, (byte) 0x27, (byte) 0x81,
				(byte) 0xDE, (byte) 0x7F, (byte) 0x31, (byte) 0xCD,
				(byte) 0x3D, (byte) 0x04, (byte) 0x1F, (byte) 0x56,
				(byte) 0x5F, (byte) 0x74, (byte) 0x73, (byte) 0x06,
				(byte) 0xEE, (byte) 0xD6, (byte) 0x29, (byte) 0x54,
				(byte) 0xB1, (byte) 0x7E, (byte) 0xDA, (byte) 0xBA,
				(byte) 0x3A, (byte) 0x6C, (byte) 0x5B, (byte) 0x85,
				(byte) 0xA1, (byte) 0xDE, (byte) 0x1B, (byte) 0xEB,
				(byte) 0x9A, (byte) 0x34, (byte) 0x14, (byte) 0x1A,
				(byte) 0xF3, (byte) 0x8F, (byte) 0xCF, (byte) 0x82,
				(byte) 0x79, (byte) 0xC9, (byte) 0xDE, (byte) 0xA0,
				(byte) 0xD5, (byte) 0xA6, (byte) 0x71, (byte) 0x0D,
				(byte) 0x08, (byte) 0xDB, (byte) 0x41, (byte) 0x24,
				(byte) 0xF0, (byte) 0x41, (byte) 0x94, (byte) 0x55,
				(byte) 0x87, (byte) 0xE2, (byte) 0x03, (byte) 0x59,
				(byte) 0xBA, (byte) 0xB4, (byte) 0x7B, (byte) 0x75,
				(byte) 0x75, (byte) 0xAD, (byte) 0x94, (byte) 0x26,
				(byte) 0x2D, (byte) 0x4B, (byte) 0x25, (byte) 0xF2,
				(byte) 0x64, (byte) 0xAF, (byte) 0x33, (byte) 0xDE,
				(byte) 0xDC, (byte) 0xF2, (byte) 0x8E, (byte) 0x09,
				(byte) 0x61, (byte) 0x5E, (byte) 0x93, (byte) 0x7D,
				(byte) 0xE3, (byte) 0x2E, (byte) 0xDC, (byte) 0x03,
				(byte) 0xC5, (byte) 0x44, (byte) 0x45, (byte) 0xFE,
				(byte) 0x7E, (byte) 0x38, (byte) 0x27, (byte) 0x77 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x4A, (byte) 0xBF, (byte) 0xFD, (byte) 0x6B,
				(byte) 0x1C, (byte) 0x51, (byte) 0x21, (byte) 0x2D,
				(byte) 0x05, (byte) 0x55, (byte) 0x2E, (byte) 0x43,
				(byte) 0x1C, (byte) 0x5B, (byte) 0x17, (byte) 0x00,
				(byte) 0x7D, (byte) 0x2F, (byte) 0x5E, (byte) 0x6D };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// VISA 1024 bits Live Key 01
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x01;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xC6, (byte) 0x96, (byte) 0x03, (byte) 0x42,
				(byte) 0x13, (byte) 0xD7, (byte) 0xD8, (byte) 0x54,
				(byte) 0x69, (byte) 0x84, (byte) 0x57, (byte) 0x9D,
				(byte) 0x1D, (byte) 0x0F, (byte) 0x0E, (byte) 0xA5,
				(byte) 0x19, (byte) 0xCF, (byte) 0xF8, (byte) 0xDE,
				(byte) 0xFF, (byte) 0xC4, (byte) 0x29, (byte) 0x35,
				(byte) 0x4C, (byte) 0xF3, (byte) 0xA8, (byte) 0x71,
				(byte) 0xA6, (byte) 0xF7, (byte) 0x18, (byte) 0x3F,
				(byte) 0x12, (byte) 0x28, (byte) 0xDA, (byte) 0x5C,
				(byte) 0x74, (byte) 0x70, (byte) 0xC0, (byte) 0x55,
				(byte) 0x38, (byte) 0x71, (byte) 0x00, (byte) 0xCB,
				(byte) 0x93, (byte) 0x5A, (byte) 0x71, (byte) 0x2C,
				(byte) 0x4E, (byte) 0x28, (byte) 0x64, (byte) 0xDF,
				(byte) 0x5D, (byte) 0x64, (byte) 0xBA, (byte) 0x93,
				(byte) 0xFE, (byte) 0x7E, (byte) 0x63, (byte) 0xE7,
				(byte) 0x1F, (byte) 0x25, (byte) 0xB1, (byte) 0xE5,
				(byte) 0xF5, (byte) 0x29, (byte) 0x85, (byte) 0x75,
				(byte) 0xEB, (byte) 0xE1, (byte) 0xC6, (byte) 0x3A,
				(byte) 0xA6, (byte) 0x17, (byte) 0x70, (byte) 0x69,
				(byte) 0x17, (byte) 0x91, (byte) 0x1D, (byte) 0xC2,
				(byte) 0xA7, (byte) 0x5A, (byte) 0xC2, (byte) 0x8B,
				(byte) 0x25, (byte) 0x1C, (byte) 0x7E, (byte) 0xF4,
				(byte) 0x0F, (byte) 0x23, (byte) 0x65, (byte) 0x91,
				(byte) 0x24, (byte) 0x90, (byte) 0xB9, (byte) 0x39,
				(byte) 0xBC, (byte) 0xA2, (byte) 0x12, (byte) 0x4A,
				(byte) 0x30, (byte) 0xA2, (byte) 0x8F, (byte) 0x54,
				(byte) 0x40, (byte) 0x2C, (byte) 0x34, (byte) 0xAE,
				(byte) 0xCA, (byte) 0x33, (byte) 0x1A, (byte) 0xB6,
				(byte) 0x7E, (byte) 0x1E, (byte) 0x79, (byte) 0xB2,
				(byte) 0x85, (byte) 0xDD, (byte) 0x57, (byte) 0x71,
				(byte) 0xB5, (byte) 0xD9, (byte) 0xFF, (byte) 0x79,
				(byte) 0xEA, (byte) 0x63, (byte) 0x0B, (byte) 0x75 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xD3, (byte) 0x4A, (byte) 0x6A, (byte) 0x77,
				(byte) 0x60, (byte) 0x11, (byte) 0xC7, (byte) 0xE7,
				(byte) 0xCE, (byte) 0x3A, (byte) 0xEC, (byte) 0x5F,
				(byte) 0x03, (byte) 0xAD, (byte) 0x2F, (byte) 0x8C,
				(byte) 0xFC, (byte) 0x55, (byte) 0x03, (byte) 0xCC };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// VISA 896 bits Live Key 03
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x03;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 112;
		Modul = new byte[]{ (byte) 0xB3, (byte) 0xE5, (byte) 0xE6, (byte) 0x67,
				(byte) 0x50, (byte) 0x6C, (byte) 0x47, (byte) 0xCA,
				(byte) 0xAF, (byte) 0xB1, (byte) 0x2A, (byte) 0x26,
				(byte) 0x33, (byte) 0x81, (byte) 0x93, (byte) 0x50,
				(byte) 0x84, (byte) 0x66, (byte) 0x97, (byte) 0xDD,
				(byte) 0x65, (byte) 0xA7, (byte) 0x96, (byte) 0xE5,
				(byte) 0xCE, (byte) 0x77, (byte) 0xC5, (byte) 0x7C,
				(byte) 0x62, (byte) 0x6A, (byte) 0x66, (byte) 0xF7,
				(byte) 0x0B, (byte) 0xB6, (byte) 0x30, (byte) 0x91,
				(byte) 0x16, (byte) 0x12, (byte) 0xAD, (byte) 0x28,
				(byte) 0x32, (byte) 0x90, (byte) 0x9B, (byte) 0x80,
				(byte) 0x62, (byte) 0x29, (byte) 0x1B, (byte) 0xEC,
				(byte) 0xA4, (byte) 0x6C, (byte) 0xD3, (byte) 0x3B,
				(byte) 0x66, (byte) 0xA6, (byte) 0xF9, (byte) 0xC9,
				(byte) 0xD4, (byte) 0x8C, (byte) 0xED, (byte) 0x8B,
				(byte) 0x4F, (byte) 0xC8, (byte) 0x56, (byte) 0x1C,
				(byte) 0x8A, (byte) 0x1D, (byte) 0x8F, (byte) 0xB1,
				(byte) 0x58, (byte) 0x62, (byte) 0xC9, (byte) 0xEB,
				(byte) 0x60, (byte) 0x17, (byte) 0x8D, (byte) 0xEA,
				(byte) 0x2B, (byte) 0xE1, (byte) 0xF8, (byte) 0x22,
				(byte) 0x36, (byte) 0xFF, (byte) 0xCF, (byte) 0xF4,
				(byte) 0xF3, (byte) 0x84, (byte) 0x3C, (byte) 0x27,
				(byte) 0x21, (byte) 0x79, (byte) 0xDC, (byte) 0xDD,
				(byte) 0x38, (byte) 0x4D, (byte) 0x54, (byte) 0x10,
				(byte) 0x53, (byte) 0xDA, (byte) 0x6A, (byte) 0x6A,
				(byte) 0x0D, (byte) 0x3C, (byte) 0xE4, (byte) 0x8F,
				(byte) 0xDC, (byte) 0x2D, (byte) 0xC4, (byte) 0xE3,
				(byte) 0xE0, (byte) 0xEE, (byte) 0xE1, (byte) 0x5F };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xFE, (byte) 0x70, (byte) 0xAB, (byte) 0x3B,
				(byte) 0x4D, (byte) 0x5A, (byte) 0x1B, (byte) 0x99,
				(byte) 0x24, (byte) 0x22, (byte) 0x8A, (byte) 0xDF,
				(byte) 0x80, (byte) 0x27, (byte) 0xC7, (byte) 0x58,
				(byte) 0x48, (byte) 0x3A, (byte) 0x8B, (byte) 0x7E };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// VISA 768 bits Live Key 05
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x05;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 96;
		Modul = new byte[]{ (byte) 0xD0, (byte) 0x13, (byte) 0x5C, (byte) 0xE8,
				(byte) 0xA4, (byte) 0x43, (byte) 0x6C, (byte) 0x7F,
				(byte) 0x9D, (byte) 0x5C, (byte) 0xC6, (byte) 0x65,
				(byte) 0x47, (byte) 0xE3, (byte) 0x0E, (byte) 0xA4,
				(byte) 0x02, (byte) 0xF9, (byte) 0x81, (byte) 0x05,
				(byte) 0xB7, (byte) 0x17, (byte) 0x22, (byte) 0xE2,
				(byte) 0x4B, (byte) 0xC0, (byte) 0x8D, (byte) 0xCC,
				(byte) 0x80, (byte) 0xAB, (byte) 0x7E, (byte) 0x71,
				(byte) 0xEC, (byte) 0x23, (byte) 0xB8, (byte) 0xCE,
				(byte) 0x6A, (byte) 0x1D, (byte) 0xC6, (byte) 0xAC,
				(byte) 0x2A, (byte) 0x8C, (byte) 0xF5, (byte) 0x55,
				(byte) 0x43, (byte) 0xD7, (byte) 0x4A, (byte) 0x8A,
				(byte) 0xE7, (byte) 0xB3, (byte) 0x88, (byte) 0xF9,
				(byte) 0xB1, (byte) 0x74, (byte) 0xB7, (byte) 0xF0,
				(byte) 0xD7, (byte) 0x56, (byte) 0xC2, (byte) 0x2C,
				(byte) 0xBB, (byte) 0x59, (byte) 0x74, (byte) 0xF9,
				(byte) 0x01, (byte) 0x6A, (byte) 0x56, (byte) 0xB6,
				(byte) 0x01, (byte) 0xCC, (byte) 0xA6, (byte) 0x4C,
				(byte) 0x71, (byte) 0xF0, (byte) 0x4B, (byte) 0x78,
				(byte) 0xE8, (byte) 0x6C, (byte) 0x50, (byte) 0x1B,
				(byte) 0x19, (byte) 0x3A, (byte) 0x55, (byte) 0x56,
				(byte) 0xD5, (byte) 0x38, (byte) 0x9E, (byte) 0xCE,
				(byte) 0x4D, (byte) 0xEA, (byte) 0x25, (byte) 0x8A,
				(byte) 0xB9, (byte) 0x7F, (byte) 0x52, (byte) 0xA3 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x86, (byte) 0xDF, (byte) 0x04, (byte) 0x1E,
				(byte) 0x79, (byte) 0x95, (byte) 0x02, (byte) 0x35,
				(byte) 0x52, (byte) 0xA7, (byte) 0x9E, (byte) 0x26,
				(byte) 0x23, (byte) 0xE4, (byte) 0x91, (byte) 0x80,
				(byte) 0xC0, (byte) 0xCD, (byte) 0x95, (byte) 0x7A };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// VISA 1152 bits Live Key 07
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x03 };
		KeyID = (byte) 0x07;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xA8, (byte) 0x9F, (byte) 0x25, (byte) 0xA5,
				(byte) 0x6F, (byte) 0xA6, (byte) 0xDA, (byte) 0x25,
				(byte) 0x8C, (byte) 0x8C, (byte) 0xA8, (byte) 0xB4,
				(byte) 0x04, (byte) 0x27, (byte) 0xD9, (byte) 0x27,
				(byte) 0xB4, (byte) 0xA1, (byte) 0xEB, (byte) 0x4D,
				(byte) 0x7E, (byte) 0xA3, (byte) 0x26, (byte) 0xBB,
				(byte) 0xB1, (byte) 0x2F, (byte) 0x97, (byte) 0xDE,
				(byte) 0xD7, (byte) 0x0A, (byte) 0xE5, (byte) 0xE4,
				(byte) 0x48, (byte) 0x0F, (byte) 0xC9, (byte) 0xC5,
				(byte) 0xE8, (byte) 0xA9, (byte) 0x72, (byte) 0x17,
				(byte) 0x71, (byte) 0x10, (byte) 0xA1, (byte) 0xCC,
				(byte) 0x31, (byte) 0x8D, (byte) 0x06, (byte) 0xD2,
				(byte) 0xF8, (byte) 0xF5, (byte) 0xC4, (byte) 0x84,
				(byte) 0x4A, (byte) 0xC5, (byte) 0xFA, (byte) 0x79,
				(byte) 0xA4, (byte) 0xDC, (byte) 0x47, (byte) 0x0B,
				(byte) 0xB1, (byte) 0x1E, (byte) 0xD6, (byte) 0x35,
				(byte) 0x69, (byte) 0x9C, (byte) 0x17, (byte) 0x08,
				(byte) 0x1B, (byte) 0x90, (byte) 0xF1, (byte) 0xB9,
				(byte) 0x84, (byte) 0xF1, (byte) 0x2E, (byte) 0x92,
				(byte) 0xC1, (byte) 0xC5, (byte) 0x29, (byte) 0x27,
				(byte) 0x6D, (byte) 0x8A, (byte) 0xF8, (byte) 0xEC,
				(byte) 0x7F, (byte) 0x28, (byte) 0x49, (byte) 0x20,
				(byte) 0x97, (byte) 0xD8, (byte) 0xCD, (byte) 0x5B,
				(byte) 0xEC, (byte) 0xEA, (byte) 0x16, (byte) 0xFE,
				(byte) 0x40, (byte) 0x88, (byte) 0xF6, (byte) 0xCF,
				(byte) 0xAB, (byte) 0x4A, (byte) 0x1B, (byte) 0x42,
				(byte) 0x32, (byte) 0x8A, (byte) 0x1B, (byte) 0x99,
				(byte) 0x6F, (byte) 0x92, (byte) 0x78, (byte) 0xB0,
				(byte) 0xB7, (byte) 0xE3, (byte) 0x31, (byte) 0x1C,
				(byte) 0xA5, (byte) 0xEF, (byte) 0x85, (byte) 0x6C,
				(byte) 0x2F, (byte) 0x88, (byte) 0x84, (byte) 0x74,
				(byte) 0xB8, (byte) 0x36, (byte) 0x12, (byte) 0xA8,
				(byte) 0x2E, (byte) 0x4E, (byte) 0x00, (byte) 0xD0,
				(byte) 0xCD, (byte) 0x40, (byte) 0x69, (byte) 0xA6,
				(byte) 0x78, (byte) 0x31, (byte) 0x40, (byte) 0x43,
				(byte) 0x3D, (byte) 0x50, (byte) 0x72, (byte) 0x5F };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB4, (byte) 0xBC, (byte) 0x56, (byte) 0xCC,
				(byte) 0x4E, (byte) 0x88, (byte) 0x32, (byte) 0x49,
				(byte) 0x32, (byte) 0xCB, (byte) 0xC6, (byte) 0x43,
				(byte) 0xD6, (byte) 0x89, (byte) 0x8F, (byte) 0x6F,
				(byte) 0xE5, (byte) 0x93, (byte) 0xB1, (byte) 0x72 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));

		// Modified from old 1152 bits key to new one on Feb 6,2004.
		// Mastercard 896 bits Live Key 02
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = (byte) 0x02;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 112;
		Modul = new byte[]{ (byte) 0xCF, (byte) 0x42, (byte) 0x64, (byte) 0xE1,
				(byte) 0x70, (byte) 0x2D, (byte) 0x34, (byte) 0xCA,
				(byte) 0x89, (byte) 0x7D, (byte) 0x1F, (byte) 0x9B,
				(byte) 0x66, (byte) 0xC5, (byte) 0xD6, (byte) 0x36,
				(byte) 0x91, (byte) 0xEA, (byte) 0xCC, (byte) 0x61,
				(byte) 0x2C, (byte) 0x8F, (byte) 0x14, (byte) 0x71,
				(byte) 0x16, (byte) 0xBB, (byte) 0x22, (byte) 0xD0,
				(byte) 0xC4, (byte) 0x63, (byte) 0x49, (byte) 0x5B,
				(byte) 0xD5, (byte) 0xBA, (byte) 0x70, (byte) 0xFB,
				(byte) 0x15, (byte) 0x38, (byte) 0x48, (byte) 0x89,
				(byte) 0x52, (byte) 0x20, (byte) 0xB8, (byte) 0xAD,
				(byte) 0xEE, (byte) 0xC3, (byte) 0xE7, (byte) 0xBA,
				(byte) 0xB3, (byte) 0x1E, (byte) 0xA2, (byte) 0x2C,
				(byte) 0x1D, (byte) 0xC9, (byte) 0x97, (byte) 0x2F,
				(byte) 0xA0, (byte) 0x27, (byte) 0xD5, (byte) 0x42,
				(byte) 0x65, (byte) 0xBE, (byte) 0xBF, (byte) 0x0A,
				(byte) 0xE3, (byte) 0xA2, (byte) 0x3A, (byte) 0x8A,
				(byte) 0x09, (byte) 0x18, (byte) 0x7F, (byte) 0x21,
				(byte) 0xC8, (byte) 0x56, (byte) 0x60, (byte) 0x7B,
				(byte) 0x98, (byte) 0xBD, (byte) 0xA6, (byte) 0xFC,
				(byte) 0x90, (byte) 0x81, (byte) 0x16, (byte) 0x81,
				(byte) 0x6C, (byte) 0x50, (byte) 0x2B, (byte) 0x3E,
				(byte) 0x58, (byte) 0xA1, (byte) 0x45, (byte) 0x25,
				(byte) 0x4E, (byte) 0xEF, (byte) 0xEE, (byte) 0x2A,
				(byte) 0x33, (byte) 0x35, (byte) 0x11, (byte) 0x02,
				(byte) 0x24, (byte) 0x02, (byte) 0x8B, (byte) 0x67,
				(byte) 0x80, (byte) 0x9D, (byte) 0xCB, (byte) 0x80,
				(byte) 0x58, (byte) 0xE2, (byte) 0x48, (byte) 0x95 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xAF, (byte) 0x1C, (byte) 0xC1, (byte) 0xFD,
				(byte) 0x1C, (byte) 0x1B, (byte) 0xC9, (byte) 0xBC,
				(byte) 0xA0, (byte) 0x7E, (byte) 0x78, (byte) 0xDA,
				(byte) 0x6C, (byte) 0xBA, (byte) 0x21, (byte) 0x63,
				(byte) 0xF1, (byte) 0x69, (byte) 0xCB, (byte) 0xB7 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 1024 bits Live Key 03
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = (byte) 0x03;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xC2, (byte) 0x49, (byte) 0x07, (byte) 0x47,
				(byte) 0xFE, (byte) 0x17, (byte) 0xEB, (byte) 0x05,
				(byte) 0x84, (byte) 0xC8, (byte) 0x8D, (byte) 0x47,
				(byte) 0xB1, (byte) 0x60, (byte) 0x27, (byte) 0x04,
				(byte) 0x15, (byte) 0x0A, (byte) 0xDC, (byte) 0x88,
				(byte) 0xC5, (byte) 0xB9, (byte) 0x98, (byte) 0xBD,
				(byte) 0x59, (byte) 0xCE, (byte) 0x04, (byte) 0x3E,
				(byte) 0xDE, (byte) 0xBF, (byte) 0x0F, (byte) 0xFE,
				(byte) 0xE3, (byte) 0x09, (byte) 0x3A, (byte) 0xC7,
				(byte) 0x95, (byte) 0x6A, (byte) 0xD3, (byte) 0xB6,
				(byte) 0xAD, (byte) 0x45, (byte) 0x54, (byte) 0xC6,
				(byte) 0xDE, (byte) 0x19, (byte) 0xA1, (byte) 0x78,
				(byte) 0xD6, (byte) 0xDA, (byte) 0x29, (byte) 0x5B,
				(byte) 0xE1, (byte) 0x5D, (byte) 0x52, (byte) 0x20,
				(byte) 0x64, (byte) 0x5E, (byte) 0x3C, (byte) 0x81,
				(byte) 0x31, (byte) 0x66, (byte) 0x6F, (byte) 0xA4,
				(byte) 0xBE, (byte) 0x5B, (byte) 0x84, (byte) 0xFE,
				(byte) 0x13, (byte) 0x1E, (byte) 0xA4, (byte) 0x4B,
				(byte) 0x03, (byte) 0x93, (byte) 0x07, (byte) 0x63,
				(byte) 0x8B, (byte) 0x9E, (byte) 0x74, (byte) 0xA8,
				(byte) 0xC4, (byte) 0x25, (byte) 0x64, (byte) 0xF8,
				(byte) 0x92, (byte) 0xA6, (byte) 0x4D, (byte) 0xF1,
				(byte) 0xCB, (byte) 0x15, (byte) 0x71, (byte) 0x2B,
				(byte) 0x73, (byte) 0x6E, (byte) 0x33, (byte) 0x74,
				(byte) 0xF1, (byte) 0xBB, (byte) 0xB6, (byte) 0x81,
				(byte) 0x93, (byte) 0x71, (byte) 0x60, (byte) 0x2D,
				(byte) 0x89, (byte) 0x70, (byte) 0xE9, (byte) 0x7B,
				(byte) 0x90, (byte) 0x07, (byte) 0x93, (byte) 0xC7,
				(byte) 0xC2, (byte) 0xA8, (byte) 0x9A, (byte) 0x4A,
				(byte) 0x16, (byte) 0x49, (byte) 0xA5, (byte) 0x9B,
				(byte) 0xE6, (byte) 0x80, (byte) 0x57, (byte) 0x4D,
				(byte) 0xD0, (byte) 0xB6, (byte) 0x01, (byte) 0x45 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x5A, (byte) 0xDD, (byte) 0xF2, (byte) 0x1D,
				(byte) 0x09, (byte) 0x27, (byte) 0x86, (byte) 0x61,
				(byte) 0x14, (byte) 0x11, (byte) 0x79, (byte) 0xCB,
				(byte) 0xEF, (byte) 0xF2, (byte) 0x72, (byte) 0xEA,
				(byte) 0x38, (byte) 0x4B, (byte) 0x13, (byte) 0xBB };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 1152 bits Live Key 04
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = 0x04;
		HashInd = 0x01;
		ArithInd = 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xA6, (byte) 0xDA, (byte) 0x42, (byte) 0x83,
				(byte) 0x87, (byte) 0xA5, (byte) 0x02, (byte) 0xD7,
				(byte) 0xDD, (byte) 0xFB, (byte) 0x7A, (byte) 0x74,
				(byte) 0xD3, (byte) 0xF4, (byte) 0x12, (byte) 0xBE,
				(byte) 0x76, (byte) 0x26, (byte) 0x27, (byte) 0x19,
				(byte) 0x7B, (byte) 0x25, (byte) 0x43, (byte) 0x5B,
				(byte) 0x7A, (byte) 0x81, (byte) 0x71, (byte) 0x6A,
				(byte) 0x70, (byte) 0x01, (byte) 0x57, (byte) 0xDD,
				(byte) 0xD0, (byte) 0x6F, (byte) 0x7C, (byte) 0xC9,
				(byte) 0x9D, (byte) 0x6C, (byte) 0xA2, (byte) 0x8C,
				(byte) 0x24, (byte) 0x70, (byte) 0x52, (byte) 0x7E,
				(byte) 0x2C, (byte) 0x03, (byte) 0x61, (byte) 0x6B,
				(byte) 0x9C, (byte) 0x59, (byte) 0x21, (byte) 0x73,
				(byte) 0x57, (byte) 0xC2, (byte) 0x67, (byte) 0x4F,
				(byte) 0x58, (byte) 0x3B, (byte) 0x3B, (byte) 0xA5,
				(byte) 0xC7, (byte) 0xDC, (byte) 0xF2, (byte) 0x83,
				(byte) 0x86, (byte) 0x92, (byte) 0xD0, (byte) 0x23,
				(byte) 0xE3, (byte) 0x56, (byte) 0x24, (byte) 0x20,
				(byte) 0xB4, (byte) 0x61, (byte) 0x5C, (byte) 0x43,
				(byte) 0x9C, (byte) 0xA9, (byte) 0x7C, (byte) 0x44,
				(byte) 0xDC, (byte) 0x9A, (byte) 0x24, (byte) 0x9C,
				(byte) 0xFC, (byte) 0xE7, (byte) 0xB3, (byte) 0xBF,
				(byte) 0xB2, (byte) 0x2F, (byte) 0x68, (byte) 0x22,
				(byte) 0x8C, (byte) 0x3A, (byte) 0xF1, (byte) 0x33,
				(byte) 0x29, (byte) 0xAA, (byte) 0x4A, (byte) 0x61,
				(byte) 0x3C, (byte) 0xF8, (byte) 0xDD, (byte) 0x85,
				(byte) 0x35, (byte) 0x02, (byte) 0x37, (byte) 0x3D,
				(byte) 0x62, (byte) 0xE4, (byte) 0x9A, (byte) 0xB2,
				(byte) 0x56, (byte) 0xD2, (byte) 0xBC, (byte) 0x17,
				(byte) 0x12, (byte) 0x0E, (byte) 0x54, (byte) 0xAE,
				(byte) 0xDC, (byte) 0xED, (byte) 0x6D, (byte) 0x96,
				(byte) 0xA4, (byte) 0x28, (byte) 0x7A, (byte) 0xCC,
				(byte) 0x5C, (byte) 0x04, (byte) 0x67, (byte) 0x7D,
				(byte) 0x4A, (byte) 0x5A, (byte) 0x32, (byte) 0x0D,
				(byte) 0xB8, (byte) 0xBE, (byte) 0xE2, (byte) 0xF7,
				(byte) 0x75, (byte) 0xE5, (byte) 0xFE, (byte) 0xC5 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ 0x03 };
		ExpDate = new byte[]{ 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ 0x38, (byte) 0x1A, (byte) 0x03, (byte) 0x5D,
				(byte) 0xA5, (byte) 0x8B, (byte) 0x48, (byte) 0x2E,
				(byte) 0xE2, (byte) 0xAF, (byte) 0x75, (byte) 0xF4,
				(byte) 0xC3, (byte) 0xF2, (byte) 0xCA, (byte) 0x46,
				(byte) 0x9B, (byte) 0xA4, (byte) 0xAA, (byte) 0x6C };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 1984 bits transaction time test Key EF
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		KeyID = (byte) 0xEF;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xA1, (byte) 0x91, (byte) 0xCB, (byte) 0x87,
				(byte) 0x47, (byte) 0x3F, (byte) 0x29, (byte) 0x34,
				(byte) 0x9B, (byte) 0x5D, (byte) 0x60, (byte) 0xA8,
				(byte) 0x8B, (byte) 0x3E, (byte) 0xAE, (byte) 0xE0,
				(byte) 0x97, (byte) 0x3A, (byte) 0xA6, (byte) 0xF1,
				(byte) 0xA0, (byte) 0x82, (byte) 0xF3, (byte) 0x58,
				(byte) 0xD8, (byte) 0x49, (byte) 0xFD, (byte) 0xDF,
				(byte) 0xF9, (byte) 0xC0, (byte) 0x91, (byte) 0xF8,
				(byte) 0x99, (byte) 0xED, (byte) 0xA9, (byte) 0x79,
				(byte) 0x2C, (byte) 0xAF, (byte) 0x09, (byte) 0xEF,
				(byte) 0x28, (byte) 0xF5, (byte) 0xD2, (byte) 0x24,
				(byte) 0x04, (byte) 0xB8, (byte) 0x8A, (byte) 0x22,
				(byte) 0x93, (byte) 0xEE, (byte) 0xBB, (byte) 0xC1,
				(byte) 0x94, (byte) 0x9C, (byte) 0x43, (byte) 0xBE,
				(byte) 0xA4, (byte) 0xD6, (byte) 0x0C, (byte) 0xFD,
				(byte) 0x87, (byte) 0x9A, (byte) 0x15, (byte) 0x39,
				(byte) 0x54, (byte) 0x4E, (byte) 0x09, (byte) 0xE0,
				(byte) 0xF0, (byte) 0x9F, (byte) 0x60, (byte) 0xF0,
				(byte) 0x65, (byte) 0xB2, (byte) 0xBF, (byte) 0x2A,
				(byte) 0x13, (byte) 0xEC, (byte) 0xC7, (byte) 0x05,
				(byte) 0xF3, (byte) 0xD4, (byte) 0x68, (byte) 0xB9,
				(byte) 0xD3, (byte) 0x3A, (byte) 0xE7, (byte) 0x7A,
				(byte) 0xD9, (byte) 0xD3, (byte) 0xF1, (byte) 0x9C,
				(byte) 0xA4, (byte) 0x0F, (byte) 0x23, (byte) 0xDC,
				(byte) 0xF5, (byte) 0xEB, (byte) 0x7C, (byte) 0x04,
				(byte) 0xDC, (byte) 0x8F, (byte) 0x69, (byte) 0xEB,
				(byte) 0xA5, (byte) 0x65, (byte) 0xB1, (byte) 0xEB,
				(byte) 0xCB, (byte) 0x46, (byte) 0x86, (byte) 0xCD,
				(byte) 0x27, (byte) 0x47, (byte) 0x85, (byte) 0x53,
				(byte) 0x0F, (byte) 0xF6, (byte) 0xF6, (byte) 0xE9,
				(byte) 0xEE, (byte) 0x43, (byte) 0xAA, (byte) 0x43,
				(byte) 0xFD, (byte) 0xB0, (byte) 0x2C, (byte) 0xE0,
				(byte) 0x0D, (byte) 0xAE, (byte) 0xC1, (byte) 0x5C,
				(byte) 0x7B, (byte) 0x8F, (byte) 0xD6, (byte) 0xA9,
				(byte) 0xB3, (byte) 0x94, (byte) 0xBA, (byte) 0xBA,
				(byte) 0x41, (byte) 0x9D, (byte) 0x3F, (byte) 0x6D,
				(byte) 0xC8, (byte) 0x5E, (byte) 0x16, (byte) 0x56,
				(byte) 0x9B, (byte) 0xE8, (byte) 0xE7, (byte) 0x69,
				(byte) 0x89, (byte) 0x68, (byte) 0x8E, (byte) 0xFE,
				(byte) 0xA2, (byte) 0xDF, (byte) 0x22, (byte) 0xFF,
				(byte) 0x7D, (byte) 0x35, (byte) 0xC0, (byte) 0x43,
				(byte) 0x33, (byte) 0x8D, (byte) 0xEA, (byte) 0xA9,
				(byte) 0x82, (byte) 0xA0, (byte) 0x2B, (byte) 0x86,
				(byte) 0x6D, (byte) 0xE5, (byte) 0x32, (byte) 0x85,
				(byte) 0x19, (byte) 0xEB, (byte) 0xBC, (byte) 0xD6,
				(byte) 0xF0, (byte) 0x3C, (byte) 0xDD, (byte) 0x68,
				(byte) 0x66, (byte) 0x73, (byte) 0x84, (byte) 0x7F,
				(byte) 0x84, (byte) 0xDB, (byte) 0x65, (byte) 0x1A,
				(byte) 0xB8, (byte) 0x6C, (byte) 0x28, (byte) 0xCF,
				(byte) 0x14, (byte) 0x62, (byte) 0x56, (byte) 0x2C,
				(byte) 0x57, (byte) 0x7B, (byte) 0x85, (byte) 0x35,
				(byte) 0x64, (byte) 0xA2, (byte) 0x90, (byte) 0xC8,
				(byte) 0x55, (byte) 0x6D, (byte) 0x81, (byte) 0x85,
				(byte) 0x31, (byte) 0x26, (byte) 0x8D, (byte) 0x25,
				(byte) 0xCC, (byte) 0x98, (byte) 0xA4, (byte) 0xCC,
				(byte) 0x6A, (byte) 0x0B, (byte) 0xDF, (byte) 0xFF,
				(byte) 0xDA, (byte) 0x2D, (byte) 0xCC, (byte) 0xA3,
				(byte) 0xA9, (byte) 0x4C, (byte) 0x99, (byte) 0x85,
				(byte) 0x59, (byte) 0xE3, (byte) 0x07, (byte) 0xFD,
				(byte) 0xDF, (byte) 0x91, (byte) 0x50, (byte) 0x06,
				(byte) 0xD9, (byte) 0xA9, (byte) 0x87, (byte) 0xB0,
				(byte) 0x7D, (byte) 0xDA, (byte) 0xEB, (byte) 0x3B };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x21, (byte) 0x76, (byte) 0x6E, (byte) 0xBB,
				(byte) 0x0E, (byte) 0xE1, (byte) 0x22, (byte) 0xAF,
				(byte) 0xB6, (byte) 0x5D, (byte) 0x78, (byte) 0x45,
				(byte) 0xB7, (byte) 0x3D, (byte) 0xB4, (byte) 0x6B,
				(byte) 0xAB, (byte) 0x65, (byte) 0x42, (byte) 0x7A };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 1664 bits transaction time test Key F0
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		KeyID = (byte) 0xF0;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 208;
		Modul = new byte[]{ (byte) 0x99, (byte) 0x9E, (byte) 0xA2, (byte) 0xD4,
				(byte) 0x30, (byte) 0xD6, (byte) 0x06, (byte) 0x14,
				(byte) 0xE1, (byte) 0x00, (byte) 0x70, (byte) 0x6C,
				(byte) 0x7D, (byte) 0xA2, (byte) 0x13, (byte) 0xE1,
				(byte) 0xC7, (byte) 0x7A, (byte) 0xD1, (byte) 0x8C,
				(byte) 0x11, (byte) 0xBD, (byte) 0x70, (byte) 0xBC,
				(byte) 0x42, (byte) 0xCE, (byte) 0xBD, (byte) 0x80,
				(byte) 0xA3, (byte) 0xC9, (byte) 0x4E, (byte) 0xC5,
				(byte) 0xE7, (byte) 0x36, (byte) 0xD3, (byte) 0x45,
				(byte) 0xEA, (byte) 0x7A, (byte) 0xDE, (byte) 0x2B,
				(byte) 0x9E, (byte) 0x0B, (byte) 0xC8, (byte) 0x81,
				(byte) 0x6E, (byte) 0x56, (byte) 0x7D, (byte) 0x39,
				(byte) 0x41, (byte) 0x2E, (byte) 0xB7, (byte) 0x28,
				(byte) 0xC2, (byte) 0xB2, (byte) 0xCC, (byte) 0xE7,
				(byte) 0x3D, (byte) 0xEB, (byte) 0xC9, (byte) 0xFA,
				(byte) 0x25, (byte) 0xD4, (byte) 0x91, (byte) 0x9B,
				(byte) 0xF5, (byte) 0x42, (byte) 0x0C, (byte) 0x98,
				(byte) 0x60, (byte) 0x83, (byte) 0xFB, (byte) 0xC0,
				(byte) 0x75, (byte) 0x08, (byte) 0x95, (byte) 0xAF,
				(byte) 0xBA, (byte) 0x6B, (byte) 0x9D, (byte) 0xAA,
				(byte) 0x62, (byte) 0xB1, (byte) 0xB7, (byte) 0xD8,
				(byte) 0x43, (byte) 0x9C, (byte) 0xF2, (byte) 0x9E,
				(byte) 0x72, (byte) 0x0D, (byte) 0x08, (byte) 0x5D,
				(byte) 0x5D, (byte) 0x09, (byte) 0x62, (byte) 0xA9,
				(byte) 0x44, (byte) 0x3B, (byte) 0x1F, (byte) 0x73,
				(byte) 0x8E, (byte) 0x65, (byte) 0x60, (byte) 0xEF,
				(byte) 0x0E, (byte) 0xED, (byte) 0x75, (byte) 0x72,
				(byte) 0x81, (byte) 0x5E, (byte) 0xA8, (byte) 0x7A,
				(byte) 0x1B, (byte) 0x07, (byte) 0x57, (byte) 0x0F,
				(byte) 0x11, (byte) 0x98, (byte) 0x67, (byte) 0xDD,
				(byte) 0x6C, (byte) 0xC5, (byte) 0xD4, (byte) 0xDE,
				(byte) 0x06, (byte) 0xAA, (byte) 0x53, (byte) 0x73,
				(byte) 0x84, (byte) 0x7D, (byte) 0x17, (byte) 0xA6,
				(byte) 0x10, (byte) 0xEC, (byte) 0xF9, (byte) 0x32,
				(byte) 0xFA, (byte) 0x2C, (byte) 0x94, (byte) 0x23,
				(byte) 0x4E, (byte) 0x68, (byte) 0xAF, (byte) 0x84,
				(byte) 0xA9, (byte) 0xE0, (byte) 0xDA, (byte) 0xA1,
				(byte) 0x81, (byte) 0x16, (byte) 0xB3, (byte) 0x26,
				(byte) 0x01, (byte) 0x6B, (byte) 0x70, (byte) 0x13,
				(byte) 0x6F, (byte) 0x49, (byte) 0x34, (byte) 0x82,
				(byte) 0xFE, (byte) 0xAE, (byte) 0x98, (byte) 0xE4,
				(byte) 0xAE, (byte) 0x68, (byte) 0x2B, (byte) 0xF9,
				(byte) 0x6C, (byte) 0x59, (byte) 0x27, (byte) 0x97,
				(byte) 0x52, (byte) 0x24, (byte) 0x8D, (byte) 0xEC,
				(byte) 0x91, (byte) 0x5E, (byte) 0xD6, (byte) 0xF9,
				(byte) 0xBB, (byte) 0x73, (byte) 0xF9, (byte) 0x20,
				(byte) 0x61, (byte) 0x55, (byte) 0xD9, (byte) 0x61,
				(byte) 0xB5, (byte) 0x08, (byte) 0x65, (byte) 0xE1,
				(byte) 0xCA, (byte) 0x6D, (byte) 0x47, (byte) 0x32,
				(byte) 0x2F, (byte) 0xCE, (byte) 0x22, (byte) 0xDC,
				(byte) 0xF1, (byte) 0x95, (byte) 0x71, (byte) 0x82,
				(byte) 0xB6, (byte) 0xE9, (byte) 0x9C, (byte) 0xBB };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB8, (byte) 0xEA, (byte) 0x49, (byte) 0x16,
				(byte) 0x9B, (byte) 0x54, (byte) 0xF3, (byte) 0xB7,
				(byte) 0xFF, (byte) 0x0D, (byte) 0xF3, (byte) 0xA8,
				(byte) 0xB6, (byte) 0x38, (byte) 0x8C, (byte) 0x82,
				(byte) 0xA1, (byte) 0xDB, (byte) 0xE7, (byte) 0x30 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 1408 bits transaction time test Key F1
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = (byte) 0xF1;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 176;
		Modul = new byte[]{ (byte) 0xA0, (byte) 0xDC, (byte) 0xF4, (byte) 0xBD,
				(byte) 0xE1, (byte) 0x9C, (byte) 0x35, (byte) 0x46,
				(byte) 0xB4, (byte) 0xB6, (byte) 0xF0, (byte) 0x41,
				(byte) 0x4D, (byte) 0x17, (byte) 0x4D, (byte) 0xDE,
				(byte) 0x29, (byte) 0x4A, (byte) 0xAB, (byte) 0xBB,
				(byte) 0x82, (byte) 0x8C, (byte) 0x5A, (byte) 0x83,
				(byte) 0x4D, (byte) 0x73, (byte) 0xAA, (byte) 0xE2,
				(byte) 0x7C, (byte) 0x99, (byte) 0xB0, (byte) 0xB0,
				(byte) 0x53, (byte) 0xA9, (byte) 0x02, (byte) 0x78,
				(byte) 0x00, (byte) 0x72, (byte) 0x39, (byte) 0xB6,
				(byte) 0x45, (byte) 0x9F, (byte) 0xF0, (byte) 0xBB,
				(byte) 0xCD, (byte) 0x7B, (byte) 0x4B, (byte) 0x9C,
				(byte) 0x6C, (byte) 0x50, (byte) 0xAC, (byte) 0x02,
				(byte) 0xCE, (byte) 0x91, (byte) 0x36, (byte) 0x8D,
				(byte) 0xA1, (byte) 0xBD, (byte) 0x21, (byte) 0xAA,
				(byte) 0xEA, (byte) 0xDB, (byte) 0xC6, (byte) 0x53,
				(byte) 0x47, (byte) 0x33, (byte) 0x7D, (byte) 0x89,
				(byte) 0xB6, (byte) 0x8F, (byte) 0x5C, (byte) 0x99,
				(byte) 0xA0, (byte) 0x9D, (byte) 0x05, (byte) 0xBE,
				(byte) 0x02, (byte) 0xDD, (byte) 0x1F, (byte) 0x8C,
				(byte) 0x5B, (byte) 0xA2, (byte) 0x0E, (byte) 0x2F,
				(byte) 0x13, (byte) 0xFB, (byte) 0x2A, (byte) 0x27,
				(byte) 0xC4, (byte) 0x1D, (byte) 0x3F, (byte) 0x85,
				(byte) 0xCA, (byte) 0xD5, (byte) 0xCF, (byte) 0x66,
				(byte) 0x68, (byte) 0xE7, (byte) 0x58, (byte) 0x51,
				(byte) 0xEC, (byte) 0x66, (byte) 0xED, (byte) 0xBF,
				(byte) 0x98, (byte) 0x85, (byte) 0x1F, (byte) 0xD4,
				(byte) 0xE4, (byte) 0x2C, (byte) 0x44, (byte) 0xC1,
				(byte) 0xD5, (byte) 0x9F, (byte) 0x59, (byte) 0x84,
				(byte) 0x70, (byte) 0x3B, (byte) 0x27, (byte) 0xD5,
				(byte) 0xB9, (byte) 0xF2, (byte) 0x1B, (byte) 0x8F,
				(byte) 0xA0, (byte) 0xD9, (byte) 0x32, (byte) 0x79,
				(byte) 0xFB, (byte) 0xBF, (byte) 0x69, (byte) 0xE0,
				(byte) 0x90, (byte) 0x64, (byte) 0x29, (byte) 0x09,
				(byte) 0xC9, (byte) 0xEA, (byte) 0x27, (byte) 0xF8,
				(byte) 0x98, (byte) 0x95, (byte) 0x95, (byte) 0x41,
				(byte) 0xAA, (byte) 0x67, (byte) 0x57, (byte) 0xF5,
				(byte) 0xF6, (byte) 0x24, (byte) 0x10, (byte) 0x4F,
				(byte) 0x6E, (byte) 0x1D, (byte) 0x3A, (byte) 0x95,
				(byte) 0x32, (byte) 0xF2, (byte) 0xA6, (byte) 0xE5,
				(byte) 0x15, (byte) 0x15, (byte) 0xAE, (byte) 0xAD,
				(byte) 0x1B, (byte) 0x43, (byte) 0xB3, (byte) 0xD7,
				(byte) 0x83, (byte) 0x50, (byte) 0x88, (byte) 0xA2,
				(byte) 0xFA, (byte) 0xFA, (byte) 0x7B, (byte) 0xE7 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xD8, (byte) 0xE6, (byte) 0x8D, (byte) 0xA1,
				(byte) 0x67, (byte) 0xAB, (byte) 0x5A, (byte) 0x85,
				(byte) 0xD8, (byte) 0xC3, (byte) 0xD5, (byte) 0x5E,
				(byte) 0xCB, (byte) 0x9B, (byte) 0x05, (byte) 0x17,
				(byte) 0xA1, (byte) 0xA5, (byte) 0xB4, (byte) 0xBB };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));



		// Mastercard 1152 bits transaction time test Key F2 (exponent=65537)
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		KeyID = (byte) 0xF2;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xA2, (byte) 0xB9, (byte) 0xFF, (byte) 0x84,
				(byte) 0xF8, (byte) 0x7F, (byte) 0xA1, (byte) 0x08,
				(byte) 0xFF, (byte) 0x9A, (byte) 0x8B, (byte) 0x2E,
				(byte) 0x93, (byte) 0xFD, (byte) 0x5A, (byte) 0x37,
				(byte) 0xCB, (byte) 0xFD, (byte) 0xA1, (byte) 0x84,
				(byte) 0xF1, (byte) 0x89, (byte) 0xCE, (byte) 0xB3,
				(byte) 0x76, (byte) 0x30, (byte) 0x90, (byte) 0x31,
				(byte) 0x9C, (byte) 0xAB, (byte) 0xBD, (byte) 0xD8,
				(byte) 0x22, (byte) 0xEC, (byte) 0x40, (byte) 0x11,
				(byte) 0xED, (byte) 0xA3, (byte) 0x69, (byte) 0x89,
				(byte) 0xE5, (byte) 0xD0, (byte) 0x68, (byte) 0x06,
				(byte) 0x66, (byte) 0xC2, (byte) 0x25, (byte) 0xFC,
				(byte) 0x3E, (byte) 0x83, (byte) 0xFF, (byte) 0x09,
				(byte) 0x96, (byte) 0xD2, (byte) 0x3E, (byte) 0x0F,
				(byte) 0x94, (byte) 0xF9, (byte) 0xF6, (byte) 0x5D,
				(byte) 0x0F, (byte) 0xC2, (byte) 0x1C, (byte) 0x39,
				(byte) 0x29, (byte) 0xB0, (byte) 0x8E, (byte) 0x2F,
				(byte) 0xCF, (byte) 0xB6, (byte) 0xF5, (byte) 0x82,
				(byte) 0x60, (byte) 0x20, (byte) 0xCF, (byte) 0x96,
				(byte) 0x50, (byte) 0x50, (byte) 0xB0, (byte) 0x38,
				(byte) 0x1D, (byte) 0x9B, (byte) 0x47, (byte) 0xBD,
				(byte) 0x93, (byte) 0x0B, (byte) 0x93, (byte) 0x46,
				(byte) 0xA7, (byte) 0xE1, (byte) 0x92, (byte) 0xB6,
				(byte) 0xFF, (byte) 0xB7, (byte) 0x1B, (byte) 0xF4,
				(byte) 0x58, (byte) 0x58, (byte) 0x5E, (byte) 0x84,
				(byte) 0x4F, (byte) 0xE5, (byte) 0x04, (byte) 0x74,
				(byte) 0x1A, (byte) 0x04, (byte) 0xC3, (byte) 0xDE,
				(byte) 0xFB, (byte) 0x1D, (byte) 0xC8, (byte) 0x4C,
				(byte) 0xDD, (byte) 0xDE, (byte) 0x3F, (byte) 0x66,
				(byte) 0x86, (byte) 0xD6, (byte) 0x22, (byte) 0xAE,
				(byte) 0xE3, (byte) 0x21, (byte) 0x6E, (byte) 0x45,
				(byte) 0xFB, (byte) 0x77, (byte) 0xE7, (byte) 0xE4,
				(byte) 0xE4, (byte) 0x8F, (byte) 0x5F, (byte) 0x3D,
				(byte) 0x8F, (byte) 0x9D, (byte) 0x95, (byte) 0x82,
				(byte) 0x68, (byte) 0x5F, (byte) 0xD0, (byte) 0x99,
				(byte) 0xCB, (byte) 0xD6, (byte) 0x28, (byte) 0x73 };
		ExponentLen = (byte) 0x03;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x0F, (byte) 0x3B, (byte) 0xA8, (byte) 0xCB,
				(byte) 0x57, (byte) 0x77, (byte) 0xDC, (byte) 0x4A,
				(byte) 0xA9, (byte) 0x6C, (byte) 0x30, (byte) 0xBF,
				(byte) 0xB1, (byte) 0xFC, (byte) 0x26, (byte) 0x7A,
				(byte) 0x38, (byte) 0x2A, (byte) 0x48, (byte) 0x47 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 1152 bits transaction time test Key F3
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		KeyID = (byte) 0xF3;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0x98, (byte) 0xF0, (byte) 0xC7, (byte) 0x70,
				(byte) 0xF2, (byte) 0x38, (byte) 0x64, (byte) 0xC2,
				(byte) 0xE7, (byte) 0x66, (byte) 0xDF, (byte) 0x02,
				(byte) 0xD1, (byte) 0xE8, (byte) 0x33, (byte) 0xDF,
				(byte) 0xF4, (byte) 0xFF, (byte) 0xE9, (byte) 0x2D,
				(byte) 0x69, (byte) 0x6E, (byte) 0x16, (byte) 0x42,
				(byte) 0xF0, (byte) 0xA8, (byte) 0x8C, (byte) 0x56,
				(byte) 0x94, (byte) 0xC6, (byte) 0x47, (byte) 0x9D,
				(byte) 0x16, (byte) 0xDB, (byte) 0x15, (byte) 0x37,
				(byte) 0xBF, (byte) 0xE2, (byte) 0x9E, (byte) 0x4F,
				(byte) 0xDC, (byte) 0x6E, (byte) 0x6E, (byte) 0x8A,
				(byte) 0xFD, (byte) 0x1B, (byte) 0x0E, (byte) 0xB7,
				(byte) 0xEA, (byte) 0x01, (byte) 0x24, (byte) 0x72,
				(byte) 0x3C, (byte) 0x33, (byte) 0x31, (byte) 0x79,
				(byte) 0xBF, (byte) 0x19, (byte) 0xE9, (byte) 0x3F,
				(byte) 0x10, (byte) 0x65, (byte) 0x8B, (byte) 0x2F,
				(byte) 0x77, (byte) 0x6E, (byte) 0x82, (byte) 0x9E,
				(byte) 0x87, (byte) 0xDA, (byte) 0xED, (byte) 0xA9,
				(byte) 0xC9, (byte) 0x4A, (byte) 0x8B, (byte) 0x33,
				(byte) 0x82, (byte) 0x19, (byte) 0x9A, (byte) 0x35,
				(byte) 0x0C, (byte) 0x07, (byte) 0x79, (byte) 0x77,
				(byte) 0xC9, (byte) 0x7A, (byte) 0xFF, (byte) 0x08,
				(byte) 0xFD, (byte) 0x11, (byte) 0x31, (byte) 0x0A,
				(byte) 0xC9, (byte) 0x50, (byte) 0xA7, (byte) 0x2C,
				(byte) 0x3C, (byte) 0xA5, (byte) 0x00, (byte) 0x2E,
				(byte) 0xF5, (byte) 0x13, (byte) 0xFC, (byte) 0xCC,
				(byte) 0x28, (byte) 0x6E, (byte) 0x64, (byte) 0x6E,
				(byte) 0x3C, (byte) 0x53, (byte) 0x87, (byte) 0x53,
				(byte) 0x5D, (byte) 0x50, (byte) 0x95, (byte) 0x14,
				(byte) 0xB3, (byte) 0xB3, (byte) 0x26, (byte) 0xE1,
				(byte) 0x23, (byte) 0x4F, (byte) 0x9C, (byte) 0xB4,
				(byte) 0x8C, (byte) 0x36, (byte) 0xDD, (byte) 0xD4,
				(byte) 0x4B, (byte) 0x41, (byte) 0x6D, (byte) 0x23,
				(byte) 0x65, (byte) 0x40, (byte) 0x34, (byte) 0xA6,
				(byte) 0x6F, (byte) 0x40, (byte) 0x3B, (byte) 0xA5,
				(byte) 0x11, (byte) 0xC5, (byte) 0xEF, (byte) 0xA3 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xA6, (byte) 0x9A, (byte) 0xC7, (byte) 0x60,
				(byte) 0x3D, (byte) 0xAF, (byte) 0x56, (byte) 0x6E,
				(byte) 0x97, (byte) 0x2D, (byte) 0xED, (byte) 0xC2,
				(byte) 0xCB, (byte) 0x43, (byte) 0x3E, (byte) 0x07,
				(byte) 0xE8, (byte) 0xB0, (byte) 0x1A, (byte) 0x9A };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 896 bits transaction time test Key F4
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		KeyID = (byte) 0xF4;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 112;
		Modul = new byte[]{ (byte) 0x9C, (byte) 0xFA, (byte) 0xD5, (byte) 0x4B,
				(byte) 0x40, (byte) 0x29, (byte) 0x7C, (byte) 0x1C,
				(byte) 0xDE, (byte) 0x23, (byte) 0xFC, (byte) 0xB3,
				(byte) 0xEF, (byte) 0x68, (byte) 0xD3, (byte) 0x18,
				(byte) 0x34, (byte) 0x1A, (byte) 0x47, (byte) 0x27,
				(byte) 0xAE, (byte) 0x1D, (byte) 0xAA, (byte) 0x2B,
				(byte) 0xEB, (byte) 0xE3, (byte) 0x58, (byte) 0x72,
				(byte) 0xEF, (byte) 0x3D, (byte) 0xC9, (byte) 0x07,
				(byte) 0x46, (byte) 0x29, (byte) 0x7B, (byte) 0x06,
				(byte) 0x6E, (byte) 0xD1, (byte) 0xCE, (byte) 0x3C,
				(byte) 0x07, (byte) 0xC1, (byte) 0xF2, (byte) 0x34,
				(byte) 0xFF, (byte) 0x54, (byte) 0x90, (byte) 0x42,
				(byte) 0x5E, (byte) 0x8B, (byte) 0x14, (byte) 0x67,
				(byte) 0x4C, (byte) 0xC5, (byte) 0x7E, (byte) 0x43,
				(byte) 0x97, (byte) 0xA5, (byte) 0x15, (byte) 0x84,
				(byte) 0xFF, (byte) 0x5E, (byte) 0xBA, (byte) 0x6B,
				(byte) 0x5D, (byte) 0x54, (byte) 0xD9, (byte) 0x9D,
				(byte) 0x2C, (byte) 0x9F, (byte) 0xC9, (byte) 0x9D,
				(byte) 0x5E, (byte) 0x4C, (byte) 0xAC, (byte) 0xB3,
				(byte) 0x48, (byte) 0x7A, (byte) 0xBA, (byte) 0x79,
				(byte) 0x0F, (byte) 0x28, (byte) 0xE3, (byte) 0x04,
				(byte) 0x98, (byte) 0x7A, (byte) 0xFA, (byte) 0x7F,
				(byte) 0x5F, (byte) 0x92, (byte) 0xE2, (byte) 0x2D,
				(byte) 0x89, (byte) 0xFF, (byte) 0x51, (byte) 0x0C,
				(byte) 0x1B, (byte) 0x58, (byte) 0x19, (byte) 0x41,
				(byte) 0x16, (byte) 0x6C, (byte) 0x7C, (byte) 0xCB,
				(byte) 0x11, (byte) 0xEF, (byte) 0xB0, (byte) 0x8D,
				(byte) 0xE6, (byte) 0x07, (byte) 0x46, (byte) 0x0D };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x98, (byte) 0xCE, (byte) 0xB9, (byte) 0xE0,
				(byte) 0xE8, (byte) 0xED, (byte) 0x52, (byte) 0xAB,
				(byte) 0xDD, (byte) 0x85, (byte) 0x49, (byte) 0xFD,
				(byte) 0x50, (byte) 0xAC, (byte) 0xEC, (byte) 0xA3,
				(byte) 0xBF, (byte) 0x51, (byte) 0xA7, (byte) 0x86 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 1024 bits transaction time test Key F8 (also for ETEC test)
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		KeyID = (byte) 0xF8;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xA1, (byte) 0xF5, (byte) 0xE1, (byte) 0xC9,
				(byte) 0xBD, (byte) 0x86, (byte) 0x50, (byte) 0xBD,
				(byte) 0x43, (byte) 0xAB, (byte) 0x6E, (byte) 0xE5,
				(byte) 0x6B, (byte) 0x89, (byte) 0x1E, (byte) 0xF7,
				(byte) 0x45, (byte) 0x9C, (byte) 0x0A, (byte) 0x24,
				(byte) 0xFA, (byte) 0x84, (byte) 0xF9, (byte) 0x12,
				(byte) 0x7D, (byte) 0x1A, (byte) 0x6C, (byte) 0x79,
				(byte) 0xD4, (byte) 0x93, (byte) 0x0F, (byte) 0x6D,
				(byte) 0xB1, (byte) 0x85, (byte) 0x2E, (byte) 0x25,
				(byte) 0x10, (byte) 0xF1, (byte) 0x8B, (byte) 0x61,
				(byte) 0xCD, (byte) 0x35, (byte) 0x4D, (byte) 0xB8,
				(byte) 0x3A, (byte) 0x35, (byte) 0x6B, (byte) 0xD1,
				(byte) 0x90, (byte) 0xB8, (byte) 0x8A, (byte) 0xB8,
				(byte) 0xDF, (byte) 0x04, (byte) 0x28, (byte) 0x4D,
				(byte) 0x02, (byte) 0xA4, (byte) 0x20, (byte) 0x4A,
				(byte) 0x7B, (byte) 0x6C, (byte) 0xB7, (byte) 0xC5,
				(byte) 0x55, (byte) 0x19, (byte) 0x77, (byte) 0xA9,
				(byte) 0xB3, (byte) 0x63, (byte) 0x79, (byte) 0xCA,
				(byte) 0x3D, (byte) 0xE1, (byte) 0xA0, (byte) 0x8E,
				(byte) 0x69, (byte) 0xF3, (byte) 0x01, (byte) 0xC9,
				(byte) 0x5C, (byte) 0xC1, (byte) 0xC2, (byte) 0x05,
				(byte) 0x06, (byte) 0x95, (byte) 0x92, (byte) 0x75,
				(byte) 0xF4, (byte) 0x17, (byte) 0x23, (byte) 0xDD,
				(byte) 0x5D, (byte) 0x29, (byte) 0x25, (byte) 0x29,
				(byte) 0x05, (byte) 0x79, (byte) 0xE5, (byte) 0xA9,
				(byte) 0x5B, (byte) 0x0D, (byte) 0xF6, (byte) 0x32,
				(byte) 0x3F, (byte) 0xC8, (byte) 0xE9, (byte) 0x27,
				(byte) 0x3D, (byte) 0x6F, (byte) 0x84, (byte) 0x91,
				(byte) 0x98, (byte) 0xC4, (byte) 0x99, (byte) 0x62,
				(byte) 0x09, (byte) 0x16, (byte) 0x6D, (byte) 0x9B,
				(byte) 0xFC, (byte) 0x97, (byte) 0x3C, (byte) 0x36,
				(byte) 0x1C, (byte) 0xC8, (byte) 0x26, (byte) 0xE1 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xF0, (byte) 0x6E, (byte) 0xCC, (byte) 0x6D,
				(byte) 0x2A, (byte) 0xAE, (byte) 0xBF, (byte) 0x25,
				(byte) 0x9B, (byte) 0x7E, (byte) 0x75, (byte) 0x5A,
				(byte) 0x38, (byte) 0xD9, (byte) 0xA9, (byte) 0xB2,
				(byte) 0x4E, (byte) 0x2F, (byte) 0xF3, (byte) 0xDD };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard - eurocheque 1024 bits transaction time test Key F8(also for
		// ETEC test)
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x10 };
		KeyID = (byte) 0xF8;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xA1, (byte) 0xF5, (byte) 0xE1, (byte) 0xC9,
				(byte) 0xBD, (byte) 0x86, (byte) 0x50, (byte) 0xBD,
				(byte) 0x43, (byte) 0xAB, (byte) 0x6E, (byte) 0xE5,
				(byte) 0x6B, (byte) 0x89, (byte) 0x1E, (byte) 0xF7,
				(byte) 0x45, (byte) 0x9C, (byte) 0x0A, (byte) 0x24,
				(byte) 0xFA, (byte) 0x84, (byte) 0xF9, (byte) 0x12,
				(byte) 0x7D, (byte) 0x1A, (byte) 0x6C, (byte) 0x79,
				(byte) 0xD4, (byte) 0x93, (byte) 0x0F, (byte) 0x6D,
				(byte) 0xB1, (byte) 0x85, (byte) 0x2E, (byte) 0x25,
				(byte) 0x10, (byte) 0xF1, (byte) 0x8B, (byte) 0x61,
				(byte) 0xCD, (byte) 0x35, (byte) 0x4D, (byte) 0xB8,
				(byte) 0x3A, (byte) 0x35, (byte) 0x6B, (byte) 0xD1,
				(byte) 0x90, (byte) 0xB8, (byte) 0x8A, (byte) 0xB8,
				(byte) 0xDF, (byte) 0x04, (byte) 0x28, (byte) 0x4D,
				(byte) 0x02, (byte) 0xA4, (byte) 0x20, (byte) 0x4A,
				(byte) 0x7B, (byte) 0x6C, (byte) 0xB7, (byte) 0xC5,
				(byte) 0x55, (byte) 0x19, (byte) 0x77, (byte) 0xA9,
				(byte) 0xB3, (byte) 0x63, (byte) 0x79, (byte) 0xCA,
				(byte) 0x3D, (byte) 0xE1, (byte) 0xA0, (byte) 0x8E,
				(byte) 0x69, (byte) 0xF3, (byte) 0x01, (byte) 0xC9,
				(byte) 0x5C, (byte) 0xC1, (byte) 0xC2, (byte) 0x05,
				(byte) 0x06, (byte) 0x95, (byte) 0x92, (byte) 0x75,
				(byte) 0xF4, (byte) 0x17, (byte) 0x23, (byte) 0xDD,
				(byte) 0x5D, (byte) 0x29, (byte) 0x25, (byte) 0x29,
				(byte) 0x05, (byte) 0x79, (byte) 0xE5, (byte) 0xA9,
				(byte) 0x5B, (byte) 0x0D, (byte) 0xF6, (byte) 0x32,
				(byte) 0x3F, (byte) 0xC8, (byte) 0xE9, (byte) 0x27,
				(byte) 0x3D, (byte) 0x6F, (byte) 0x84, (byte) 0x91,
				(byte) 0x98, (byte) 0xC4, (byte) 0x99, (byte) 0x62,
				(byte) 0x09, (byte) 0x16, (byte) 0x6D, (byte) 0x9B,
				(byte) 0xFC, (byte) 0x97, (byte) 0x3C, (byte) 0x36,
				(byte) 0x1C, (byte) 0xC8, (byte) 0x26, (byte) 0xE1 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x0F, (byte) 0x44, (byte) 0x88, (byte) 0x56,
				(byte) 0x8C, (byte) 0xF8, (byte) 0xAF, (byte) 0xB0,
				(byte) 0xC1, (byte) 0x2E, (byte) 0xC6, (byte) 0x53,
				(byte) 0xCF, (byte) 0x7A, (byte) 0x04, (byte) 0xD2,
				(byte) 0xD4, (byte) 0x6D, (byte) 0xCD, (byte) 0x34 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard 1024 bits Test Key FE(also for ETEC test)
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		KeyID = (byte) 0xFE;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xA6, (byte) 0x53, (byte) 0xEA, (byte) 0xC1,
				(byte) 0xC0, (byte) 0xF7, (byte) 0x86, (byte) 0xC8,
				(byte) 0x72, (byte) 0x4F, (byte) 0x73, (byte) 0x7F,
				(byte) 0x17, (byte) 0x29, (byte) 0x97, (byte) 0xD6,
				(byte) 0x3D, (byte) 0x1C, (byte) 0x32, (byte) 0x51,
				(byte) 0xC4, (byte) 0x44, (byte) 0x02, (byte) 0x04,
				(byte) 0x9B, (byte) 0x86, (byte) 0x5B, (byte) 0xAE,
				(byte) 0x87, (byte) 0x7D, (byte) 0x0F, (byte) 0x39,
				(byte) 0x8C, (byte) 0xBF, (byte) 0xBE, (byte) 0x8A,
				(byte) 0x60, (byte) 0x35, (byte) 0xE2, (byte) 0x4A,
				(byte) 0xFA, (byte) 0x08, (byte) 0x6B, (byte) 0xEF,
				(byte) 0xDE, (byte) 0x93, (byte) 0x51, (byte) 0xE5,
				(byte) 0x4B, (byte) 0x95, (byte) 0x70, (byte) 0x8E,
				(byte) 0xE6, (byte) 0x72, (byte) 0xF0, (byte) 0x96,
				(byte) 0x8B, (byte) 0xCD, (byte) 0x50, (byte) 0xDC,
				(byte) 0xE4, (byte) 0x0F, (byte) 0x78, (byte) 0x33,
				(byte) 0x22, (byte) 0xB2, (byte) 0xAB, (byte) 0xA0,
				(byte) 0x4E, (byte) 0xF1, (byte) 0x37, (byte) 0xEF,
				(byte) 0x18, (byte) 0xAB, (byte) 0xF0, (byte) 0x3C,
				(byte) 0x7D, (byte) 0xBC, (byte) 0x58, (byte) 0x13,
				(byte) 0xAE, (byte) 0xAE, (byte) 0xF3, (byte) 0xAA,
				(byte) 0x77, (byte) 0x97, (byte) 0xBA, (byte) 0x15,
				(byte) 0xDF, (byte) 0x7D, (byte) 0x5B, (byte) 0xA1,
				(byte) 0xCB, (byte) 0xAF, (byte) 0x7F, (byte) 0xD5,
				(byte) 0x20, (byte) 0xB5, (byte) 0xA4, (byte) 0x82,
				(byte) 0xD8, (byte) 0xD3, (byte) 0xFE, (byte) 0xE1,
				(byte) 0x05, (byte) 0x07, (byte) 0x78, (byte) 0x71,
				(byte) 0x11, (byte) 0x3E, (byte) 0x23, (byte) 0xA4,
				(byte) 0x9A, (byte) 0xF3, (byte) 0x92, (byte) 0x65,
				(byte) 0x54, (byte) 0xA7, (byte) 0x0F, (byte) 0xE1,
				(byte) 0x0E, (byte) 0xD7, (byte) 0x28, (byte) 0xCF,
				(byte) 0x79, (byte) 0x3B, (byte) 0x62, (byte) 0xA1 };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x9A, (byte) 0x29, (byte) 0x5B, (byte) 0x05,
				(byte) 0xFB, (byte) 0x39, (byte) 0x0E, (byte) 0xF7,
				(byte) 0x92, (byte) 0x3F, (byte) 0x57, (byte) 0x61,
				(byte) 0x8A, (byte) 0x9F, (byte) 0xDA, (byte) 0x29,
				(byte) 0x41, (byte) 0xFC, (byte) 0x34, (byte) 0xE0 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// Mastercard - eurocheque 1024 bits Test Key FE(also for ETEC test)
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x10 };
		KeyID = (byte) 0xFE;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xA6, (byte) 0x53, (byte) 0xEA, (byte) 0xC1,
				(byte) 0xC0, (byte) 0xF7, (byte) 0x86, (byte) 0xC8,
				(byte) 0x72, (byte) 0x4F, (byte) 0x73, (byte) 0x7F,
				(byte) 0x17, (byte) 0x29, (byte) 0x97, (byte) 0xD6,
				(byte) 0x3D, (byte) 0x1C, (byte) 0x32, (byte) 0x51,
				(byte) 0xC4, (byte) 0x44, (byte) 0x02, (byte) 0x04,
				(byte) 0x9B, (byte) 0x86, (byte) 0x5B, (byte) 0xAE,
				(byte) 0x87, (byte) 0x7D, (byte) 0x0F, (byte) 0x39,
				(byte) 0x8C, (byte) 0xBF, (byte) 0xBE, (byte) 0x8A,
				(byte) 0x60, (byte) 0x35, (byte) 0xE2, (byte) 0x4A,
				(byte) 0xFA, (byte) 0x08, (byte) 0x6B, (byte) 0xEF,
				(byte) 0xDE, (byte) 0x93, (byte) 0x51, (byte) 0xE5,
				(byte) 0x4B, (byte) 0x95, (byte) 0x70, (byte) 0x8E,
				(byte) 0xE6, (byte) 0x72, (byte) 0xF0, (byte) 0x96,
				(byte) 0x8B, (byte) 0xCD, (byte) 0x50, (byte) 0xDC,
				(byte) 0xE4, (byte) 0x0F, (byte) 0x78, (byte) 0x33,
				(byte) 0x22, (byte) 0xB2, (byte) 0xAB, (byte) 0xA0,
				(byte) 0x4E, (byte) 0xF1, (byte) 0x37, (byte) 0xEF,
				(byte) 0x18, (byte) 0xAB, (byte) 0xF0, (byte) 0x3C,
				(byte) 0x7D, (byte) 0xBC, (byte) 0x58, (byte) 0x13,
				(byte) 0xAE, (byte) 0xAE, (byte) 0xF3, (byte) 0xAA,
				(byte) 0x77, (byte) 0x97, (byte) 0xBA, (byte) 0x15,
				(byte) 0xDF, (byte) 0x7D, (byte) 0x5B, (byte) 0xA1,
				(byte) 0xCB, (byte) 0xAF, (byte) 0x7F, (byte) 0xD5,
				(byte) 0x20, (byte) 0xB5, (byte) 0xA4, (byte) 0x82,
				(byte) 0xD8, (byte) 0xD3, (byte) 0xFE, (byte) 0xE1,
				(byte) 0x05, (byte) 0x07, (byte) 0x78, (byte) 0x71,
				(byte) 0x11, (byte) 0x3E, (byte) 0x23, (byte) 0xA4,
				(byte) 0x9A, (byte) 0xF3, (byte) 0x92, (byte) 0x65,
				(byte) 0x54, (byte) 0xA7, (byte) 0x0F, (byte) 0xE1,
				(byte) 0x0E, (byte) 0xD7, (byte) 0x28, (byte) 0xCF,
				(byte) 0x79, (byte) 0x3B, (byte) 0x62, (byte) 0xA1 };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x2C, (byte) 0xFB, (byte) 0xB8, (byte) 0x24,
				(byte) 0x09, (byte) 0xED, (byte) 0x86, (byte) 0xA3,
				(byte) 0x19, (byte) 0x73, (byte) 0xB0, (byte) 0xE0,
				(byte) 0xCE, (byte) 0xEA, (byte) 0x38, (byte) 0x1B,
				(byte) 0xC4, (byte) 0x3C, (byte) 0x80, (byte) 0x97 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// JCB 1024 bits Test Key 08
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x65 };
		KeyID = (byte) 0x08;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xB7, (byte) 0x46, (byte) 0x70, (byte) 0xDA,
				(byte) 0xD1, (byte) 0xDC, (byte) 0x89, (byte) 0x83,
				(byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0xE5,
				(byte) 0xA7, (byte) 0xF2, (byte) 0xF8, (byte) 0xB3,
				(byte) 0x5D, (byte) 0xFD, (byte) 0x08, (byte) 0x3E,
				(byte) 0xE5, (byte) 0x93, (byte) 0xE5, (byte) 0xBA,
				(byte) 0x89, (byte) 0x5C, (byte) 0x95, (byte) 0x72,
				(byte) 0x9F, (byte) 0x2B, (byte) 0xAD, (byte) 0xE9,
				(byte) 0xC8, (byte) 0xAB, (byte) 0xF3, (byte) 0xDD,
				(byte) 0x9C, (byte) 0xE2, (byte) 0x40, (byte) 0xC4,
				(byte) 0x51, (byte) 0xC6, (byte) 0xCE, (byte) 0xFF,
				(byte) 0xC7, (byte) 0x68, (byte) 0xD8, (byte) 0x3C,
				(byte) 0xBA, (byte) 0xC7, (byte) 0x6A, (byte) 0xBB,
				(byte) 0x8F, (byte) 0xEA, (byte) 0x58, (byte) 0xF0,
				(byte) 0x13, (byte) 0xC6, (byte) 0x47, (byte) 0x00,
				(byte) 0x7C, (byte) 0xFF, (byte) 0x76, (byte) 0x17,
				(byte) 0xBA, (byte) 0xC2, (byte) 0xAE, (byte) 0x39,
				(byte) 0x81, (byte) 0x81, (byte) 0x6F, (byte) 0x25,
				(byte) 0xCC, (byte) 0x7E, (byte) 0x52, (byte) 0x38,
				(byte) 0xEF, (byte) 0x34, (byte) 0xC4, (byte) 0xF0,
				(byte) 0x2D, (byte) 0x0B, (byte) 0x01, (byte) 0xC2,
				(byte) 0x4F, (byte) 0x80, (byte) 0xC2, (byte) 0xC6,
				(byte) 0x5E, (byte) 0x7E, (byte) 0x77, (byte) 0x43,
				(byte) 0xA4, (byte) 0xFA, (byte) 0x8E, (byte) 0x23,
				(byte) 0x20, (byte) 0x6A, (byte) 0x23, (byte) 0xEC,
				(byte) 0xE2, (byte) 0x90, (byte) 0xC2, (byte) 0x6E,
				(byte) 0xA5, (byte) 0x6D, (byte) 0xB0, (byte) 0x85,
				(byte) 0xC5, (byte) 0xC5, (byte) 0xEA, (byte) 0xE2,
				(byte) 0x62, (byte) 0x92, (byte) 0x45, (byte) 0x1F,
				(byte) 0xC8, (byte) 0x29, (byte) 0x2F, (byte) 0x99,
				(byte) 0x57, (byte) 0xBE, (byte) 0x8F, (byte) 0xF2,
				(byte) 0x0F, (byte) 0xAD, (byte) 0x53, (byte) 0xE5 };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xDD, (byte) 0x36, (byte) 0xD5, (byte) 0x89,
				(byte) 0x62, (byte) 0x28, (byte) 0xC8, (byte) 0xC4,
				(byte) 0x90, (byte) 0x07, (byte) 0x42, (byte) 0xF1,
				(byte) 0x07, (byte) 0xE2, (byte) 0xF9, (byte) 0x1F,
				(byte) 0xE5, (byte) 0x0B, (byte) 0xC7, (byte) 0xEE };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// JCB 1024 bits Test Key 01
		RID = new byte[]{ (byte) 0xF1, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89 };
		KeyID = (byte) 0x01;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xED, (byte) 0x0B, (byte) 0x06, (byte) 0xEE,
				(byte) 0xF1, (byte) 0x24, (byte) 0x39, (byte) 0xB9,
				(byte) 0xE6, (byte) 0xF5, (byte) 0x2A, (byte) 0xBC,
				(byte) 0xCA, (byte) 0x3B, (byte) 0x64, (byte) 0x00,
				(byte) 0x85, (byte) 0x36, (byte) 0x58, (byte) 0x49,
				(byte) 0xF9, (byte) 0xD6, (byte) 0x1E, (byte) 0x67,
				(byte) 0xEB, (byte) 0xBE, (byte) 0x78, (byte) 0x0E,
				(byte) 0x1D, (byte) 0x7F, (byte) 0xA8, (byte) 0xBE,
				(byte) 0x19, (byte) 0xB2, (byte) 0x0C, (byte) 0x45,
				(byte) 0x1D, (byte) 0x55, (byte) 0xA8, (byte) 0x68,
				(byte) 0xC8, (byte) 0x01, (byte) 0x3A, (byte) 0xA2,
				(byte) 0x5C, (byte) 0x89, (byte) 0x31, (byte) 0x82,
				(byte) 0x1F, (byte) 0x1B, (byte) 0xA2, (byte) 0xEB,
				(byte) 0x00, (byte) 0x5C, (byte) 0xD5, (byte) 0x51,
				(byte) 0x31, (byte) 0xE5, (byte) 0xB0, (byte) 0xF0,
				(byte) 0x62, (byte) 0x20, (byte) 0xD5, (byte) 0x19,
				(byte) 0xBC, (byte) 0x0E, (byte) 0x38, (byte) 0xE3,
				(byte) 0x7B, (byte) 0x38, (byte) 0xFA, (byte) 0x58,
				(byte) 0xAA, (byte) 0x96, (byte) 0x8F, (byte) 0x11,
				(byte) 0x46, (byte) 0x71, (byte) 0xB4, (byte) 0xD6,
				(byte) 0x16, (byte) 0x0D, (byte) 0x31, (byte) 0xEB,
				(byte) 0x9F, (byte) 0x38, (byte) 0x63, (byte) 0xED,
				(byte) 0x3C, (byte) 0xB7, (byte) 0xB6, (byte) 0x6E,
				(byte) 0x35, (byte) 0x79, (byte) 0x09, (byte) 0xBE,
				(byte) 0xD8, (byte) 0xC8, (byte) 0x5C, (byte) 0xDE,
				(byte) 0x76, (byte) 0x8D, (byte) 0x79, (byte) 0x74,
				(byte) 0x76, (byte) 0x4C, (byte) 0x8A, (byte) 0x15,
				(byte) 0x0A, (byte) 0xA5, (byte) 0xBA, (byte) 0x13,
				(byte) 0xC6, (byte) 0xA9, (byte) 0x23, (byte) 0xBB,
				(byte) 0x38, (byte) 0x48, (byte) 0x91, (byte) 0x58,
				(byte) 0xEE, (byte) 0xF1, (byte) 0x5A, (byte) 0x74,
				(byte) 0x27, (byte) 0x2E, (byte) 0x50, (byte) 0x83 };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xCC, (byte) 0xC1, (byte) 0x8B, (byte) 0x93,
				(byte) 0x7C, (byte) 0x85, (byte) 0x9F, (byte) 0x42,
				(byte) 0x9C, (byte) 0x33, (byte) 0xA3, (byte) 0xDB,
				(byte) 0xEB, (byte) 0x45, (byte) 0xE3, (byte) 0x1E,
				(byte) 0x17, (byte) 0x5B, (byte) 0x8F, (byte) 0xD1 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// JCB 1024 bits Test Key 02,for JCB2.0 test :: skip

		// CUP 1024 bits Test Key 01 - online 2014/05/17
		RID = new byte[]{ (byte) 0xD1, (byte) 0x56, (byte) 0x00, (byte) 0x00,
				(byte) 0x01 };
		KeyID = (byte) 0x01;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xAD, (byte) 0x34, (byte) 0x11, (byte) 0xF4,
				(byte) 0x3F, (byte) 0xF1, (byte) 0xC5, (byte) 0x98,
				(byte) 0x1C, (byte) 0xF6, (byte) 0xE7, (byte) 0x14,
				(byte) 0xBA, (byte) 0xBE, (byte) 0x26, (byte) 0xC5,
				(byte) 0x5F, (byte) 0x1E, (byte) 0xC6, (byte) 0x3A,
				(byte) 0xC5, (byte) 0x3E, (byte) 0xD9, (byte) 0x92,
				(byte) 0xAB, (byte) 0x55, (byte) 0x96, (byte) 0xB5,
				(byte) 0x61, (byte) 0x22, (byte) 0x9A, (byte) 0x20,
				(byte) 0x2F, (byte) 0xF7, (byte) 0x20, (byte) 0x49,
				(byte) 0xD9, (byte) 0x8C, (byte) 0xEA, (byte) 0x71,
				(byte) 0x5C, (byte) 0x90, (byte) 0x15, (byte) 0xAD,
				(byte) 0xFE, (byte) 0x1C, (byte) 0x00, (byte) 0xBC,
				(byte) 0x82, (byte) 0x28, (byte) 0x62, (byte) 0x7D,
				(byte) 0x51, (byte) 0x57, (byte) 0x1D, (byte) 0xCC,
				(byte) 0xF5, (byte) 0xFA, (byte) 0x59, (byte) 0x9D,
				(byte) 0x66, (byte) 0x61, (byte) 0xB6, (byte) 0xB9,
				(byte) 0x7C, (byte) 0x7F, (byte) 0x71, (byte) 0x5C,
				(byte) 0xA4, (byte) 0x17, (byte) 0xE3, (byte) 0x7D,
				(byte) 0x0E, (byte) 0x1B, (byte) 0x28, (byte) 0x6F,
				(byte) 0x6D, (byte) 0xE5, (byte) 0x76, (byte) 0xF2,
				(byte) 0x01, (byte) 0x81, (byte) 0xD8, (byte) 0x18,
				(byte) 0x55, (byte) 0x66, (byte) 0x1A, (byte) 0xC1,
				(byte) 0x4D, (byte) 0xCF, (byte) 0x23, (byte) 0xB2,
				(byte) 0x5A, (byte) 0xAC, (byte) 0x46, (byte) 0xA6,
				(byte) 0x8D, (byte) 0xC6, (byte) 0x42, (byte) 0x7F,
				(byte) 0xEE, (byte) 0x6B, (byte) 0x65, (byte) 0x63,
				(byte) 0x45, (byte) 0x05, (byte) 0x83, (byte) 0x29,
				(byte) 0xAB, (byte) 0xF9, (byte) 0xDD, (byte) 0x81,
				(byte) 0x8E, (byte) 0x90, (byte) 0xEF, (byte) 0xD9,
				(byte) 0x6A, (byte) 0xA4, (byte) 0xBA, (byte) 0xC0,
				(byte) 0xE3, (byte) 0xC0, (byte) 0xE0, (byte) 0x53,
				(byte) 0x2A, (byte) 0x19, (byte) 0xED, (byte) 0xB5 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x06, (byte) 0x10, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xD0, (byte) 0x1A, (byte) 0x0A, (byte) 0x7B,
				(byte) 0x30, (byte) 0x93, (byte) 0xC4, (byte) 0x6E,
				(byte) 0xE5, (byte) 0xF4, (byte) 0x43, (byte) 0x9F,
				(byte) 0x92, (byte) 0xB9, (byte) 0x7E, (byte) 0xED,
				(byte) 0x6B, (byte) 0xD0, (byte) 0x1E, (byte) 0x19 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// PBOC 1152 bits Test Key 08
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0x08;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xB6, (byte) 0x16, (byte) 0x45, (byte) 0xED,
				(byte) 0xFD, (byte) 0x54, (byte) 0x98, (byte) 0xFB,
				(byte) 0x24, (byte) 0x64, (byte) 0x44, (byte) 0x03,
				(byte) 0x7A, (byte) 0x0F, (byte) 0xA1, (byte) 0x8C,
				(byte) 0x0F, (byte) 0x10, (byte) 0x1E, (byte) 0xBD,
				(byte) 0x8E, (byte) 0xFA, (byte) 0x54, (byte) 0x57,
				(byte) 0x3C, (byte) 0xE6, (byte) 0xE6, (byte) 0xA7,
				(byte) 0xFB, (byte) 0xF6, (byte) 0x3E, (byte) 0xD2,
				(byte) 0x1D, (byte) 0x66, (byte) 0x34, (byte) 0x08,
				(byte) 0x52, (byte) 0xB0, (byte) 0x21, (byte) 0x1C,
				(byte) 0xF5, (byte) 0xEE, (byte) 0xF6, (byte) 0xA1,
				(byte) 0xCD, (byte) 0x98, (byte) 0x9F, (byte) 0x66,
				(byte) 0xAF, (byte) 0x21, (byte) 0xA8, (byte) 0xEB,
				(byte) 0x19, (byte) 0xDB, (byte) 0xD8, (byte) 0xDB,
				(byte) 0xC3, (byte) 0x70, (byte) 0x6D, (byte) 0x13,
				(byte) 0x53, (byte) 0x63, (byte) 0xA0, (byte) 0xD6,
				(byte) 0x83, (byte) 0xD0, (byte) 0x46, (byte) 0x30,
				(byte) 0x4F, (byte) 0x5A, (byte) 0x83, (byte) 0x6B,
				(byte) 0xC1, (byte) 0xBC, (byte) 0x63, (byte) 0x28,
				(byte) 0x21, (byte) 0xAF, (byte) 0xE7, (byte) 0xA2,
				(byte) 0xF7, (byte) 0x5D, (byte) 0xA3, (byte) 0xC5,
				(byte) 0x0A, (byte) 0xC7, (byte) 0x4C, (byte) 0x54,
				(byte) 0x5A, (byte) 0x75, (byte) 0x45, (byte) 0x62,
				(byte) 0x20, (byte) 0x41, (byte) 0x37, (byte) 0x16,
				(byte) 0x96, (byte) 0x63, (byte) 0xCF, (byte) 0xCC,
				(byte) 0x0B, (byte) 0x06, (byte) 0xE6, (byte) 0x7E,
				(byte) 0x21, (byte) 0x09, (byte) 0xEB, (byte) 0xA4,
				(byte) 0x1B, (byte) 0xC6, (byte) 0x7F, (byte) 0xF2,
				(byte) 0x0C, (byte) 0xC8, (byte) 0xAC, (byte) 0x80,
				(byte) 0xD7, (byte) 0xB6, (byte) 0xEE, (byte) 0x1A,
				(byte) 0x95, (byte) 0x46, (byte) 0x5B, (byte) 0x3B,
				(byte) 0x26, (byte) 0x57, (byte) 0x53, (byte) 0x3E,
				(byte) 0xA5, (byte) 0x6D, (byte) 0x92, (byte) 0xD5,
				(byte) 0x39, (byte) 0xE5, (byte) 0x06, (byte) 0x43,
				(byte) 0x60, (byte) 0xEA, (byte) 0x48, (byte) 0x50,
				(byte) 0xFE, (byte) 0xD2, (byte) 0xD1, (byte) 0xBF };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xEE, (byte) 0x23, (byte) 0xB6, (byte) 0x16,
				(byte) 0xC9, (byte) 0x5C, (byte) 0x02, (byte) 0x65,
				(byte) 0x2A, (byte) 0xD1, (byte) 0x88, (byte) 0x60,
				(byte) 0xE4, (byte) 0x87, (byte) 0x87, (byte) 0xC0,
				(byte) 0x79, (byte) 0xE8, (byte) 0xE8, (byte) 0x5A };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		// PBOC 1024 bits Test Key 80
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		KeyID = (byte) 0x80;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xCC, (byte) 0xDB, (byte) 0xA6, (byte) 0x86,
				(byte) 0xE2, (byte) 0xEF, (byte) 0xB8, (byte) 0x4C,
				(byte) 0xE2, (byte) 0xEA, (byte) 0x01, (byte) 0x20,
				(byte) 0x9E, (byte) 0xEB, (byte) 0x53, (byte) 0xBE,
				(byte) 0xF2, (byte) 0x1A, (byte) 0xB6, (byte) 0xD3,
				(byte) 0x53, (byte) 0x27, (byte) 0x4F, (byte) 0xF8,
				(byte) 0x39, (byte) 0x1D, (byte) 0x70, (byte) 0x35,
				(byte) 0xD7, (byte) 0x6E, (byte) 0x21, (byte) 0x56,
				(byte) 0xCA, (byte) 0xED, (byte) 0xD0, (byte) 0x75,
				(byte) 0x10, (byte) 0xE0, (byte) 0x7D, (byte) 0xAF,
				(byte) 0xCA, (byte) 0xCA, (byte) 0xBB, (byte) 0x7C,
				(byte) 0xCB, (byte) 0x09, (byte) 0x50, (byte) 0xBA,
				(byte) 0x2F, (byte) 0x0A, (byte) 0x3C, (byte) 0xEC,
				(byte) 0x31, (byte) 0x3C, (byte) 0x52, (byte) 0xEE,
				(byte) 0x6C, (byte) 0xD0, (byte) 0x9E, (byte) 0xF0,
				(byte) 0x04, (byte) 0x01, (byte) 0xA3, (byte) 0xD6,
				(byte) 0xCC, (byte) 0x5F, (byte) 0x68, (byte) 0xCA,
				(byte) 0x5F, (byte) 0xCD, (byte) 0x0A, (byte) 0xC6,
				(byte) 0x13, (byte) 0x21, (byte) 0x41, (byte) 0xFA,
				(byte) 0xFD, (byte) 0x1C, (byte) 0xFA, (byte) 0x36,
				(byte) 0xA2, (byte) 0x69, (byte) 0x2D, (byte) 0x02,
				(byte) 0xDD, (byte) 0xC2, (byte) 0x7E, (byte) 0xDA,
				(byte) 0x4C, (byte) 0xD5, (byte) 0xBE, (byte) 0xA6,
				(byte) 0xFF, (byte) 0x21, (byte) 0x91, (byte) 0x3B,
				(byte) 0x51, (byte) 0x3C, (byte) 0xE7, (byte) 0x8B,
				(byte) 0xF3, (byte) 0x3E, (byte) 0x68, (byte) 0x77,
				(byte) 0xAA, (byte) 0x5B, (byte) 0x60, (byte) 0x5B,
				(byte) 0xC6, (byte) 0x9A, (byte) 0x53, (byte) 0x4F,
				(byte) 0x37, (byte) 0x77, (byte) 0xCB, (byte) 0xED,
				(byte) 0x63, (byte) 0x76, (byte) 0xBA, (byte) 0x64,
				(byte) 0x9C, (byte) 0x72, (byte) 0x51, (byte) 0x6A,
				(byte) 0x7E, (byte) 0x16, (byte) 0xAF, (byte) 0x85 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xA5, (byte) 0xE4, (byte) 0x4B, (byte) 0xB0,
				(byte) 0xE1, (byte) 0xFA, (byte) 0x4F, (byte) 0x96,
				(byte) 0xA1, (byte) 0x17, (byte) 0x09, (byte) 0x18,
				(byte) 0x66, (byte) 0x70, (byte) 0xD0, (byte) 0x83,
				(byte) 0x50, (byte) 0x57, (byte) 0xD3, (byte) 0x5E };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));



		// PBOC 1024 bits Live Key 01
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0x01;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) (byte) 0x80;
		Modul = new byte[]{ (byte) 0xBB, (byte) 0xE9, (byte) 0x06, (byte) 0x6D,
				(byte) 0x25, (byte) 0x17, (byte) 0x51, (byte) 0x1D,
				(byte) 0x23, (byte) 0x9C, (byte) 0x7B, (byte) 0xFA,
				(byte) 0x77, (byte) 0x88, (byte) 0x41, (byte) 0x44,
				(byte) 0xAE, (byte) 0x20, (byte) 0xC7, (byte) 0x37,
				(byte) 0x2F, (byte) 0x51, (byte) 0x51, (byte) 0x47,
				(byte) 0xE8, (byte) 0xCE, (byte) 0x65, (byte) 0x37,
				(byte) 0xC5, (byte) 0x4C, (byte) 0x0A, (byte) 0x6A,
				(byte) 0x4D, (byte) 0x45, (byte) 0xF8, (byte) 0xCA,
				(byte) 0x4D, (byte) 0x29, (byte) 0x08, (byte) 0x70,
				(byte) 0xCD, (byte) 0xA5, (byte) 0x9F, (byte) 0x13,
				(byte) 0x44, (byte) 0xEF, (byte) 0x71, (byte) 0xD1,
				(byte) 0x7D, (byte) 0x3F, (byte) 0x35, (byte) 0xD9,
				(byte) 0x2F, (byte) 0x3F, (byte) 0x06, (byte) 0x77,
				(byte) 0x8D, (byte) 0x0D, (byte) 0x51, (byte) 0x1E,
				(byte) 0xC2, (byte) 0xA7, (byte) 0xDC, (byte) 0x4F,
				(byte) 0xFE, (byte) 0xAD, (byte) 0xF4, (byte) 0xFB,
				(byte) 0x12, (byte) 0x53, (byte) 0xCE, (byte) 0x37,
				(byte) 0xA7, (byte) 0xB2, (byte) 0xB5, (byte) 0xA3,
				(byte) 0x74, (byte) 0x12, (byte) 0x27, (byte) 0xBE,
				(byte) 0xF7, (byte) 0x25, (byte) 0x24, (byte) 0xDA,
				(byte) 0x7A, (byte) 0x2B, (byte) 0x7B, (byte) 0x1C,
				(byte) 0xB4, (byte) 0x26, (byte) 0xBE, (byte) 0xE2,
				(byte) 0x7B, (byte) 0xC5, (byte) 0x13, (byte) 0xB0,
				(byte) 0xCB, (byte) 0x11, (byte) 0xAB, (byte) 0x99,
				(byte) 0xBC, (byte) 0x1B, (byte) 0xC6, (byte) 0x1D,
				(byte) 0xF5, (byte) 0xAC, (byte) 0x6C, (byte) 0xC4,
				(byte) 0xD8, (byte) 0x31, (byte) 0xD0, (byte) 0x84,
				(byte) 0x87, (byte) 0x88, (byte) 0xCD, (byte) 0x74,
				(byte) 0xF6, (byte) 0xD5, (byte) 0x43, (byte) 0xAD,
				(byte) 0x37, (byte) 0xC5, (byte) 0xA2, (byte) 0xB4,
				(byte) 0xC5, (byte) 0xD5, (byte) 0xA9, (byte) 0x3B };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x09, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xE8, (byte) 0x81, (byte) 0xE3, (byte) 0x90,
				(byte) 0x67, (byte) 0x5D, (byte) 0x44, (byte) 0xC2,
				(byte) 0xDD, (byte) 0x81, (byte) 0x23, (byte) 0x4D,
				(byte) 0xCE, (byte) 0x29, (byte) 0xC3, (byte) 0xF5,
				(byte) 0xAB, (byte) 0x22, (byte) 0x97, (byte) 0xA0 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		//===============================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0x02;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) (byte) 0x90;
		Modul = new byte[]{ (byte) 0xA3, (byte) 0x76, (byte) 0x7A, (byte) 0xBD,
				(byte) 0x1B, (byte) 0x6A, (byte) 0xA6, (byte) 0x9D,
				(byte) 0x7F, (byte) 0x3F, (byte) 0xBF, (byte) 0x28,
				(byte) 0xC0, (byte) 0x92, (byte) 0xDE, (byte) 0x9E,
				(byte) 0xD1, (byte) 0xE6, (byte) 0x58, (byte) 0xBA,
				(byte) 0x5F, (byte) 0x09, (byte) 0x09, (byte) 0xAF,
				(byte) 0x7A, (byte) 0x1C, (byte) 0xCD, (byte) 0x90,
				(byte) 0x73, (byte) 0x73, (byte) 0xB7, (byte) 0x21,
				(byte) 0x0F, (byte) 0xDE, (byte) 0xB1, (byte) 0x62,
				(byte) 0x87, (byte) 0xBA, (byte) 0x8E, (byte) 0x78,
				(byte) 0xE1, (byte) 0x52, (byte) 0x9F, (byte) 0x44,
				(byte) 0x39, (byte) 0x76, (byte) 0xFD, (byte) 0x27,
				(byte) 0xF9, (byte) 0x91, (byte) 0xEC, (byte) 0x67,
				(byte) 0xD9, (byte) 0x5E, (byte) 0x5F, (byte) 0x4E,
				(byte) 0x96, (byte) 0xB1, (byte) 0x27, (byte) 0xCA,
				(byte) 0xB2, (byte) 0x39, (byte) 0x6A, (byte) 0x94,
				(byte) 0xD6, (byte) 0xE4, (byte) 0x5C, (byte) 0xDA,
				(byte) 0x44, (byte) 0xCA, (byte) 0x4C, (byte) 0x48,
				(byte) 0x67, (byte) 0x57, (byte) 0x0D, (byte) 0x6B,
				(byte) 0x07, (byte) 0x54, (byte) 0x2F, (byte) 0x8D,
				(byte) 0x4B, (byte) 0xF9, (byte) 0xFF, (byte) 0x97,
				(byte) 0x97, (byte) 0x5D, (byte) 0xB9, (byte) 0x89,
				(byte) 0x15, (byte) 0x15, (byte) 0xE6, (byte) 0x6F,
				(byte) 0x52, (byte) 0x5D, (byte) 0x2B, (byte) 0x3C,
				(byte) 0xBE, (byte) 0xB6, (byte) 0xD6, (byte) 0x62,
				(byte) 0xBF, (byte) 0xB6, (byte) 0xC3, (byte) 0xF3,
				(byte) 0x38, (byte) 0xE9, (byte) 0x3B, (byte) 0x02,
				(byte) 0x14, (byte) 0x2B, (byte) 0xFC, (byte) 0x44,
				(byte) 0x17, (byte) 0x3A, (byte) 0x37, (byte) 0x64,
				(byte) 0xC5, (byte) 0x6A, (byte) 0xAD, (byte) 0xD2,
				(byte) 0x02, (byte) 0x07, (byte) 0x5B, (byte) 0x26,
				(byte) 0xDC, (byte) 0x2F, (byte) 0x9F, (byte) 0x7D,
				(byte) 0x7A, (byte) 0xE7, (byte) 0x4B, (byte) 0xD7,
				(byte) 0xD0, (byte) 0x0F, (byte) 0xD0, (byte) 0x5E,
				(byte) 0xE4, (byte) 0x30, (byte) 0x03, (byte) 0x26,
				(byte) 0x63, (byte) 0xD2, (byte) 0x7A, (byte) 0x57 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x14, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x03, (byte) 0xBB, (byte) 0x33, (byte) 0x5A,
				(byte) 0x85, (byte) 0x49, (byte) 0xA0, (byte) 0x3B,
				(byte) 0x87, (byte) 0xAB, (byte) 0x08, (byte) 0x9D,
				(byte) 0x00, (byte) 0x6F, (byte) 0x60, (byte) 0x85,
				(byte) 0x2E, (byte) 0x4B, (byte) 0x80, (byte) 0x60 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
	}
	
	
	public static void setDefaultTestCAPK2nd() {
		//==============================
		byte[] RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x03;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0xB0;
		byte[] Modul = new byte[]{ (byte) 0xB0, (byte) 0x62, (byte) 0x7D, (byte) 0xEE,
				(byte) 0x87, (byte) 0x86, (byte) 0x4F, (byte) 0x9C,
				(byte) 0x18, (byte) 0xC1, (byte) 0x3B, (byte) 0x9A,
				(byte) 0x1F, (byte) 0x02, (byte) 0x54, (byte) 0x48,
				(byte) 0xBF, (byte) 0x13, (byte) 0xC5, (byte) 0x83,
				(byte) 0x80, (byte) 0xC9, (byte) 0x1F, (byte) 0x4C,
				(byte) 0xEB, (byte) 0xA9, (byte) 0xF9, (byte) 0xBC,
				(byte) 0xB2, (byte) 0x14, (byte) 0xFF, (byte) 0x84,
				(byte) 0x14, (byte) 0xE9, (byte) 0xB5, (byte) 0x9D,
				(byte) 0x6A, (byte) 0xBA, (byte) 0x10, (byte) 0xF9,
				(byte) 0x41, (byte) 0xC7, (byte) 0x33, (byte) 0x17,
				(byte) 0x68, (byte) 0xF4, (byte) 0x7B, (byte) 0x21,
				(byte) 0x27, (byte) 0x90, (byte) 0x7D, (byte) 0x85,
				(byte) 0x7F, (byte) 0xA3, (byte) 0x9A, (byte) 0xAF,
				(byte) 0x8C, (byte) 0xE0, (byte) 0x20, (byte) 0x45,
				(byte) 0xDD, (byte) 0x01, (byte) 0x61, (byte) 0x9D,
				(byte) 0x68, (byte) 0x9E, (byte) 0xE7, (byte) 0x31,
				(byte) 0xC5, (byte) 0x51, (byte) 0x15, (byte) 0x9B,
				(byte) 0xE7, (byte) 0xEB, (byte) 0x2D, (byte) 0x51,
				(byte) 0xA3, (byte) 0x72, (byte) 0xFF, (byte) 0x56,
				(byte) 0xB5, (byte) 0x56, (byte) 0xE5, (byte) 0xCB,
				(byte) 0x2F, (byte) 0xDE, (byte) 0x36, (byte) 0xE2,
				(byte) 0x30, (byte) 0x73, (byte) 0xA4, (byte) 0x4C,
				(byte) 0xA2, (byte) 0x15, (byte) 0xD6, (byte) 0xC2,
				(byte) 0x6C, (byte) 0xA6, (byte) 0x88, (byte) 0x47,
				(byte) 0xB3, (byte) 0x88, (byte) 0xE3, (byte) 0x95,
				(byte) 0x20, (byte) 0xE0, (byte) 0x02, (byte) 0x6E,
				(byte) 0x62, (byte) 0x29, (byte) 0x4B, (byte) 0x55,
				(byte) 0x7D, (byte) 0x64, (byte) 0x70, (byte) 0x44,
				(byte) 0x0C, (byte) 0xA0, (byte) 0xAE, (byte) 0xFC,
				(byte) 0x94, (byte) 0x38, (byte) 0xC9, (byte) 0x23,
				(byte) 0xAE, (byte) 0xC9, (byte) 0xB2, (byte) 0x09,
				(byte) 0x8D, (byte) 0x6D, (byte) 0x3A, (byte) 0x1A,
				(byte) 0xF5, (byte) 0xE8, (byte) 0xB1, (byte) 0xDE,
				(byte) 0x36, (byte) 0xF4, (byte) 0xB5, (byte) 0x30,
				(byte) 0x40, (byte) 0x10, (byte) 0x9D, (byte) 0x89,
				(byte) 0xB7, (byte) 0x7C, (byte) 0xAF, (byte) 0xAF,
				(byte) 0x70, (byte) 0xC2, (byte) 0x6C, (byte) 0x60,
				(byte) 0x1A, (byte) 0xBD, (byte) 0xF5, (byte) 0x9E,
				(byte) 0xEC, (byte) 0x0F, (byte) 0xDC, (byte) 0x8A,
				(byte) 0x99, (byte) 0x08, (byte) 0x91, (byte) 0x40,
				(byte) 0xCD, (byte) 0x2E, (byte) 0x81, (byte) 0x7E,
				(byte) 0x33, (byte) 0x51, (byte) 0x75, (byte) 0xB0,
				(byte) 0x3B, (byte) 0x7A, (byte) 0xA3, (byte) 0x3D };
		byte ExponentLen = 1;
		byte[] Exponent = new byte[]{ (byte) 0x03 };
		byte[] ExpDate = new byte[]{ (byte) 0x17, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = new byte[]{ (byte) 0x87, (byte) 0xF0, (byte) 0xCD, (byte) 0x7C,
				(byte) 0x0E, (byte) 0x86, (byte) 0xF3, (byte) 0x8F,
				(byte) 0x89, (byte) 0xA6, (byte) 0x6F, (byte) 0x8C,
				(byte) 0x47, (byte) 0x07, (byte) 0x1A, (byte) 0x8B,
				(byte) 0x88, (byte) 0x58, (byte) 0x6F, (byte) 0x26 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		

		//===================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0x04;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) (byte) 0xF8;
		Modul = new byte[]{ (byte) 0xBC, (byte) 0x85, (byte) 0x3E, (byte) 0x6B,
				(byte) 0x53, (byte) 0x65, (byte) 0xE8, (byte) 0x9E,
				(byte) 0x7E, (byte) 0xE9, (byte) 0x31, (byte) 0x7C,
				(byte) 0x94, (byte) 0xB0, (byte) 0x2D, (byte) 0x0A,
				(byte) 0xBB, (byte) 0x0D, (byte) 0xBD, (byte) 0x91,
				(byte) 0xC0, (byte) 0x5A, (byte) 0x22, (byte) 0x4A,
				(byte) 0x25, (byte) 0x54, (byte) 0xAA, (byte) 0x29,
				(byte) 0xED, (byte) 0x9F, (byte) 0xCB, (byte) 0x9D,
				(byte) 0x86, (byte) 0xEB, (byte) 0x9C, (byte) 0xCB,
				(byte) 0xB3, (byte) 0x22, (byte) 0xA5, (byte) 0x78,
				(byte) 0x11, (byte) 0xF8, (byte) 0x61, (byte) 0x88,
				(byte) 0xAA, (byte) 0xC7, (byte) 0x35, (byte) 0x1C,
				(byte) 0x72, (byte) 0xBD, (byte) 0x9E, (byte) 0xF1,
				(byte) 0x96, (byte) 0xC5, (byte) 0xA0, (byte) 0x1A,
				(byte) 0xCE, (byte) 0xF7, (byte) 0xA4, (byte) 0xEB,
				(byte) 0x0D, (byte) 0x2A, (byte) 0xD6, (byte) 0x3D,
				(byte) 0x9E, (byte) 0x6A, (byte) 0xC2, (byte) 0xE7,
				(byte) 0x83, (byte) 0x65, (byte) 0x47, (byte) 0xCB,
				(byte) 0x15, (byte) 0x95, (byte) 0xC6, (byte) 0x8B,
				(byte) 0xCB, (byte) 0xAF, (byte) 0xD0, (byte) 0xF6,
				(byte) 0x72, (byte) 0x87, (byte) 0x60, (byte) 0xF3,
				(byte) 0xA7, (byte) 0xCA, (byte) 0x7B, (byte) 0x97,
				(byte) 0x30, (byte) 0x1B, (byte) 0x7E, (byte) 0x02,
				(byte) 0x20, (byte) 0x18, (byte) 0x4E, (byte) 0xFC,
				(byte) 0x4F, (byte) 0x65, (byte) 0x30, (byte) 0x08,
				(byte) 0xD9, (byte) 0x3C, (byte) 0xE0, (byte) 0x98,
				(byte) 0xC0, (byte) 0xD9, (byte) 0x3B, (byte) 0x45,
				(byte) 0x20, (byte) 0x10, (byte) 0x96, (byte) 0xD1,
				(byte) 0xAD, (byte) 0xFF, (byte) 0x4C, (byte) 0xF1,
				(byte) 0xF9, (byte) 0xFC, (byte) 0x02, (byte) 0xAF,
				(byte) 0x75, (byte) 0x9D, (byte) 0xA2, (byte) 0x7C,
				(byte) 0xD6, (byte) 0xDF, (byte) 0xD6, (byte) 0xD7,
				(byte) 0x89, (byte) 0xB0, (byte) 0x99, (byte) 0xF1,
				(byte) 0x6F, (byte) 0x37, (byte) 0x8B, (byte) 0x61,
				(byte) 0x00, (byte) 0x33, (byte) 0x4E, (byte) 0x63,
				(byte) 0xF3, (byte) 0xD3, (byte) 0x5F, (byte) 0x32,
				(byte) 0x51, (byte) 0xA5, (byte) 0xEC, (byte) 0x78,
				(byte) 0x69, (byte) 0x37, (byte) 0x31, (byte) 0xF5,
				(byte) 0x23, (byte) 0x35, (byte) 0x19, (byte) 0xCD,
				(byte) 0xB3, (byte) 0x80, (byte) 0xF5, (byte) 0xAB,
				(byte) 0x8C, (byte) 0x0F, (byte) 0x02, (byte) 0x72,
				(byte) 0x8E, (byte) 0x91, (byte) 0xD4, (byte) 0x69,
				(byte) 0xAB, (byte) 0xD0, (byte) 0xEA, (byte) 0xE0,
				(byte) 0xD9, (byte) 0x3B, (byte) 0x1C, (byte) 0xC6,
				(byte) 0x6C, (byte) 0xE1, (byte) 0x27, (byte) 0xB2,
				(byte) 0x9C, (byte) 0x7D, (byte) 0x77, (byte) 0x44,
				(byte) 0x1A, (byte) 0x49, (byte) 0xD0, (byte) 0x9F,
				(byte) 0xCA, (byte) 0x5D, (byte) 0x6D, (byte) 0x97,
				(byte) 0x62, (byte) 0xFC, (byte) 0x74, (byte) 0xC3,
				(byte) 0x1B, (byte) 0xB5, (byte) 0x06, (byte) 0xC8,
				(byte) 0xBA, (byte) 0xE3, (byte) 0xC7, (byte) 0x9A,
				(byte) 0xD6, (byte) 0xC2, (byte) 0x57, (byte) 0x87,
				(byte) 0x75, (byte) 0xB9, (byte) 0x59, (byte) 0x56,
				(byte) 0xB5, (byte) 0x37, (byte) 0x0D, (byte) 0x1D,
				(byte) 0x05, (byte) 0x19, (byte) 0xE3, (byte) 0x79,
				(byte) 0x06, (byte) 0xB3, (byte) 0x84, (byte) 0x73,
				(byte) 0x62, (byte) 0x33, (byte) 0x25, (byte) 0x1E,
				(byte) 0x8F, (byte) 0x09, (byte) 0xAD, (byte) 0x79,
				(byte) 0xDF, (byte) 0xBE, (byte) 0x2C, (byte) 0x6A,
				(byte) 0xBF, (byte) 0xAD, (byte) 0xAC, (byte) 0x8E,
				(byte) 0x4D, (byte) 0x86, (byte) 0x24, (byte) 0x31,
				(byte) 0x8C, (byte) 0x27, (byte) 0xDA, (byte) 0xF1 };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x17, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xF5, (byte) 0x27, (byte) 0x08, (byte) 0x1C,
				(byte) 0xF3, (byte) 0x71, (byte) 0xDD, (byte) 0x7E,
				(byte) 0x1F, (byte) 0xD4, (byte) 0xFA, (byte) 0x41,
				(byte) 0x4A, (byte) 0x66, (byte) 0x50, (byte) 0x36,
				(byte) 0xE0, (byte) 0xF5, (byte) 0xE6, (byte) 0xE5 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		//===================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0x08;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) (byte) 0x90;
		Modul = new byte[]{ (byte) 0xB6, (byte) 0x16, (byte) 0x45, (byte) 0xED,
				(byte) 0xFD, (byte) 0x54, (byte) 0x98, (byte) 0xFB,
				(byte) 0x24, (byte) 0x64, (byte) 0x44, (byte) 0x03,
				(byte) 0x7A, (byte) 0x0F, (byte) 0xA1, (byte) 0x8C,
				(byte) 0x0F, (byte) 0x10, (byte) 0x1E, (byte) 0xBD,
				(byte) 0x8E, (byte) 0xFA, (byte) 0x54, (byte) 0x57,
				(byte) 0x3C, (byte) 0xE6, (byte) 0xE6, (byte) 0xA7,
				(byte) 0xFB, (byte) 0xF6, (byte) 0x3E, (byte) 0xD2,
				(byte) 0x1D, (byte) 0x66, (byte) 0x34, (byte) 0x08,
				(byte) 0x52, (byte) 0xB0, (byte) 0x21, (byte) 0x1C,
				(byte) 0xF5, (byte) 0xEE, (byte) 0xF6, (byte) 0xA1,
				(byte) 0xCD, (byte) 0x98, (byte) 0x9F, (byte) 0x66,
				(byte) 0xAF, (byte) 0x21, (byte) 0xA8, (byte) 0xEB,
				(byte) 0x19, (byte) 0xDB, (byte) 0xD8, (byte) 0xDB,
				(byte) 0xC3, (byte) 0x70, (byte) 0x6D, (byte) 0x13,
				(byte) 0x53, (byte) 0x63, (byte) 0xA0, (byte) 0xD6,
				(byte) 0x83, (byte) 0xD0, (byte) 0x46, (byte) 0x30,
				(byte) 0x4F, (byte) 0x5A, (byte) 0x83, (byte) 0x6B,
				(byte) 0xC1, (byte) 0xBC, (byte) 0x63, (byte) 0x28,
				(byte) 0x21, (byte) 0xAF, (byte) 0xE7, (byte) 0xA2,
				(byte) 0xF7, (byte) 0x5D, (byte) 0xA3, (byte) 0xC5,
				(byte) 0x0A, (byte) 0xC7, (byte) 0x4C, (byte) 0x54,
				(byte) 0x5A, (byte) 0x75, (byte) 0x45, (byte) 0x62,
				(byte) 0x20, (byte) 0x41, (byte) 0x37, (byte) 0x16,
				(byte) 0x96, (byte) 0x63, (byte) 0xCF, (byte) 0xCC,
				(byte) 0x0B, (byte) 0x06, (byte) 0xE6, (byte) 0x7E,
				(byte) 0x21, (byte) 0x09, (byte) 0xEB, (byte) 0xA4,
				(byte) 0x1B, (byte) 0xC6, (byte) 0x7F, (byte) 0xF2,
				(byte) 0x0C, (byte) 0xC8, (byte) 0xAC, (byte) 0x80,
				(byte) 0xD7, (byte) 0xB6, (byte) 0xEE, (byte) 0x1A,
				(byte) 0x95, (byte) 0x46, (byte) 0x5B, (byte) 0x3B,
				(byte) 0x26, (byte) 0x57, (byte) 0x53, (byte) 0x3E,
				(byte) 0xA5, (byte) 0x6D, (byte) 0x92, (byte) 0xD5,
				(byte) 0x39, (byte) 0xE5, (byte) 0x06, (byte) 0x43,
				(byte) 0x60, (byte) 0xEA, (byte) 0x48, (byte) 0x50,
				(byte) 0xFE, (byte) 0xD2, (byte) 0xD1, (byte) 0xBF };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x30, (byte) 0x12, (byte) 0x30 };
		CheckSum = new byte[]{ (byte) 0xEE, (byte) 0x23, (byte) 0xB6, (byte) 0x16,
				(byte) 0xC9, (byte) 0x5C, (byte) 0x02, (byte) 0x65,
				(byte) 0x2A, (byte) 0xD1, (byte) 0x88, (byte) 0x60,
				(byte) 0xE4, (byte) 0x87, (byte) 0x87, (byte) 0xC0,
				(byte) 0x79, (byte) 0xE8, (byte) 0xE8, (byte) 0x5A };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		//=============================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		KeyID = (byte) 0x09;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) (byte) 0xB0;
		Modul = new byte[]{ (byte) 0xEB, (byte) 0x37, (byte) 0x4D, (byte) 0xFC,
				(byte) 0x5A, (byte) 0x96, (byte) 0xB7, (byte) 0x1D,
				(byte) 0x28, (byte) 0x63, (byte) 0x87, (byte) 0x5E,
				(byte) 0xDA, (byte) 0x2E, (byte) 0xAF, (byte) 0xB9,
				(byte) 0x6B, (byte) 0x1B, (byte) 0x43, (byte) 0x9D,
				(byte) 0x3E, (byte) 0xCE, (byte) 0x0B, (byte) 0x18,
				(byte) 0x26, (byte) 0xA2, (byte) 0x67, (byte) 0x2E,
				(byte) 0xEE, (byte) 0xFA, (byte) 0x79, (byte) 0x90,
				(byte) 0x28, (byte) 0x67, (byte) 0x76, (byte) 0xF8,
				(byte) 0xBD, (byte) 0x98, (byte) 0x9A, (byte) 0x15,
				(byte) 0x14, (byte) 0x1A, (byte) 0x75, (byte) 0xC3,
				(byte) 0x84, (byte) 0xDF, (byte) 0xC1, (byte) 0x4F,
				(byte) 0xEF, (byte) 0x92, (byte) 0x43, (byte) 0xAA,
				(byte) 0xB3, (byte) 0x27, (byte) 0x07, (byte) 0x65,
				(byte) 0x9B, (byte) 0xE9, (byte) 0xE4, (byte) 0x79,
				(byte) 0x7A, (byte) 0x24, (byte) 0x7C, (byte) 0x2F,
				(byte) 0x0B, (byte) 0x6D, (byte) 0x99, (byte) 0x37,
				(byte) 0x2F, (byte) 0x38, (byte) 0x4A, (byte) 0xF6,
				(byte) 0x2F, (byte) 0xE2, (byte) 0x3B, (byte) 0xC5,
				(byte) 0x4B, (byte) 0xCD, (byte) 0xC5, (byte) 0x7A,
				(byte) 0x9A, (byte) 0xCD, (byte) 0x1D, (byte) 0x55,
				(byte) 0x85, (byte) 0xC3, (byte) 0x03, (byte) 0xF2,
				(byte) 0x01, (byte) 0xEF, (byte) 0x4E, (byte) 0x8B,
				(byte) 0x80, (byte) 0x6A, (byte) 0xFB, (byte) 0x80,
				(byte) 0x9D, (byte) 0xB1, (byte) 0xA3, (byte) 0xDB,
				(byte) 0x1C, (byte) 0xD1, (byte) 0x12, (byte) 0xAC,
				(byte) 0x88, (byte) 0x4F, (byte) 0x16, (byte) 0x4A,
				(byte) 0x67, (byte) 0xB9, (byte) 0x9C, (byte) 0x7D,
				(byte) 0x6E, (byte) 0x5A, (byte) 0x8A, (byte) 0x6D,
				(byte) 0xF1, (byte) 0xD3, (byte) 0xCA, (byte) 0xE6,
				(byte) 0xD7, (byte) 0xED, (byte) 0x3D, (byte) 0x5B,
				(byte) 0xE7, (byte) 0x25, (byte) 0xB2, (byte) 0xDE,
				(byte) 0x4A, (byte) 0xDE, (byte) 0x23, (byte) 0xFA,
				(byte) 0x67, (byte) 0x9B, (byte) 0xF4, (byte) 0xEB,
				(byte) 0x15, (byte) 0xA9, (byte) 0x3D, (byte) 0x8A,
				(byte) 0x6E, (byte) 0x29, (byte) 0xC7, (byte) 0xFF,
				(byte) 0xA1, (byte) 0xA7, (byte) 0x0D, (byte) 0xE2,
				(byte) 0xE5, (byte) 0x4F, (byte) 0x59, (byte) 0x3D,
				(byte) 0x90, (byte) 0x8A, (byte) 0x3B, (byte) 0xF9,
				(byte) 0xEB, (byte) 0xBD, (byte) 0x76, (byte) 0x0B,
				(byte) 0xBF, (byte) 0xDC, (byte) 0x8D, (byte) 0xB8,
				(byte) 0xB5, (byte) 0x44, (byte) 0x97, (byte) 0xE6,
				(byte) 0xC5, (byte) 0xBE, (byte) 0x0E, (byte) 0x4A,
				(byte) 0x4D, (byte) 0xAC, (byte) 0x29, (byte) 0xE5 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x30, (byte) 0x12, (byte) 0x30 };
		CheckSum = new byte[]{ (byte) 0xA0, (byte) 0x75, (byte) 0x30, (byte) 0x6E,
				(byte) 0xAB, (byte) 0x00, (byte) 0x45, (byte) 0xBA,
				(byte) 0xF7, (byte) 0x2C, (byte) 0xDD, (byte) 0x33,
				(byte) 0xB3, (byte) 0xB6, (byte) 0x78, (byte) 0x77,
				(byte) 0x9D, (byte) 0xE1, (byte) 0xF5, (byte) 0x27 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		//======================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0x0A;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) (byte) 0x80;
		Modul = new byte[]{ (byte) 0xB2, (byte) 0xAB, (byte) 0x1B, (byte) 0x6E,
				(byte) 0x9A, (byte) 0xC5, (byte) 0x5A, (byte) 0x75,
				(byte) 0xAD, (byte) 0xFD, (byte) 0x5B, (byte) 0xBC,
				(byte) 0x34, (byte) 0x49, (byte) 0x0E, (byte) 0x53,
				(byte) 0xC4, (byte) 0xC3, (byte) 0x38, (byte) 0x1F,
				(byte) 0x34, (byte) 0xE6, (byte) 0x0E, (byte) 0x7F,
				(byte) 0xAC, (byte) 0x21, (byte) 0xCC, (byte) 0x2B,
				(byte) 0x26, (byte) 0xDD, (byte) 0x34, (byte) 0x46,
				(byte) 0x2B, (byte) 0x64, (byte) 0xA6, (byte) 0xFA,
				(byte) 0xE2, (byte) 0x49, (byte) 0x5E, (byte) 0xD1,
				(byte) 0xDD, (byte) 0x38, (byte) 0x3B, (byte) 0x81,
				(byte) 0x38, (byte) 0xBE, (byte) 0xA1, (byte) 0x00,
				(byte) 0xFF, (byte) 0x9B, (byte) 0x7A, (byte) 0x11,
				(byte) 0x18, (byte) 0x17, (byte) 0xE7, (byte) 0xB9,
				(byte) 0x86, (byte) 0x9A, (byte) 0x97, (byte) 0x42,
				(byte) 0xB1, (byte) 0x9E, (byte) 0x5C, (byte) 0x9D,
				(byte) 0xAC, (byte) 0x56, (byte) 0xF8, (byte) 0xB8,
				(byte) 0x82, (byte) 0x7F, (byte) 0x11, (byte) 0xB0,
				(byte) 0x5A, (byte) 0x08, (byte) 0xEC, (byte) 0xCF,
				(byte) 0x9E, (byte) 0x8D, (byte) 0x5E, (byte) 0x85,
				(byte) 0xB0, (byte) 0xF7, (byte) 0xCF, (byte) 0xA6,
				(byte) 0x44, (byte) 0xEF, (byte) 0xF3, (byte) 0xE9,
				(byte) 0xB7, (byte) 0x96, (byte) 0x68, (byte) 0x8F,
				(byte) 0x38, (byte) 0xE0, (byte) 0x06, (byte) 0xDE,
				(byte) 0xB2, (byte) 0x1E, (byte) 0x10, (byte) 0x1C,
				(byte) 0x01, (byte) 0x02, (byte) 0x89, (byte) 0x03,
				(byte) 0xA0, (byte) 0x60, (byte) 0x23, (byte) 0xAC,
				(byte) 0x5A, (byte) 0xAB, (byte) 0x86, (byte) 0x35,
				(byte) 0xF8, (byte) 0xE3, (byte) 0x07, (byte) 0xA5,
				(byte) 0x3A, (byte) 0xC7, (byte) 0x42, (byte) 0xBD,
				(byte) 0xCE, (byte) 0x6A, (byte) 0x28, (byte) 0x3F,
				(byte) 0x58, (byte) 0x5F, (byte) 0x48, (byte) 0xEF };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x30, (byte) 0x12, (byte) 0x30 };
		CheckSum = new byte[]{ (byte) 0xC8, (byte) 0x8B, (byte) 0xE6, (byte) 0xB2,
				(byte) 0x41, (byte) 0x7C, (byte) 0x4F, (byte) 0x94,
				(byte) 0x1C, (byte) 0x93, (byte) 0x71, (byte) 0xEA,
				(byte) 0x35, (byte) 0xA3, (byte) 0x77, (byte) 0x15,
				(byte) 0x87, (byte) 0x67, (byte) 0xE4, (byte) 0xE3 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));


		//==============================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		KeyID = (byte) 0x0B;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) (byte) 0xF8;
		Modul = new byte[]{ (byte) 0xCF, (byte) 0x9F, (byte) 0xDF, (byte) 0x46,
				(byte) 0xB3, (byte) 0x56, (byte) 0x37, (byte) 0x8E,
				(byte) 0x9A, (byte) 0xF3, (byte) 0x11, (byte) 0xB0,
				(byte) 0xF9, (byte) 0x81, (byte) 0xB2, (byte) 0x1A,
				(byte) 0x1F, (byte) 0x22, (byte) 0xF2, (byte) 0x50,
				(byte) 0xFB, (byte) 0x11, (byte) 0xF5, (byte) 0x5C,
				(byte) 0x95, (byte) 0x87, (byte) 0x09, (byte) 0xE3,
				(byte) 0xC7, (byte) 0x24, (byte) 0x19, (byte) 0x18,
				(byte) 0x29, (byte) 0x34, (byte) 0x83, (byte) 0x28,
				(byte) 0x9E, (byte) 0xAE, (byte) 0x68, (byte) 0x8A,
				(byte) 0x09, (byte) 0x4C, (byte) 0x02, (byte) 0xC3,
				(byte) 0x44, (byte) 0xE2, (byte) 0x99, (byte) 0x9F,
				(byte) 0x31, (byte) 0x5A, (byte) 0x72, (byte) 0x84,
				(byte) 0x1F, (byte) 0x48, (byte) 0x9E, (byte) 0x24,
				(byte) 0xB1, (byte) 0xBA, (byte) 0x00, (byte) 0x56,
				(byte) 0xCF, (byte) 0xAB, (byte) 0x3B, (byte) 0x47,
				(byte) 0x9D, (byte) 0x0E, (byte) 0x82, (byte) 0x64,
				(byte) 0x52, (byte) 0x37, (byte) 0x5D, (byte) 0xCD,
				(byte) 0xBB, (byte) 0x67, (byte) 0xE9, (byte) 0x7E,
				(byte) 0xC2, (byte) 0xAA, (byte) 0x66, (byte) 0xF4,
				(byte) 0x60, (byte) 0x1D, (byte) 0x77, (byte) 0x4F,
				(byte) 0xEA, (byte) 0xEF, (byte) 0x77, (byte) 0x5A,
				(byte) 0xCC, (byte) 0xC6, (byte) 0x21, (byte) 0xBF,
				(byte) 0xEB, (byte) 0x65, (byte) 0xFB, (byte) 0x00,
				(byte) 0x53, (byte) 0xFC, (byte) 0x5F, (byte) 0x39,
				(byte) 0x2A, (byte) 0xA5, (byte) 0xE1, (byte) 0xD4,
				(byte) 0xC4, (byte) 0x1A, (byte) 0x4D, (byte) 0xE9,
				(byte) 0xFF, (byte) 0xDF, (byte) 0xDF, (byte) 0x13,
				(byte) 0x27, (byte) 0xC4, (byte) 0xBB, (byte) 0x87,
				(byte) 0x4F, (byte) 0x1F, (byte) 0x63, (byte) 0xA5,
				(byte) 0x99, (byte) 0xEE, (byte) 0x39, (byte) 0x02,
				(byte) 0xFE, (byte) 0x95, (byte) 0xE7, (byte) 0x29,
				(byte) 0xFD, (byte) 0x78, (byte) 0xD4, (byte) 0x23,
				(byte) 0x4D, (byte) 0xC7, (byte) 0xE6, (byte) 0xCF,
				(byte) 0x1A, (byte) 0xBA, (byte) 0xBA, (byte) 0xA3,
				(byte) 0xF6, (byte) 0xDB, (byte) 0x29, (byte) 0xB7,
				(byte) 0xF0, (byte) 0x5D, (byte) 0x1D, (byte) 0x90,
				(byte) 0x1D, (byte) 0x2E, (byte) 0x76, (byte) 0xA6,
				(byte) 0x06, (byte) 0xA8, (byte) 0xCB, (byte) 0xFF,
				(byte) 0xFF, (byte) 0xEC, (byte) 0xBD, (byte) 0x91,
				(byte) 0x8F, (byte) 0xA2, (byte) 0xD2, (byte) 0x78,
				(byte) 0xBD, (byte) 0xB4, (byte) 0x3B, (byte) 0x04,
				(byte) 0x34, (byte) 0xF5, (byte) 0xD4, (byte) 0x51,
				(byte) 0x34, (byte) 0xBE, (byte) 0x1C, (byte) 0x27,
				(byte) 0x81, (byte) 0xD1, (byte) 0x57, (byte) 0xD5,
				(byte) 0x01, (byte) 0xFF, (byte) 0x43, (byte) 0xE5,
				(byte) 0xF1, (byte) 0xC4, (byte) 0x70, (byte) 0x96,
				(byte) 0x7C, (byte) 0xD5, (byte) 0x7C, (byte) 0xE5,
				(byte) 0x3B, (byte) 0x64, (byte) 0xD8, (byte) 0x29,
				(byte) 0x74, (byte) 0xC8, (byte) 0x27, (byte) 0x59,
				(byte) 0x37, (byte) 0xC5, (byte) 0xD8, (byte) 0x50,
				(byte) 0x2A, (byte) 0x12, (byte) 0x52, (byte) 0xA8,
				(byte) 0xA5, (byte) 0xD6, (byte) 0x08, (byte) 0x8A,
				(byte) 0x25, (byte) 0x9B, (byte) 0x69, (byte) 0x4F,
				(byte) 0x98, (byte) 0x64, (byte) 0x8D, (byte) 0x9A,
				(byte) 0xF2, (byte) 0xCB, (byte) 0x0E, (byte) 0xFD,
				(byte) 0x9D, (byte) 0x94, (byte) 0x3C, (byte) 0x69,
				(byte) 0xF8, (byte) 0x96, (byte) 0xD4, (byte) 0x9F,
				(byte) 0xA3, (byte) 0x97, (byte) 0x02, (byte) 0x16,
				(byte) 0x2A, (byte) 0xCB, (byte) 0x5A, (byte) 0xF2,
				(byte) 0x9B, (byte) 0x90, (byte) 0xBA, (byte) 0xDE,
				(byte) 0x00, (byte) 0x5B, (byte) 0xC1, (byte) 0x57 };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x30, (byte) 0x12, (byte) 0x30 };
		CheckSum = new byte[]{ (byte) 0xBD, (byte) 0x33, (byte) 0x1F, (byte) 0x99,
				(byte) 0x96, (byte) 0xA4, (byte) 0x90, (byte) 0xB3,
				(byte) 0x3C, (byte) 0x13, (byte) 0x44, (byte) 0x10,
				(byte) 0x66, (byte) 0xA0, (byte) 0x9A, (byte) 0xD3,
				(byte) 0xFE, (byte) 0xB5, (byte) 0xF6, (byte) 0x6C };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		//========================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0x0C;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) (byte) 0x90;
		Modul = new byte[]{ (byte) 0xDE, (byte) 0xD9, (byte) 0xE1, (byte) 0xBC,
				(byte) 0x8E, (byte) 0x74, (byte) 0x9C, (byte) 0xAD,
				(byte) 0x74, (byte) 0x94, (byte) 0x84, (byte) 0xBF,
				(byte) 0xB4, (byte) 0x72, (byte) 0x44, (byte) 0x5B,
				(byte) 0xC8, (byte) 0x1F, (byte) 0xFA, (byte) 0xA8,
				(byte) 0x97, (byte) 0x07, (byte) 0x64, (byte) 0x8C,
				(byte) 0x34, (byte) 0x2A, (byte) 0xA3, (byte) 0x0D,
				(byte) 0x1B, (byte) 0xE6, (byte) 0x0D, (byte) 0x5E,
				(byte) 0xD0, (byte) 0xF6, (byte) 0xCE, (byte) 0xAB,
				(byte) 0xA2, (byte) 0x5C, (byte) 0x68, (byte) 0x3D,
				(byte) 0x45, (byte) 0x03, (byte) 0xCB, (byte) 0x11,
				(byte) 0xCA, (byte) 0xF9, (byte) 0x1A, (byte) 0x39,
				(byte) 0x72, (byte) 0x75, (byte) 0x93, (byte) 0xCF,
				(byte) 0x2B, (byte) 0xEE, (byte) 0xAE, (byte) 0x80,
				(byte) 0x32, (byte) 0xEF, (byte) 0xAC, (byte) 0xC4,
				(byte) 0x4F, (byte) 0xDF, (byte) 0x8D, (byte) 0xA3,
				(byte) 0x1D, (byte) 0x60, (byte) 0x07, (byte) 0x13,
				(byte) 0x9D, (byte) 0x45, (byte) 0x95, (byte) 0xE8,
				(byte) 0x65, (byte) 0x5C, (byte) 0x74, (byte) 0x95,
				(byte) 0xCF, (byte) 0x46, (byte) 0xA9, (byte) 0xD5,
				(byte) 0x93, (byte) 0xA8, (byte) 0x3E, (byte) 0x3C,
				(byte) 0x65, (byte) 0xB2, (byte) 0xCB, (byte) 0xF2,
				(byte) 0xAF, (byte) 0x1E, (byte) 0xEA, (byte) 0x02,
				(byte) 0xD1, (byte) 0xF9, (byte) 0x69, (byte) 0x51,
				(byte) 0xA9, (byte) 0x46, (byte) 0x61, (byte) 0x6B,
				(byte) 0x5A, (byte) 0xB2, (byte) 0x1C, (byte) 0xA0,
				(byte) 0xBF, (byte) 0x34, (byte) 0xD1, (byte) 0x2D,
				(byte) 0x05, (byte) 0xF6, (byte) 0xAE, (byte) 0x18,
				(byte) 0x35, (byte) 0x08, (byte) 0xA7, (byte) 0xAC,
				(byte) 0x7A, (byte) 0x46, (byte) 0x91, (byte) 0x3B,
				(byte) 0xDC, (byte) 0xE5, (byte) 0xFD, (byte) 0xC3,
				(byte) 0x91, (byte) 0x4C, (byte) 0xA7, (byte) 0x50,
				(byte) 0x01, (byte) 0x8B, (byte) 0x13, (byte) 0x0C,
				(byte) 0xA5, (byte) 0xBA, (byte) 0xD4, (byte) 0x9A,
				(byte) 0xD8, (byte) 0xC0, (byte) 0x22, (byte) 0x91,
				(byte) 0xAC, (byte) 0xA5, (byte) 0xCF, (byte) 0xFD };
		ExponentLen = (byte) 0x01;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x30, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xD7, (byte) 0xDD, (byte) 0x7A, (byte) 0xAC,
				(byte) 0x8B, (byte) 0x67, (byte) 0xA9, (byte) 0xA3,
				(byte) 0xCC, (byte) 0x72, (byte) 0xF3, (byte) 0x5F,
				(byte) 0x5D, (byte) 0x96, (byte) 0xF2, (byte) 0x65,
				(byte) 0xE1, (byte) 0x6E, (byte) 0xB3, (byte) 0xFE };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		

		//======================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x03 };
		KeyID = (byte) 0x50;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xD1, (byte) 0x11, (byte) 0x97, (byte) 0x59,
				(byte) 0x00, (byte) 0x57, (byte) 0xB8, (byte) 0x41,
				(byte) 0x96, (byte) 0xC2, (byte) 0xF4, (byte) 0xD1,
				(byte) 0x1A, (byte) 0x8F, (byte) 0x3C, (byte) 0x05,
				(byte) 0x40, (byte) 0x8F, (byte) 0x42, (byte) 0x2A,
				(byte) 0x35, (byte) 0xD7, (byte) 0x02, (byte) 0xF9,
				(byte) 0x01, (byte) 0x06, (byte) 0xEA, (byte) 0x5B,
				(byte) 0x01, (byte) 0x9B, (byte) 0xB2, (byte) 0x8A,
				(byte) 0xE6, (byte) 0x07, (byte) 0xAA, (byte) 0x9C,
				(byte) 0xDE, (byte) 0xBC, (byte) 0xD0, (byte) 0xD8,
				(byte) 0x1A, (byte) 0x38, (byte) 0xD4, (byte) 0x8C,
				(byte) 0x7E, (byte) 0xBB, (byte) 0x00, (byte) 0x62,
				(byte) 0xD2, (byte) 0x87, (byte) 0x36, (byte) 0x9E,
				(byte) 0xC0, (byte) 0xC4, (byte) 0x21, (byte) 0x24,
				(byte) 0x24, (byte) 0x6A, (byte) 0xC3, (byte) 0x0D,
				(byte) 0x80, (byte) 0xCD, (byte) 0x60, (byte) 0x2A,
				(byte) 0xB7, (byte) 0x23, (byte) 0x8D, (byte) 0x51,
				(byte) 0x08, (byte) 0x4D, (byte) 0xED, (byte) 0x46,
				(byte) 0x98, (byte) 0x16, (byte) 0x2C, (byte) 0x59,
				(byte) 0xD2, (byte) 0x5E, (byte) 0xAC, (byte) 0x1E,
				(byte) 0x66, (byte) 0x25, (byte) 0x5B, (byte) 0x4D,
				(byte) 0xB2, (byte) 0x35, (byte) 0x25, (byte) 0x26,
				(byte) 0xEF, (byte) 0x09, (byte) 0x82, (byte) 0xC3,
				(byte) 0xB8, (byte) 0xAD, (byte) 0x3D, (byte) 0x1C,
				(byte) 0xCE, (byte) 0x85, (byte) 0xB0, (byte) 0x1D,
				(byte) 0xB5, (byte) 0x78, (byte) 0x8E, (byte) 0x75,
				(byte) 0xE0, (byte) 0x9F, (byte) 0x44, (byte) 0xBE,
				(byte) 0x73, (byte) 0x61, (byte) 0x36, (byte) 0x6D,
				(byte) 0xEF, (byte) 0x9D, (byte) 0x1E, (byte) 0x13,
				(byte) 0x17, (byte) 0xB0, (byte) 0x5E, (byte) 0x5D,
				(byte) 0x0F, (byte) 0xF5, (byte) 0x29, (byte) 0x0F,
				(byte) 0x88, (byte) 0xA0, (byte) 0xDB, (byte) 0x47 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB7, (byte) 0x69, (byte) 0x77, (byte) 0x56,
				(byte) 0x68, (byte) 0xCA, (byte) 0xCB, (byte) 0x5D,
				(byte) 0x22, (byte) 0xA6, (byte) 0x47, (byte) 0xD1,
				(byte) 0xD9, (byte) 0x93, (byte) 0x14, (byte) 0x1E,
				(byte) 0xDA, (byte) 0xB7, (byte) 0x23, (byte) 0x7B };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// VISA 1152 bits Test Key 51
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		KeyID = (byte) 0x51;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xDB, (byte) 0x5F, (byte) 0xA2, (byte) 0x9D,
				(byte) 0x1F, (byte) 0xDA, (byte) 0x8C, (byte) 0x16,
				(byte) 0x34, (byte) 0xB0, (byte) 0x4D, (byte) 0xCC,
				(byte) 0xFF, (byte) 0x14, (byte) 0x8A, (byte) 0xBE,
				(byte) 0xE6, (byte) 0x3C, (byte) 0x77, (byte) 0x20,
				(byte) 0x35, (byte) 0xC7, (byte) 0x98, (byte) 0x51,
				(byte) 0xD3, (byte) 0x51, (byte) 0x21, (byte) 0x07,
				(byte) 0x58, (byte) 0x6E, (byte) 0x02, (byte) 0xA9,
				(byte) 0x17, (byte) 0xF7, (byte) 0xC7, (byte) 0xE8,
				(byte) 0x85, (byte) 0xE7, (byte) 0xC4, (byte) 0xA7,
				(byte) 0xD5, (byte) 0x29, (byte) 0x71, (byte) 0x0A,
				(byte) 0x14, (byte) 0x53, (byte) 0x34, (byte) 0xCE,
				(byte) 0x67, (byte) 0xDC, (byte) 0x41, (byte) 0x2C,
				(byte) 0xB1, (byte) 0x59, (byte) 0x7B, (byte) 0x77,
				(byte) 0xAA, (byte) 0x25, (byte) 0x43, (byte) 0xB9,
				(byte) 0x8D, (byte) 0x19, (byte) 0xCF, (byte) 0x2C,
				(byte) 0xB8, (byte) 0x0C, (byte) 0x52, (byte) 0x2B,
				(byte) 0xDB, (byte) 0xEA, (byte) 0x0F, (byte) 0x1B,
				(byte) 0x11, (byte) 0x3F, (byte) 0xA2, (byte) 0xC8,
				(byte) 0x62, (byte) 0x16, (byte) 0xC8, (byte) 0xC6,
				(byte) 0x10, (byte) 0xA2, (byte) 0xD5, (byte) 0x8F,
				(byte) 0x29, (byte) 0xCF, (byte) 0x33, (byte) 0x55,
				(byte) 0xCE, (byte) 0xB1, (byte) 0xBD, (byte) 0x3E,
				(byte) 0xF4, (byte) 0x10, (byte) 0xD1, (byte) 0xED,
				(byte) 0xD1, (byte) 0xF7, (byte) 0xAE, (byte) 0x0F,
				(byte) 0x16, (byte) 0x89, (byte) 0x79, (byte) 0x79,
				(byte) 0xDE, (byte) 0x28, (byte) 0xC6, (byte) 0xEF,
				(byte) 0x29, (byte) 0x3E, (byte) 0x0A, (byte) 0x19,
				(byte) 0x28, (byte) 0x2B, (byte) 0xD1, (byte) 0xD7,
				(byte) 0x93, (byte) 0xF1, (byte) 0x33, (byte) 0x15,
				(byte) 0x23, (byte) 0xFC, (byte) 0x71, (byte) 0xA2,
				(byte) 0x28, (byte) 0x80, (byte) 0x04, (byte) 0x68,
				(byte) 0xC0, (byte) 0x1A, (byte) 0x36, (byte) 0x53,
				(byte) 0xD1, (byte) 0x4C, (byte) 0x6B, (byte) 0x48,
				(byte) 0x51, (byte) 0xA5, (byte) 0xC0, (byte) 0x29,
				(byte) 0x47, (byte) 0x8E, (byte) 0x75, (byte) 0x7F };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB9, (byte) 0xD2, (byte) 0x48, (byte) 0x07,
				(byte) 0x5A, (byte) 0x3F, (byte) 0x23, (byte) 0xB5,
				(byte) 0x22, (byte) 0xFE, (byte) 0x45, (byte) 0x57,
				(byte) 0x3E, (byte) 0x04, (byte) 0x37, (byte) 0x4D,
				(byte) 0xC4, (byte) 0x99, (byte) 0x5D, (byte) 0x71 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		// VISA 1984 bits Test Key 53
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x03 };
		KeyID = (byte) 0x53;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xBC, (byte) 0xD8, (byte) 0x37, (byte) 0x21,
				(byte) 0xBE, (byte) 0x52, (byte) 0xCC, (byte) 0xCC,
				(byte) 0x4B, (byte) 0x64, (byte) 0x57, (byte) 0x32,
				(byte) 0x1F, (byte) 0x22, (byte) 0xA7, (byte) 0xDC,
				(byte) 0x76, (byte) 0x9F, (byte) 0x54, (byte) 0xEB,
				(byte) 0x80, (byte) 0x25, (byte) 0x91, (byte) 0x3B,
				(byte) 0xE8, (byte) 0x04, (byte) 0xD9, (byte) 0xEA,
				(byte) 0xBB, (byte) 0xFA, (byte) 0x19, (byte) 0xB3,
				(byte) 0xD7, (byte) 0xC5, (byte) 0xD3, (byte) 0xCA,
				(byte) 0x65, (byte) 0x8D, (byte) 0x76, (byte) 0x8C,
				(byte) 0xAF, (byte) 0x57, (byte) 0x06, (byte) 0x7E,
				(byte) 0xEC, (byte) 0x83, (byte) 0xC7, (byte) 0xE6,
				(byte) 0xE9, (byte) 0xF8, (byte) 0x1D, (byte) 0x05,
				(byte) 0x86, (byte) 0x70, (byte) 0x3E, (byte) 0xD9,
				(byte) 0xDD, (byte) 0xDA, (byte) 0xDD, (byte) 0x20,
				(byte) 0x67, (byte) 0x5D, (byte) 0x63, (byte) 0x42,
				(byte) 0x49, (byte) 0x80, (byte) 0xB1, (byte) 0x0E,
				(byte) 0xB3, (byte) 0x64, (byte) 0xE8, (byte) 0x1E,
				(byte) 0xB3, (byte) 0x7D, (byte) 0xB4, (byte) 0x0E,
				(byte) 0xD1, (byte) 0x00, (byte) 0x34, (byte) 0x4C,
				(byte) 0x92, (byte) 0x88, (byte) 0x86, (byte) 0xFF,
				(byte) 0x4C, (byte) 0xCC, (byte) 0x37, (byte) 0x20,
				(byte) 0x3E, (byte) 0xE6, (byte) 0x10, (byte) 0x6D,
				(byte) 0x5B, (byte) 0x59, (byte) 0xD1, (byte) 0xAC,
				(byte) 0x10, (byte) 0x2E, (byte) 0x2C, (byte) 0xD2,
				(byte) 0xD7, (byte) 0xAC, (byte) 0x17, (byte) 0xF4,
				(byte) 0xD9, (byte) 0x6C, (byte) 0x39, (byte) 0x8E,
				(byte) 0x5F, (byte) 0xD9, (byte) 0x93, (byte) 0xEC,
				(byte) 0xB4, (byte) 0xFF, (byte) 0xDF, (byte) 0x79,
				(byte) 0xB1, (byte) 0x75, (byte) 0x47, (byte) 0xFF,
				(byte) 0x9F, (byte) 0xA2, (byte) 0xAA, (byte) 0x8E,
				(byte) 0xEF, (byte) 0xD6, (byte) 0xCB, (byte) 0xDA,
				(byte) 0x12, (byte) 0x4C, (byte) 0xBB, (byte) 0x17,
				(byte) 0xA0, (byte) 0xF8, (byte) 0x52, (byte) 0x81,
				(byte) 0x46, (byte) 0x38, (byte) 0x71, (byte) 0x35,
				(byte) 0xE2, (byte) 0x26, (byte) 0xB0, (byte) 0x05,
				(byte) 0xA4, (byte) 0x74, (byte) 0xB9, (byte) 0x06,
				(byte) 0x2F, (byte) 0xF2, (byte) 0x64, (byte) 0xD2,
				(byte) 0xFF, (byte) 0x8E, (byte) 0xFA, (byte) 0x36,
				(byte) 0x81, (byte) 0x4A, (byte) 0xA2, (byte) 0x95,
				(byte) 0x00, (byte) 0x65, (byte) 0xB1, (byte) 0xB0,
				(byte) 0x4C, (byte) 0x0A, (byte) 0x1A, (byte) 0xE9,
				(byte) 0xB2, (byte) 0xF6, (byte) 0x9D, (byte) 0x4A,
				(byte) 0x4A, (byte) 0xA9, (byte) 0x79, (byte) 0xD6,
				(byte) 0xCE, (byte) 0x95, (byte) 0xFE, (byte) 0xE9,
				(byte) 0x48, (byte) 0x5E, (byte) 0xD0, (byte) 0xA0,
				(byte) 0x3A, (byte) 0xEE, (byte) 0x9B, (byte) 0xD9,
				(byte) 0x53, (byte) 0xE8, (byte) 0x1C, (byte) 0xFD,
				(byte) 0x1E, (byte) 0xF6, (byte) 0xE8, (byte) 0x14,
				(byte) 0xDF, (byte) 0xD3, (byte) 0xC2, (byte) 0xCE,
				(byte) 0x37, (byte) 0xAE, (byte) 0xFA, (byte) 0x38,
				(byte) 0xC1, (byte) 0xF9, (byte) 0x87, (byte) 0x73,
				(byte) 0x71, (byte) 0xE9, (byte) 0x1D, (byte) 0x6A,
				(byte) 0x5E, (byte) 0xB5, (byte) 0x9F, (byte) 0xDE,
				(byte) 0xDF, (byte) 0x75, (byte) 0xD3, (byte) 0x32,
				(byte) 0x5F, (byte) 0xA3, (byte) 0xCA, (byte) 0x66,
				(byte) 0xCD, (byte) 0xFB, (byte) 0xA0, (byte) 0xE5,
				(byte) 0x71, (byte) 0x46, (byte) 0xCC, (byte) 0x78,
				(byte) 0x98, (byte) 0x18, (byte) 0xFF, (byte) 0x06,
				(byte) 0xBE, (byte) 0x5F, (byte) 0xCC, (byte) 0x50,
				(byte) 0xAB, (byte) 0xD3, (byte) 0x62, (byte) 0xAE,
				(byte) 0x4B, (byte) 0x80, (byte) 0x99, (byte) 0x6D };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xAC, (byte) 0x21, (byte) 0x3A, (byte) 0x2E,
				(byte) 0x0D, (byte) 0x2C, (byte) 0x0C, (byte) 0xA3,
				(byte) 0x5A, (byte) 0xD0, (byte) 0x20, (byte) 0x13,
				(byte) 0x23, (byte) 0x53, (byte) 0x6D, (byte) 0x58,
				(byte) 0x09, (byte) 0x7E, (byte) 0x4E, (byte) 0x57 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		// Test 896 bits Test Key E1
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99,
				(byte) 0x99 };
		KeyID = (byte) 0xE1;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 112;
		Modul = new byte[]{ (byte) 0x99, (byte) 0xC5, (byte) 0xB7, (byte) 0x0A,
				(byte) 0xA6, (byte) 0x1B, (byte) 0x4F, (byte) 0x4C,
				(byte) 0x51, (byte) 0xB6, (byte) 0xF9, (byte) 0x0B,
				(byte) 0x0E, (byte) 0x3B, (byte) 0xFB, (byte) 0x7A,
				(byte) 0x3E, (byte) 0xE0, (byte) 0xE7, (byte) 0xDB,
				(byte) 0x41, (byte) 0xBC, (byte) 0x46, (byte) 0x68,
				(byte) 0x88, (byte) 0xB3, (byte) 0xEC, (byte) 0x8E,
				(byte) 0x99, (byte) 0x77, (byte) 0xC7, (byte) 0x62,
				(byte) 0x40, (byte) 0x7E, (byte) 0xF1, (byte) 0xD7,
				(byte) 0x9E, (byte) 0x0A, (byte) 0xFB, (byte) 0x28,
				(byte) 0x23, (byte) 0x10, (byte) 0x0A, (byte) 0x02,
				(byte) 0x0C, (byte) 0x3E, (byte) 0x80, (byte) 0x20,
				(byte) 0x59, (byte) 0x3D, (byte) 0xB5, (byte) 0x0E,
				(byte) 0x90, (byte) 0xDB, (byte) 0xEA, (byte) 0xC1,
				(byte) 0x8B, (byte) 0x78, (byte) 0xD1, (byte) 0x3F,
				(byte) 0x96, (byte) 0xBB, (byte) 0x2F, (byte) 0x57,
				(byte) 0xEE, (byte) 0xDD, (byte) 0xC3, (byte) 0x0F,
				(byte) 0x25, (byte) 0x65, (byte) 0x92, (byte) 0x41,
				(byte) 0x7C, (byte) 0xDF, (byte) 0x73, (byte) 0x9C,
				(byte) 0xA6, (byte) 0x80, (byte) 0x4A, (byte) 0x10,
				(byte) 0xA2, (byte) 0x9D, (byte) 0x28, (byte) 0x06,
				(byte) 0xE7, (byte) 0x74, (byte) 0xBF, (byte) 0xA7,
				(byte) 0x51, (byte) 0xF2, (byte) 0x2C, (byte) 0xF3,
				(byte) 0xB6, (byte) 0x5B, (byte) 0x38, (byte) 0xF3,
				(byte) 0x7F, (byte) 0x91, (byte) 0xB4, (byte) 0xDA,
				(byte) 0xF8, (byte) 0xAE, (byte) 0xC9, (byte) 0xB8,
				(byte) 0x03, (byte) 0xF7, (byte) 0x61, (byte) 0x0E,
				(byte) 0x06, (byte) 0xAC, (byte) 0x9E, (byte) 0x6B };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xF8, (byte) 0x70, (byte) 0x7B, (byte) 0x9B,
				(byte) 0xED, (byte) 0xF0, (byte) 0x31, (byte) 0xE5,
				(byte) 0x8A, (byte) 0x9F, (byte) 0x84, (byte) 0x36,
				(byte) 0x31, (byte) 0xB9, (byte) 0x0C, (byte) 0x90,
				(byte) 0xD8, (byte) 0x0E, (byte) 0xD6, (byte) 0x95 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		// Test 896 bits Test Key E2
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99, (byte) 0x99 };
		KeyID = (byte) 0xE2;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 112;
		Modul = new byte[]{ (byte) 0xBD, (byte) 0x23, (byte) 0x2E, (byte) 0x34,
				(byte) 0x8B, (byte) 0x11, (byte) 0x8E, (byte) 0xB3,
				(byte) 0xF6, (byte) 0x44, (byte) 0x6E, (byte) 0xF4,
				(byte) 0xDA, (byte) 0x6C, (byte) 0x3B, (byte) 0xAC,
				(byte) 0x9B, (byte) 0x2A, (byte) 0xE5, (byte) 0x10,
				(byte) 0xC5, (byte) 0xAD, (byte) 0x10, (byte) 0x7D,
				(byte) 0x38, (byte) 0x34, (byte) 0x32, (byte) 0x55,
				(byte) 0xD2, (byte) 0x1C, (byte) 0x4B, (byte) 0xDF,
				(byte) 0x49, (byte) 0x52, (byte) 0xA4, (byte) 0x2E,
				(byte) 0x92, (byte) 0xC6, (byte) 0x33, (byte) 0xB1,
				(byte) 0xCE, (byte) 0x4B, (byte) 0xFE, (byte) 0xC3,
				(byte) 0x9A, (byte) 0xFB, (byte) 0x6D, (byte) 0xFE,
				(byte) 0x14, (byte) 0x7E, (byte) 0xCB, (byte) 0xB9,
				(byte) 0x1D, (byte) 0x68, (byte) 0x1D, (byte) 0xAC,
				(byte) 0x15, (byte) 0xFB, (byte) 0x0E, (byte) 0x19,
				(byte) 0x8E, (byte) 0x9A, (byte) 0x7E, (byte) 0x46,
				(byte) 0x36, (byte) 0xBD, (byte) 0xCA, (byte) 0x10,
				(byte) 0x7B, (byte) 0xCD, (byte) 0xA3, (byte) 0x38,
				(byte) 0x4F, (byte) 0xCB, (byte) 0x28, (byte) 0xB0,
				(byte) 0x6A, (byte) 0xFE, (byte) 0xF9, (byte) 0x0F,
				(byte) 0x09, (byte) 0x9E, (byte) 0x70, (byte) 0x84,
				(byte) 0x51, (byte) 0x1F, (byte) 0x3C, (byte) 0xC0,
				(byte) 0x10, (byte) 0xD4, (byte) 0x34, (byte) 0x35,
				(byte) 0x03, (byte) 0xE1, (byte) 0xE5, (byte) 0xA6,
				(byte) 0x72, (byte) 0x64, (byte) 0xB4, (byte) 0x36,
				(byte) 0x7D, (byte) 0xAA, (byte) 0x9A, (byte) 0x39,
				(byte) 0x49, (byte) 0x49, (byte) 0x92, (byte) 0x72,
				(byte) 0xE9, (byte) 0xB5, (byte) 0x02, (byte) 0x2F };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xC1, (byte) 0x05, (byte) 0x6A, (byte) 0xDC,
				(byte) 0xE9, (byte) 0xE6, (byte) 0xF7, (byte) 0x6E,
				(byte) 0xA7, (byte) 0x7C, (byte) 0x89, (byte) 0xCB,
				(byte) 0x83, (byte) 0x2F, (byte) 0x5A, (byte) 0x48,
				(byte) 0x17, (byte) 0x90, (byte) 0x7A, (byte) 0x1A };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		// Test 896 bits Test Key E3
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99, (byte) 0x99 };
		KeyID = (byte) 0xE3;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 112;
		Modul = new byte[]{ (byte) 0xBC, (byte) 0x01, (byte) 0xE1, (byte) 0x22,
				(byte) 0x23, (byte) 0xE1, (byte) 0xA4, (byte) 0x1E,
				(byte) 0x88, (byte) 0xBF, (byte) 0xFA, (byte) 0x80,
				(byte) 0x10, (byte) 0x93, (byte) 0xC5, (byte) 0xF8,
				(byte) 0xCE, (byte) 0xC5, (byte) 0xCD, (byte) 0x05,
				(byte) 0xDB, (byte) 0xBD, (byte) 0xBB, (byte) 0x78,
				(byte) 0x7C, (byte) 0xE8, (byte) 0x72, (byte) 0x49,
				(byte) 0xE8, (byte) 0x80, (byte) 0x83, (byte) 0x27,
				(byte) 0xC2, (byte) 0xD2, (byte) 0x18, (byte) 0x99,
				(byte) 0x1F, (byte) 0x97, (byte) 0xA1, (byte) 0x13,
				(byte) 0x1E, (byte) 0x8A, (byte) 0x25, (byte) 0xB0,
				(byte) 0x12, (byte) 0x2E, (byte) 0xD1, (byte) 0x1E,
				(byte) 0x70, (byte) 0x9C, (byte) 0x53, (byte) 0x3E,
				(byte) 0x88, (byte) 0x86, (byte) 0xA1, (byte) 0x25,
				(byte) 0x9A, (byte) 0xDD, (byte) 0xFD, (byte) 0xCB,
				(byte) 0xB3, (byte) 0x96, (byte) 0x60, (byte) 0x4D,
				(byte) 0x24, (byte) 0xE5, (byte) 0x05, (byte) 0xA2,
				(byte) 0xD0, (byte) 0xB5, (byte) 0xDD, (byte) 0x03,
				(byte) 0x84, (byte) 0xFB, (byte) 0x00, (byte) 0x02,
				(byte) 0xA7, (byte) 0xA1, (byte) 0xEB, (byte) 0x39,
				(byte) 0xBC, (byte) 0x8A, (byte) 0x11, (byte) 0x33,
				(byte) 0x9C, (byte) 0x7A, (byte) 0x94, (byte) 0x33,
				(byte) 0xA9, (byte) 0x48, (byte) 0x33, (byte) 0x77,
				(byte) 0x61, (byte) 0xBE, (byte) 0x73, (byte) 0xBC,
				(byte) 0x49, (byte) 0x7B, (byte) 0x8E, (byte) 0x58,
				(byte) 0x73, (byte) 0x6D, (byte) 0xA4, (byte) 0x63,
				(byte) 0x65, (byte) 0x38, (byte) 0xAD, (byte) 0x28,
				(byte) 0x2D, (byte) 0x3C, (byte) 0xD3, (byte) 0xDB };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x1B, (byte) 0x79, (byte) 0x5C, (byte) 0xBB,
				(byte) 0x08, (byte) 0x30, (byte) 0xE2, (byte) 0xC5,
				(byte) 0x23, (byte) 0x17, (byte) 0x04, (byte) 0xFA,
				(byte) 0x57, (byte) 0x42, (byte) 0x4D, (byte) 0x1C,
				(byte) 0x4E, (byte) 0x50, (byte) 0xF3, (byte) 0xE4 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		// Test 1024 bits Test Key E4
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99,
				(byte) 0x99 };
		KeyID = (byte) 0xE4;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xCB, (byte) 0xF2, (byte) 0xE4, (byte) 0x0F,
				(byte) 0x08, (byte) 0x36, (byte) 0xC9, (byte) 0xA5,
				(byte) 0xE3, (byte) 0x90, (byte) 0xA3, (byte) 0x7B,
				(byte) 0xE3, (byte) 0xB8, (byte) 0x09, (byte) 0xBD,
				(byte) 0xF5, (byte) 0xD7, (byte) 0x40, (byte) 0xCB,
				(byte) 0x1D, (byte) 0xA3, (byte) 0x8C, (byte) 0xFC,
				(byte) 0x05, (byte) 0xD5, (byte) 0xF8, (byte) 0xD6,
				(byte) 0xB7, (byte) 0x74, (byte) 0x5B, (byte) 0x5E,
				(byte) 0x9A, (byte) 0x3F, (byte) 0xA6, (byte) 0x96,
				(byte) 0x1E, (byte) 0x55, (byte) 0xFF, (byte) 0x20,
				(byte) 0x41, (byte) 0x21, (byte) 0x08, (byte) 0x52,
				(byte) 0x5E, (byte) 0x66, (byte) 0xB9, (byte) 0x70,
				(byte) 0xF9, (byte) 0x02, (byte) 0xF7, (byte) 0xFF,
				(byte) 0x43, (byte) 0x05, (byte) 0xDD, (byte) 0x83,
				(byte) 0x2C, (byte) 0xD0, (byte) 0x76, (byte) 0x3E,
				(byte) 0x3A, (byte) 0xA8, (byte) 0xB8, (byte) 0x17,
				(byte) 0x3F, (byte) 0x84, (byte) 0x77, (byte) 0x71,
				(byte) 0x00, (byte) 0xB1, (byte) 0x04, (byte) 0x7B,
				(byte) 0xD1, (byte) 0xD7, (byte) 0x44, (byte) 0x50,
				(byte) 0x93, (byte) 0x12, (byte) 0xA0, (byte) 0x93,
				(byte) 0x2E, (byte) 0xD2, (byte) 0x5F, (byte) 0xED,
				(byte) 0x52, (byte) 0xA9, (byte) 0x59, (byte) 0x43,
				(byte) 0x07, (byte) 0x68, (byte) 0xCC, (byte) 0xD9,
				(byte) 0x02, (byte) 0xFD, (byte) 0x8C, (byte) 0x8A,
				(byte) 0xD9, (byte) 0x12, (byte) 0x3E, (byte) 0x6A,
				(byte) 0xDD, (byte) 0xB3, (byte) 0xF3, (byte) 0x4B,
				(byte) 0x92, (byte) 0xE7, (byte) 0x92, (byte) 0x4D,
				(byte) 0x72, (byte) 0x9C, (byte) 0xB6, (byte) 0x47,
				(byte) 0x35, (byte) 0x33, (byte) 0xAE, (byte) 0x2B,
				(byte) 0x2B, (byte) 0x55, (byte) 0xBF, (byte) 0x0E,
				(byte) 0x44, (byte) 0x96, (byte) 0x4F, (byte) 0xDE,
				(byte) 0xA8, (byte) 0x44, (byte) 0x01, (byte) 0x17 };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xAC, (byte) 0x8D, (byte) 0xA3, (byte) 0xE1,
				(byte) 0x23, (byte) 0x24, (byte) 0xD7, (byte) 0x19,
				(byte) 0xC1, (byte) 0xD5, (byte) 0xC9, (byte) 0xE6,
				(byte) 0xE8, (byte) 0x58, (byte) 0x01, (byte) 0x57,
				(byte) 0x19, (byte) 0x6E, (byte) 0xFE, (byte) 0xB9 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		// Test 1024 bits Test Key E5
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99,
				(byte) 0x99 };
		KeyID = (byte) 0xE5;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xD4, (byte) 0xFD, (byte) 0xAE, (byte) 0x94,
				(byte) 0xDE, (byte) 0xDB, (byte) 0xEC, (byte) 0xC6,
				(byte) 0xD2, (byte) 0x0D, (byte) 0x38, (byte) 0xB0,
				(byte) 0x1E, (byte) 0x91, (byte) 0x82, (byte) 0x6D,
				(byte) 0xC6, (byte) 0x95, (byte) 0x43, (byte) 0x38,
				(byte) 0x37, (byte) 0x99, (byte) 0x17, (byte) 0xB2,
				(byte) 0xBB, (byte) 0x8A, (byte) 0x6B, (byte) 0x36,
				(byte) 0xB5, (byte) 0xD3, (byte) 0xB0, (byte) 0xC5,
				(byte) 0xED, (byte) 0xA6, (byte) 0x0B, (byte) 0x33,
				(byte) 0x74, (byte) 0x48, (byte) 0xBA, (byte) 0xFF,
				(byte) 0xEB, (byte) 0xCC, (byte) 0x3A, (byte) 0xBD,
				(byte) 0xBA, (byte) 0x86, (byte) 0x9E, (byte) 0x8D,
				(byte) 0xAD, (byte) 0xEC, (byte) 0x6C, (byte) 0x87,
				(byte) 0x01, (byte) 0x10, (byte) 0xC4, (byte) 0x2F,
				(byte) 0x5A, (byte) 0xAB, (byte) 0x90, (byte) 0xA1,
				(byte) 0x8F, (byte) 0x4F, (byte) 0x86, (byte) 0x7F,
				(byte) 0x72, (byte) 0xE3, (byte) 0x38, (byte) 0x6F,
				(byte) 0xFC, (byte) 0x7E, (byte) 0x67, (byte) 0xE7,
				(byte) 0xFF, (byte) 0x94, (byte) 0xEB, (byte) 0xA0,
				(byte) 0x79, (byte) 0xE5, (byte) 0x31, (byte) 0xB3,
				(byte) 0xCF, (byte) 0x32, (byte) 0x95, (byte) 0x17,
				(byte) 0xE8, (byte) 0x1C, (byte) 0x5D, (byte) 0xD9,
				(byte) 0xB3, (byte) 0xDC, (byte) 0x65, (byte) 0xDB,
				(byte) 0x5F, (byte) 0x90, (byte) 0x43, (byte) 0x19,
				(byte) 0x0B, (byte) 0xE0, (byte) 0xBE, (byte) 0x89,
				(byte) 0x7E, (byte) 0x5F, (byte) 0xE4, (byte) 0x8A,
				(byte) 0xDF, (byte) 0x5D, (byte) 0x3B, (byte) 0xFA,
				(byte) 0x05, (byte) 0x85, (byte) 0xE0, (byte) 0x76,
				(byte) 0xE5, (byte) 0x54, (byte) 0xF2, (byte) 0x6E,
				(byte) 0xC6, (byte) 0x98, (byte) 0x14, (byte) 0x79,
				(byte) 0x7F, (byte) 0x15, (byte) 0x66, (byte) 0x9F,
				(byte) 0x4A, (byte) 0x25, (byte) 0x5C, (byte) 0x13 };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xAD, (byte) 0xA2, (byte) 0x34, (byte) 0x9A,
				(byte) 0xFD, (byte) 0x11, (byte) 0x8D, (byte) 0x55,
				(byte) 0xAF, (byte) 0x78, (byte) 0x2D, (byte) 0x37,
				(byte) 0xB6, (byte) 0x46, (byte) 0x51, (byte) 0xAF,
				(byte) 0x1C, (byte) 0xA6, (byte) 0x1E, (byte) 0xE5 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// Test 1024 bits Test Key E6
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99,
				(byte) 0x99 };
		KeyID = (byte) 0xE6;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xEB, (byte) 0xF9, (byte) 0xFA, (byte) 0xEC,
				(byte) 0xC3, (byte) 0xE5, (byte) 0xC3, (byte) 0x15,
				(byte) 0x70, (byte) 0x96, (byte) 0x94, (byte) 0x66,
				(byte) 0x47, (byte) 0x75, (byte) 0xD3, (byte) 0xFB,
				(byte) 0xDA, (byte) 0x5A, (byte) 0x50, (byte) 0x4D,
				(byte) 0x89, (byte) 0x34, (byte) 0x4D, (byte) 0xD9,
				(byte) 0x20, (byte) 0xC5, (byte) 0x56, (byte) 0x96,
				(byte) 0xE8, (byte) 0x91, (byte) 0xD9, (byte) 0xAB,
				(byte) 0x62, (byte) 0x25, (byte) 0x98, (byte) 0xA9,
				(byte) 0xD6, (byte) 0xAB, (byte) 0x8F, (byte) 0xBF,
				(byte) 0x35, (byte) 0xE4, (byte) 0x59, (byte) 0x9C,
				(byte) 0xAB, (byte) 0x7E, (byte) 0xB2, (byte) 0x2F,
				(byte) 0x95, (byte) 0x69, (byte) 0x92, (byte) 0xF8,
				(byte) 0xAB, (byte) 0x2E, (byte) 0x65, (byte) 0x35,
				(byte) 0xDE, (byte) 0xCB, (byte) 0x6B, (byte) 0x57,
				(byte) 0x6F, (byte) 0xA0, (byte) 0x67, (byte) 0x5F,
				(byte) 0x97, (byte) 0xC2, (byte) 0x3D, (byte) 0xD4,
				(byte) 0xC3, (byte) 0x74, (byte) 0xA6, (byte) 0x6E,
				(byte) 0x6A, (byte) 0xF4, (byte) 0x19, (byte) 0xC9,
				(byte) 0xD2, (byte) 0x04, (byte) 0xD0, (byte) 0xB9,
				(byte) 0xF9, (byte) 0x3C, (byte) 0x08, (byte) 0xD7,
				(byte) 0x89, (byte) 0xD6, (byte) 0x38, (byte) 0x05,
				(byte) 0x66, (byte) 0x0F, (byte) 0xBB, (byte) 0x62,
				(byte) 0x9D, (byte) 0xF1, (byte) 0xB4, (byte) 0x88,
				(byte) 0xCF, (byte) 0xA1, (byte) 0xD7, (byte) 0xA1,
				(byte) 0x3E, (byte) 0x9B, (byte) 0x72, (byte) 0x94,
				(byte) 0x37, (byte) 0xEE, (byte) 0xAF, (byte) 0xE7,
				(byte) 0x18, (byte) 0xEF, (byte) 0xA8, (byte) 0x59,
				(byte) 0x34, (byte) 0x8B, (byte) 0xA0, (byte) 0xD7,
				(byte) 0x68, (byte) 0x12, (byte) 0xA9, (byte) 0x9F,
				(byte) 0x31, (byte) 0xCD, (byte) 0x36, (byte) 0x4F,
				(byte) 0x2A, (byte) 0x4F, (byte) 0xD4, (byte) 0x2F };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x8A, (byte) 0xA4, (byte) 0xF4, (byte) 0x64,
				(byte) 0x8F, (byte) 0x0D, (byte) 0xC6, (byte) 0x2A,
				(byte) 0xB6, (byte) 0xAE, (byte) 0xD9, (byte) 0x25,
				(byte) 0x54, (byte) 0xAD, (byte) 0x1A, (byte) 0x83,
				(byte) 0x1B, (byte) 0xAF, (byte) 0xC9, (byte) 0xE4 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// Master 1152 bits Test Key FE
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		KeyID = (byte) 0xFE;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xE7, (byte) 0x63, (byte) 0x17, (byte) 0x96,
				(byte) 0x51, (byte) 0x75, (byte) 0xA0, (byte) 0x8B,
				(byte) 0xEE, (byte) 0x51, (byte) 0x0F, (byte) 0x58,
				(byte) 0x83, (byte) 0x0E, (byte) 0x87, (byte) 0xB2,
				(byte) 0x62, (byte) 0xC7, (byte) 0x0D, (byte) 0x52,
				(byte) 0x98, (byte) 0x03, (byte) 0x24, (byte) 0x5F,
				(byte) 0xA8, (byte) 0xB8, (byte) 0x8E, (byte) 0x0C,
				(byte) 0x75, (byte) 0x35, (byte) 0x62, (byte) 0xDE,
				(byte) 0x7A, (byte) 0xEB, (byte) 0x5A, (byte) 0x9E,
				(byte) 0x3E, (byte) 0x6C, (byte) 0x1A, (byte) 0x98,
				(byte) 0xE9, (byte) 0x4D, (byte) 0x8D, (byte) 0xB7,
				(byte) 0xC3, (byte) 0x14, (byte) 0x07, (byte) 0xDA,
				(byte) 0xC5, (byte) 0xD0, (byte) 0x71, (byte) 0xE0,
				(byte) 0x6B, (byte) 0x80, (byte) 0xB0, (byte) 0x9E,
				(byte) 0x14, (byte) 0x6F, (byte) 0x22, (byte) 0xDB,
				(byte) 0x85, (byte) 0xF1, (byte) 0xD7, (byte) 0x2D,
				(byte) 0x1E, (byte) 0xA1, (byte) 0x8D, (byte) 0x22,
				(byte) 0x60, (byte) 0x00, (byte) 0x32, (byte) 0xC6,
				(byte) 0xDD, (byte) 0x40, (byte) 0xE3, (byte) 0x71,
				(byte) 0x4D, (byte) 0x5A, (byte) 0xDA, (byte) 0x7D,
				(byte) 0xE9, (byte) 0xD7, (byte) 0xD0, (byte) 0x1E,
				(byte) 0x88, (byte) 0x39, (byte) 0x1F, (byte) 0x89,
				(byte) 0x31, (byte) 0x56, (byte) 0xD6, (byte) 0xF4,
				(byte) 0xBF, (byte) 0x13, (byte) 0xE9, (byte) 0x06,
				(byte) 0x35, (byte) 0x59, (byte) 0xDA, (byte) 0x07,
				(byte) 0x86, (byte) 0xDE, (byte) 0x9B, (byte) 0xDE,
				(byte) 0x6B, (byte) 0x1C, (byte) 0x9B, (byte) 0x0B,
				(byte) 0xB9, (byte) 0x68, (byte) 0xED, (byte) 0xDE,
				(byte) 0x07, (byte) 0x14, (byte) 0x5A, (byte) 0xBF,
				(byte) 0x87, (byte) 0x7B, (byte) 0x93, (byte) 0x16,
				(byte) 0x82, (byte) 0xCC, (byte) 0xB1, (byte) 0xFB,
				(byte) 0x80, (byte) 0x07, (byte) 0x28, (byte) 0x72,
				(byte) 0x4D, (byte) 0x04, (byte) 0xAF, (byte) 0x24,
				(byte) 0x1E, (byte) 0x28, (byte) 0x27, (byte) 0xE0,
				(byte) 0xFA, (byte) 0x1F, (byte) 0x62, (byte) 0x59,
				(byte) 0x19, (byte) 0x14, (byte) 0xFF, (byte) 0x25 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x85, (byte) 0x35, (byte) 0xF1, (byte) 0x4C,
				(byte) 0xBD, (byte) 0x6B, (byte) 0x4A, (byte) 0xE5,
				(byte) 0x02, (byte) 0x86, (byte) 0x18, (byte) 0xFA,
				(byte) 0xB5, (byte) 0xAC, (byte) 0x11, (byte) 0x06,
				(byte) 0x54, (byte) 0x9F, (byte) 0xD0, (byte) 0x3C };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		// Master 1984 bits Test Key FC
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = (byte) 0xFC;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xB3, (byte) 0x29, (byte) 0x6C, (byte) 0x91,
				(byte) 0xF4, (byte) 0x79, (byte) 0x5B, (byte) 0xD9,
				(byte) 0x71, (byte) 0x12, (byte) 0x60, (byte) 0x69,
				(byte) 0x03, (byte) 0x40, (byte) 0x7B, (byte) 0x6E,
				(byte) 0xFF, (byte) 0x3A, (byte) 0xB3, (byte) 0x92,
				(byte) 0x46, (byte) 0xE9, (byte) 0x10, (byte) 0x95,
				(byte) 0xE5, (byte) 0x1D, (byte) 0x17, (byte) 0x86,
				(byte) 0x7D, (byte) 0xA4, (byte) 0xAD, (byte) 0xE5,
				(byte) 0x9A, (byte) 0x48, (byte) 0xBE, (byte) 0x2F,
				(byte) 0xE9, (byte) 0xB5, (byte) 0x27, (byte) 0x10,
				(byte) 0x28, (byte) 0x3D, (byte) 0x3D, (byte) 0x32,
				(byte) 0x26, (byte) 0x0E, (byte) 0x2C, (byte) 0x7D,
				(byte) 0x24, (byte) 0x72, (byte) 0x14, (byte) 0xC5,
				(byte) 0x7D, (byte) 0x46, (byte) 0xAA, (byte) 0x64,
				(byte) 0x65, (byte) 0xE4, (byte) 0x7E, (byte) 0x0A,
				(byte) 0x4B, (byte) 0x3F, (byte) 0xFA, (byte) 0xAD,
				(byte) 0x8A, (byte) 0x7F, (byte) 0x6A, (byte) 0x19,
				(byte) 0x07, (byte) 0x55, (byte) 0xBC, (byte) 0xCF,
				(byte) 0xE3, (byte) 0xF3, (byte) 0xFB, (byte) 0x39,
				(byte) 0x89, (byte) 0xA9, (byte) 0xF6, (byte) 0xB1,
				(byte) 0xC9, (byte) 0xE1, (byte) 0x84, (byte) 0x5B,
				(byte) 0xCC, (byte) 0xCA, (byte) 0xD6, (byte) 0xF2,
				(byte) 0x0B, (byte) 0x1D, (byte) 0xAC, (byte) 0x60,
				(byte) 0x33, (byte) 0x60, (byte) 0x02, (byte) 0x34,
				(byte) 0xE8, (byte) 0x1D, (byte) 0xAC, (byte) 0x41,
				(byte) 0x53, (byte) 0x21, (byte) 0x2B, (byte) 0x0F,
				(byte) 0x76, (byte) 0x0C, (byte) 0x23, (byte) 0x09,
				(byte) 0x91, (byte) 0x92, (byte) 0xAA, (byte) 0x6C,
				(byte) 0x4C, (byte) 0x90, (byte) 0x83, (byte) 0xBE,
				(byte) 0xFF, (byte) 0xD9, (byte) 0xA7, (byte) 0x9D,
				(byte) 0x2A, (byte) 0x27, (byte) 0xB0, (byte) 0x8F,
				(byte) 0xEC, (byte) 0xC8, (byte) 0xE5, (byte) 0xD4,
				(byte) 0x37, (byte) 0xD6, (byte) 0xC6, (byte) 0x85,
				(byte) 0x50, (byte) 0xA8, (byte) 0x39, (byte) 0xB1,
				(byte) 0x29, (byte) 0x41, (byte) 0x51, (byte) 0xDA,
				(byte) 0xBA, (byte) 0x9D, (byte) 0x9C, (byte) 0xB2,
				(byte) 0xF1, (byte) 0x60, (byte) 0xF6, (byte) 0x0F,
				(byte) 0x74, (byte) 0x92, (byte) 0x89, (byte) 0xF5,
				(byte) 0x00, (byte) 0xC8, (byte) 0xC7, (byte) 0xF3,
				(byte) 0x34, (byte) 0xBD, (byte) 0x20, (byte) 0xEB,
				(byte) 0xAC, (byte) 0x4A, (byte) 0xB1, (byte) 0x09,
				(byte) 0xCF, (byte) 0x3C, (byte) 0x18, (byte) 0x2F,
				(byte) 0x1B, (byte) 0x78, (byte) 0x1C, (byte) 0x7C,
				(byte) 0x09, (byte) 0x7A, (byte) 0x79, (byte) 0x03,
				(byte) 0x53, (byte) 0x07, (byte) 0x46, (byte) 0xC4,
				(byte) 0x49, (byte) 0xB9, (byte) 0x9E, (byte) 0x39,
				(byte) 0xE4, (byte) 0xDB, (byte) 0x64, (byte) 0x93,
				(byte) 0xDD, (byte) 0x2A, (byte) 0x02, (byte) 0xE3,
				(byte) 0x7C, (byte) 0x62, (byte) 0xAE, (byte) 0x8B,
				(byte) 0xC9, (byte) 0xA7, (byte) 0x47, (byte) 0x0E,
				(byte) 0xCC, (byte) 0xCF, (byte) 0x8D, (byte) 0xC0,
				(byte) 0x6A, (byte) 0x18, (byte) 0xC3, (byte) 0x3C,
				(byte) 0xD2, (byte) 0x4B, (byte) 0x30, (byte) 0xD5,
				(byte) 0x6F, (byte) 0x25, (byte) 0xD2, (byte) 0x75,
				(byte) 0x5C, (byte) 0xE8, (byte) 0x2A, (byte) 0xA4,
				(byte) 0xDE, (byte) 0x4D, (byte) 0x2E, (byte) 0xAE,
				(byte) 0xC0, (byte) 0x77, (byte) 0x50, (byte) 0xA0,
				(byte) 0x3D, (byte) 0xB7, (byte) 0x5E, (byte) 0xBD,
				(byte) 0x0D, (byte) 0x8E, (byte) 0xBC, (byte) 0x9F,
				(byte) 0x2A, (byte) 0x1D, (byte) 0x85, (byte) 0xA0,
				(byte) 0xD2, (byte) 0x52, (byte) 0xEF, (byte) 0xF4,
				(byte) 0x03, (byte) 0x29, (byte) 0xBE, (byte) 0x05 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xDB, (byte) 0x50, (byte) 0xB5, (byte) 0xB0,
				(byte) 0xD9, (byte) 0x66, (byte) 0x30, (byte) 0x07,
				(byte) 0x60, (byte) 0xB1, (byte) 0xE4, (byte) 0x21,
				(byte) 0x25, (byte) 0x27, (byte) 0x7B, (byte) 0xA8,
				(byte) 0x33, (byte) 0xB6, (byte) 0x52, (byte) 0x34 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// Master 1984 bits Test Key FA
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = (byte) 0xFA;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xA4, (byte) 0x20, (byte) 0x3E, (byte) 0x0C,
				(byte) 0x7B, (byte) 0xEB, (byte) 0x27, (byte) 0x09,
				(byte) 0x7B, (byte) 0x63, (byte) 0xC1, (byte) 0x03,
				(byte) 0xC1, (byte) 0x9F, (byte) 0xDC, (byte) 0xDA,
				(byte) 0x67, (byte) 0x1A, (byte) 0xEA, (byte) 0x7F,
				(byte) 0x81, (byte) 0x30, (byte) 0x65, (byte) 0x75,
				(byte) 0x6F, (byte) 0x3B, (byte) 0x9B, (byte) 0x81,
				(byte) 0x81, (byte) 0x0C, (byte) 0xBD, (byte) 0x4B,
				(byte) 0xC4, (byte) 0xDE, (byte) 0xC5, (byte) 0x48,
				(byte) 0xFB, (byte) 0xF1, (byte) 0xF3, (byte) 0xCD,
				(byte) 0xAE, (byte) 0x51, (byte) 0xF8, (byte) 0x47,
				(byte) 0x23, (byte) 0x5C, (byte) 0xBF, (byte) 0x2C,
				(byte) 0x8B, (byte) 0xAD, (byte) 0xD8, (byte) 0xAC,
				(byte) 0xA7, (byte) 0xC9, (byte) 0x3B, (byte) 0xEA,
				(byte) 0x3D, (byte) 0x44, (byte) 0xE8, (byte) 0x0E,
				(byte) 0xD6, (byte) 0xA7, (byte) 0xB7, (byte) 0x0E,
				(byte) 0x29, (byte) 0x62, (byte) 0x26, (byte) 0x19,
				(byte) 0xDB, (byte) 0x42, (byte) 0x0A, (byte) 0xCC,
				(byte) 0xCE, (byte) 0x07, (byte) 0xE1, (byte) 0xDD,
				(byte) 0x4E, (byte) 0x6C, (byte) 0x35, (byte) 0x4F,
				(byte) 0x35, (byte) 0x9F, (byte) 0xBD, (byte) 0xC9,
				(byte) 0xC5, (byte) 0xB7, (byte) 0x08, (byte) 0x13,
				(byte) 0x92, (byte) 0x6F, (byte) 0x77, (byte) 0xD8,
				(byte) 0x27, (byte) 0xE5, (byte) 0x2B, (byte) 0x19,
				(byte) 0xDA, (byte) 0xF0, (byte) 0x9B, (byte) 0xFA,
				(byte) 0xE5, (byte) 0x27, (byte) 0x44, (byte) 0x38,
				(byte) 0xBB, (byte) 0x8F, (byte) 0x61, (byte) 0xD1,
				(byte) 0x77, (byte) 0x53, (byte) 0xC9, (byte) 0xEC,
				(byte) 0x0A, (byte) 0x8E, (byte) 0xFA, (byte) 0x3B,
				(byte) 0x7E, (byte) 0x46, (byte) 0xF0, (byte) 0x26,
				(byte) 0x92, (byte) 0x16, (byte) 0x0D, (byte) 0x26,
				(byte) 0x53, (byte) 0xCD, (byte) 0xBC, (byte) 0xC7,
				(byte) 0x1B, (byte) 0x7D, (byte) 0x48, (byte) 0xBD,
				(byte) 0x37, (byte) 0x96, (byte) 0x83, (byte) 0x16,
				(byte) 0xEB, (byte) 0x44, (byte) 0x4F, (byte) 0x65,
				(byte) 0x04, (byte) 0xB9, (byte) 0x42, (byte) 0x1B,
				(byte) 0x7D, (byte) 0xD3, (byte) 0x03, (byte) 0x5A,
				(byte) 0x2C, (byte) 0x11, (byte) 0x7D, (byte) 0x8B,
				(byte) 0x1F, (byte) 0x76, (byte) 0xA8, (byte) 0x97,
				(byte) 0x54, (byte) 0x40, (byte) 0xDA, (byte) 0x95,
				(byte) 0x63, (byte) 0x61, (byte) 0x81, (byte) 0x02,
				(byte) 0x39, (byte) 0x7B, (byte) 0x88, (byte) 0x1C,
				(byte) 0xEF, (byte) 0x8A, (byte) 0xDA, (byte) 0x76,
				(byte) 0x89, (byte) 0xED, (byte) 0xFA, (byte) 0xCE,
				(byte) 0x32, (byte) 0x48, (byte) 0x2A, (byte) 0x2D,
				(byte) 0xFF, (byte) 0xED, (byte) 0x65, (byte) 0x6E,
				(byte) 0x7F, (byte) 0x95, (byte) 0x1D, (byte) 0xB8,
				(byte) 0x41, (byte) 0xDA, (byte) 0x78, (byte) 0x36,
				(byte) 0x8C, (byte) 0x62, (byte) 0x93, (byte) 0xBF,
				(byte) 0xC1, (byte) 0x05, (byte) 0x3A, (byte) 0x86,
				(byte) 0xA8, (byte) 0x45, (byte) 0xBF, (byte) 0xA6,
				(byte) 0x57, (byte) 0x8E, (byte) 0x4B, (byte) 0x69,
				(byte) 0xF1, (byte) 0x00, (byte) 0xB4, (byte) 0x2B,
				(byte) 0x55, (byte) 0x8F, (byte) 0xDE, (byte) 0x1A,
				(byte) 0xEC, (byte) 0xEC, (byte) 0x6D, (byte) 0x25,
				(byte) 0x07, (byte) 0x41, (byte) 0xBC, (byte) 0x78,
				(byte) 0x3A, (byte) 0xA8, (byte) 0xA6, (byte) 0x8A,
				(byte) 0x42, (byte) 0x61, (byte) 0xE7, (byte) 0xBB,
				(byte) 0x92, (byte) 0x46, (byte) 0xB1, (byte) 0x05,
				(byte) 0x87, (byte) 0xA4, (byte) 0x98, (byte) 0xD6,
				(byte) 0x8D, (byte) 0xD9, (byte) 0x55, (byte) 0xCE,
				(byte) 0x8B, (byte) 0x2B, (byte) 0x24, (byte) 0x33 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x7F, (byte) 0x5A, (byte) 0xCB, (byte) 0xB9,
				(byte) 0x6B, (byte) 0x58, (byte) 0x9F, (byte) 0x74,
				(byte) 0xCB, (byte) 0x95, (byte) 0x9E, (byte) 0xD1,
				(byte) 0xC3, (byte) 0x5B, (byte) 0xDB, (byte) 0x96,
				(byte) 0x5C, (byte) 0x3F, (byte) 0x41, (byte) 0x06 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// Master 1152 bits Test Key FB
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = (byte) 0xFB;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0x9B, (byte) 0x17, (byte) 0x06, (byte) 0x03,
				(byte) 0xA4, (byte) 0x89, (byte) 0xC7, (byte) 0x54,
				(byte) 0x6C, (byte) 0x45, (byte) 0xDA, (byte) 0x57,
				(byte) 0xB8, (byte) 0xFF, (byte) 0xD1, (byte) 0xDB,
				(byte) 0x20, (byte) 0x61, (byte) 0x24, (byte) 0x0F,
				(byte) 0x0E, (byte) 0x8C, (byte) 0x6D, (byte) 0x1F,
				(byte) 0x9A, (byte) 0xBD, (byte) 0xC6, (byte) 0xB2,
				(byte) 0x65, (byte) 0xAA, (byte) 0x89, (byte) 0x11,
				(byte) 0x91, (byte) 0x5C, (byte) 0x1A, (byte) 0x4E,
				(byte) 0xAB, (byte) 0xD8, (byte) 0xD0, (byte) 0xED,
				(byte) 0x47, (byte) 0x55, (byte) 0xD1, (byte) 0xB9,
				(byte) 0x02, (byte) 0xBA, (byte) 0x06, (byte) 0xFE,
				(byte) 0x5A, (byte) 0x64, (byte) 0x5B, (byte) 0x78,
				(byte) 0x6C, (byte) 0xD2, (byte) 0x41, (byte) 0x29,
				(byte) 0x55, (byte) 0x17, (byte) 0xD4, (byte) 0x4E,
				(byte) 0xF1, (byte) 0xA7, (byte) 0xC2, (byte) 0x5D,
				(byte) 0x75, (byte) 0xAF, (byte) 0xE0, (byte) 0xEB,
				(byte) 0x28, (byte) 0x06, (byte) 0x6E, (byte) 0x4D,
				(byte) 0x69, (byte) 0xFE, (byte) 0xE7, (byte) 0xAB,
				(byte) 0xAF, (byte) 0xDD, (byte) 0x5E, (byte) 0xEB,
				(byte) 0x23, (byte) 0x0F, (byte) 0x14, (byte) 0xE4,
				(byte) 0x02, (byte) 0xC9, (byte) 0x84, (byte) 0x08,
				(byte) 0x25, (byte) 0xFA, (byte) 0x77, (byte) 0xEA,
				(byte) 0xD1, (byte) 0x2B, (byte) 0x5F, (byte) 0x1C,
				(byte) 0x54, (byte) 0x94, (byte) 0x70, (byte) 0x1D,
				(byte) 0xE1, (byte) 0x89, (byte) 0x7F, (byte) 0x65,
				(byte) 0xFE, (byte) 0x6B, (byte) 0xF1, (byte) 0x06,
				(byte) 0xD4, (byte) 0x75, (byte) 0x45, (byte) 0xEB,
				(byte) 0xF7, (byte) 0x0C, (byte) 0xE7, (byte) 0xC1,
				(byte) 0x58, (byte) 0x06, (byte) 0x8C, (byte) 0x61,
				(byte) 0xF0, (byte) 0x77, (byte) 0x35, (byte) 0x34,
				(byte) 0xDB, (byte) 0x74, (byte) 0x2A, (byte) 0xB8,
				(byte) 0x3C, (byte) 0x28, (byte) 0x03, (byte) 0x8C,
				(byte) 0x14, (byte) 0x94, (byte) 0xF1, (byte) 0x59,
				(byte) 0x05, (byte) 0xD0, (byte) 0xAD, (byte) 0x17,
				(byte) 0xCF, (byte) 0x1B, (byte) 0xD3, (byte) 0x8D };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xFC, (byte) 0x78, (byte) 0x7D, (byte) 0xB1,
				(byte) 0x38, (byte) 0xF9, (byte) 0x94, (byte) 0xA0,
				(byte) 0xC5, (byte) 0x54, (byte) 0xCC, (byte) 0x67,
				(byte) 0x34, (byte) 0xEB, (byte) 0x3E, (byte) 0x48,
				(byte) 0xA5, (byte) 0x50, (byte) 0x66, (byte) 0xCC };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// Master 1152 bits Test Key FD
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = (byte) 0xFD;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xC9, (byte) 0x48, (byte) 0x5D, (byte) 0xBE,
				(byte) 0xB5, (byte) 0xE4, (byte) 0x04, (byte) 0x15,
				(byte) 0xD1, (byte) 0xB3, (byte) 0x97, (byte) 0x52,
				(byte) 0x4F, (byte) 0x47, (byte) 0x68, (byte) 0x5F,
				(byte) 0x30, (byte) 0x6C, (byte) 0xFD, (byte) 0xC4,
				(byte) 0x99, (byte) 0xD4, (byte) 0xE2, (byte) 0xE7,
				(byte) 0xD0, (byte) 0xCB, (byte) 0xAF, (byte) 0x22,
				(byte) 0x2C, (byte) 0xFA, (byte) 0x81, (byte) 0x84,
				(byte) 0xBD, (byte) 0x11, (byte) 0x1D, (byte) 0xAE,
				(byte) 0xED, (byte) 0xC9, (byte) 0xCC, (byte) 0x6E,
				(byte) 0xC8, (byte) 0x54, (byte) 0x0C, (byte) 0x3F,
				(byte) 0x72, (byte) 0x71, (byte) 0xEA, (byte) 0x99,
				(byte) 0x90, (byte) 0x11, (byte) 0x9C, (byte) 0xC5,
				(byte) 0xC4, (byte) 0x31, (byte) 0x80, (byte) 0x50,
				(byte) 0x1D, (byte) 0x9F, (byte) 0x45, (byte) 0x25,
				(byte) 0x2D, (byte) 0x68, (byte) 0x35, (byte) 0x05,
				(byte) 0x3F, (byte) 0xAE, (byte) 0x35, (byte) 0x69,
				(byte) 0x6A, (byte) 0xE8, (byte) 0xCD, (byte) 0x67,
				(byte) 0xA3, (byte) 0x25, (byte) 0x64, (byte) 0x74,
				(byte) 0x49, (byte) 0xCF, (byte) 0x5E, (byte) 0x59,
				(byte) 0x4D, (byte) 0xA8, (byte) 0xF6, (byte) 0x27,
				(byte) 0x20, (byte) 0x9F, (byte) 0x7F, (byte) 0x03,
				(byte) 0xAE, (byte) 0x8D, (byte) 0x6D, (byte) 0xFC,
				(byte) 0x0D, (byte) 0xB3, (byte) 0xE7, (byte) 0x9E,
				(byte) 0x28, (byte) 0xE4, (byte) 0x15, (byte) 0xDF,
				(byte) 0x29, (byte) 0xA5, (byte) 0xB5, (byte) 0x7D,
				(byte) 0x68, (byte) 0x14, (byte) 0x85, (byte) 0x6C,
				(byte) 0xC3, (byte) 0x0A, (byte) 0x96, (byte) 0xDA,
				(byte) 0x5B, (byte) 0x88, (byte) 0x90, (byte) 0x36,
				(byte) 0x3E, (byte) 0x50, (byte) 0x7F, (byte) 0xCB,
				(byte) 0x2E, (byte) 0x28, (byte) 0x3D, (byte) 0xA1,
				(byte) 0xEB, (byte) 0xB5, (byte) 0xF1, (byte) 0x8E,
				(byte) 0x8E, (byte) 0x24, (byte) 0x10, (byte) 0x2B,
				(byte) 0x7D, (byte) 0x01, (byte) 0x92, (byte) 0xBB,
				(byte) 0x8E, (byte) 0x35, (byte) 0xA4, (byte) 0xF7,
				(byte) 0xCD, (byte) 0x05, (byte) 0xA4, (byte) 0x35 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xFC, (byte) 0x50, (byte) 0x5E, (byte) 0x4A,
				(byte) 0x83, (byte) 0xFF, (byte) 0x29, (byte) 0xA3,
				(byte) 0xB1, (byte) 0xBD, (byte) 0x28, (byte) 0xDA,
				(byte) 0xBF, (byte) 0x52, (byte) 0x59, (byte) 0x9B,
				(byte) 0x2A, (byte) 0xE9, (byte) 0xCB, (byte) 0x14 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// Master 1152 bits Test Key FF
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x04 };
		KeyID = (byte) 0xFF;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xF6, (byte) 0x9D, (byte) 0xBB, (byte) 0x5E,
				(byte) 0x15, (byte) 0x98, (byte) 0x3E, (byte) 0xAE,
				(byte) 0x3C, (byte) 0xCF, (byte) 0x31, (byte) 0xCF,
				(byte) 0x4E, (byte) 0x47, (byte) 0x09, (byte) 0x8C,
				(byte) 0x2F, (byte) 0xC1, (byte) 0x6F, (byte) 0x97,
				(byte) 0xA0, (byte) 0xC7, (byte) 0x10, (byte) 0xF8,
				(byte) 0x47, (byte) 0x77, (byte) 0xEF, (byte) 0xA9,
				(byte) 0x96, (byte) 0x22, (byte) 0xD8, (byte) 0x65,
				(byte) 0x02, (byte) 0xB1, (byte) 0x38, (byte) 0x72,
				(byte) 0x8A, (byte) 0xB1, (byte) 0x2E, (byte) 0x34,
				(byte) 0x81, (byte) 0xA8, (byte) 0x4D, (byte) 0x20,
				(byte) 0xE0, (byte) 0x14, (byte) 0xAD, (byte) 0x2D,
				(byte) 0x63, (byte) 0x4D, (byte) 0x28, (byte) 0x36,
				(byte) 0xF2, (byte) 0x7F, (byte) 0x29, (byte) 0x49,
				(byte) 0x24, (byte) 0xB8, (byte) 0x95, (byte) 0xA8,
				(byte) 0x7F, (byte) 0x91, (byte) 0xF8, (byte) 0x1B,
				(byte) 0x81, (byte) 0x69, (byte) 0xD4, (byte) 0xDF,
				(byte) 0xDA, (byte) 0xD8, (byte) 0xD7, (byte) 0xCB,
				(byte) 0xD7, (byte) 0x41, (byte) 0x80, (byte) 0x4C,
				(byte) 0xD6, (byte) 0x1B, (byte) 0x46, (byte) 0x7C,
				(byte) 0x7A, (byte) 0x9A, (byte) 0xCF, (byte) 0xEC,
				(byte) 0xEB, (byte) 0x71, (byte) 0x18, (byte) 0x8C,
				(byte) 0xAA, (byte) 0x73, (byte) 0xA9, (byte) 0x07,
				(byte) 0x54, (byte) 0x76, (byte) 0x99, (byte) 0xD4,
				(byte) 0x5C, (byte) 0x9C, (byte) 0x7D, (byte) 0x20,
				(byte) 0x98, (byte) 0xAC, (byte) 0x29, (byte) 0x66,
				(byte) 0x26, (byte) 0x64, (byte) 0x17, (byte) 0xF6,
				(byte) 0x65, (byte) 0xA4, (byte) 0x6B, (byte) 0xDD,
				(byte) 0x01, (byte) 0x2C, (byte) 0x09, (byte) 0x7D,
				(byte) 0xBD, (byte) 0x33, (byte) 0xD1, (byte) 0xD1,
				(byte) 0x1A, (byte) 0xFF, (byte) 0x6E, (byte) 0xC8,
				(byte) 0xA9, (byte) 0xC0, (byte) 0xAD, (byte) 0x81,
				(byte) 0x4A, (byte) 0x65, (byte) 0xB4, (byte) 0x82,
				(byte) 0x62, (byte) 0xCA, (byte) 0x01, (byte) 0x16,
				(byte) 0x36, (byte) 0x07, (byte) 0x9A, (byte) 0x32,
				(byte) 0x8C, (byte) 0x1A, (byte) 0xAE, (byte) 0xB7 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x43, (byte) 0x9E, (byte) 0xB2, (byte) 0x3D,
				(byte) 0x8A, (byte) 0x71, (byte) 0xB9, (byte) 0x9F,
				(byte) 0x87, (byte) 0x9C, (byte) 0x1A, (byte) 0x1F,
				(byte) 0x17, (byte) 0x65, (byte) 0x25, (byte) 0x2D,
				(byte) 0x84, (byte) 0x0B, (byte) 0x9A, (byte) 0x74 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// JCB 1024 bits Test Key 02
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x65 };
		KeyID = (byte) 0x02;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 128;
		Modul = new byte[]{ (byte) 0xBB, (byte) 0x7F, (byte) 0x51, (byte) 0x98,
				(byte) 0x3F, (byte) 0xD8, (byte) 0x70, (byte) 0x7F,
				(byte) 0xD6, (byte) 0x22, (byte) 0x7C, (byte) 0x23,
				(byte) 0xDE, (byte) 0xF5, (byte) 0xD5, (byte) 0x37,
				(byte) 0x7A, (byte) 0x5A, (byte) 0x73, (byte) 0x7C,
				(byte) 0xEF, (byte) 0x3C, (byte) 0x52, (byte) 0x52,
				(byte) 0xE5, (byte) 0x78, (byte) 0xEF, (byte) 0xE1,
				(byte) 0x36, (byte) 0xDF, (byte) 0x87, (byte) 0xB5,
				(byte) 0x04, (byte) 0x73, (byte) 0xF9, (byte) 0x34,
				(byte) 0x1F, (byte) 0x16, (byte) 0x40, (byte) 0xC8,
				(byte) 0xD2, (byte) 0x58, (byte) 0x03, (byte) 0x4E,
				(byte) 0x14, (byte) 0xC1, (byte) 0x69, (byte) 0x93,
				(byte) 0xFC, (byte) 0xE6, (byte) 0xC6, (byte) 0xB8,
				(byte) 0xC3, (byte) 0xCE, (byte) 0xEB, (byte) 0x65,
				(byte) 0xFC, (byte) 0x8F, (byte) 0xBC, (byte) 0xD8,
				(byte) 0xEB, (byte) 0x77, (byte) 0xB3, (byte) 0xB0,
				(byte) 0x5A, (byte) 0xC7, (byte) 0xC4, (byte) 0xD0,
				(byte) 0x9E, (byte) 0x0F, (byte) 0xA1, (byte) 0xBA,
				(byte) 0x2E, (byte) 0xFE, (byte) 0x87, (byte) 0xD3,
				(byte) 0x18, (byte) 0x4D, (byte) 0xB6, (byte) 0x71,
				(byte) 0x8A, (byte) 0xE4, (byte) 0x1A, (byte) 0x7C,
				(byte) 0xAD, (byte) 0x89, (byte) 0xB8, (byte) 0xDC,
				(byte) 0xE0, (byte) 0xFE, (byte) 0x80, (byte) 0xCE,
				(byte) 0xB5, (byte) 0x23, (byte) 0xD5, (byte) 0xD6,
				(byte) 0x47, (byte) 0xF9, (byte) 0xDB, (byte) 0x58,
				(byte) 0xA3, (byte) 0x1D, (byte) 0x2E, (byte) 0x71,
				(byte) 0xAC, (byte) 0x67, (byte) 0x7E, (byte) 0x67,
				(byte) 0xFA, (byte) 0x6E, (byte) 0x75, (byte) 0x82,
				(byte) 0x07, (byte) 0x36, (byte) 0xC9, (byte) 0x89,
				(byte) 0x37, (byte) 0x61, (byte) 0xEE, (byte) 0x4A,
				(byte) 0xCD, (byte) 0x11, (byte) 0xF3, (byte) 0x1D,
				(byte) 0xBD, (byte) 0xC3, (byte) 0x49, (byte) 0xEF };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB9, (byte) 0x73, (byte) 0xE9, (byte) 0xF3,
				(byte) 0x77, (byte) 0xB4, (byte) 0x19, (byte) 0xC3,
				(byte) 0x6A, (byte) 0xC9, (byte) 0x69, (byte) 0x6E,
				(byte) 0xD9, (byte) 0x5F, (byte) 0xFB, (byte) 0x25,
				(byte) 0xC8, (byte) 0x02, (byte) 0x06, (byte) 0x87 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// JCB 1984 bits Test Key 03
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x65 };
		KeyID = (byte) 0x03;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xC9, (byte) 0xE6, (byte) 0xC1, (byte) 0xF3,
				(byte) 0xC6, (byte) 0x94, (byte) 0x9A, (byte) 0x8A,
				(byte) 0x42, (byte) 0xA9, (byte) 0x1F, (byte) 0x8D,
				(byte) 0x02, (byte) 0x24, (byte) 0x13, (byte) 0x2B,
				(byte) 0x28, (byte) 0x65, (byte) 0xE6, (byte) 0xD9,
				(byte) 0x53, (byte) 0xA5, (byte) 0xB5, (byte) 0xA5,
				(byte) 0x4C, (byte) 0xFF, (byte) 0xB0, (byte) 0x41,
				(byte) 0x24, (byte) 0x39, (byte) 0xD5, (byte) 0x4A,
				(byte) 0xEB, (byte) 0xA7, (byte) 0x9E, (byte) 0x9B,
				(byte) 0x39, (byte) 0x9A, (byte) 0x6C, (byte) 0x10,
				(byte) 0x46, (byte) 0x84, (byte) 0xDF, (byte) 0x3F,
				(byte) 0xB7, (byte) 0x27, (byte) 0xC7, (byte) 0xF5,
				(byte) 0x59, (byte) 0x84, (byte) 0xDB, (byte) 0x7A,
				(byte) 0x45, (byte) 0x0E, (byte) 0x6A, (byte) 0xA9,
				(byte) 0x17, (byte) 0xE1, (byte) 0x10, (byte) 0xA7,
				(byte) 0xF2, (byte) 0x34, (byte) 0x3A, (byte) 0x00,
				(byte) 0x24, (byte) 0xD2, (byte) 0x78, (byte) 0x5D,
				(byte) 0x9E, (byte) 0xBE, (byte) 0x09, (byte) 0xF6,
				(byte) 0x01, (byte) 0xD5, (byte) 0x92, (byte) 0x36,
				(byte) 0x2F, (byte) 0xDB, (byte) 0x23, (byte) 0x77,
				(byte) 0x00, (byte) 0xB5, (byte) 0x67, (byte) 0xBA,
				(byte) 0x14, (byte) 0xBB, (byte) 0xE2, (byte) 0xA6,
				(byte) 0xD3, (byte) 0xD2, (byte) 0x3C, (byte) 0xF1,
				(byte) 0x27, (byte) 0x0B, (byte) 0x3D, (byte) 0xD8,
				(byte) 0x22, (byte) 0xB5, (byte) 0x49, (byte) 0x65,
				(byte) 0x49, (byte) 0xBF, (byte) 0x88, (byte) 0x49,
				(byte) 0x48, (byte) 0xF5, (byte) 0x5A, (byte) 0x0D,
				(byte) 0x30, (byte) 0x83, (byte) 0x48, (byte) 0xC4,
				(byte) 0xB7, (byte) 0x23, (byte) 0xBA, (byte) 0xFB,
				(byte) 0x6A, (byte) 0x7F, (byte) 0x39, (byte) 0x75,
				(byte) 0xAC, (byte) 0x39, (byte) 0x7C, (byte) 0xAD,
				(byte) 0x3C, (byte) 0x5D, (byte) 0x0F, (byte) 0xC2,
				(byte) 0xD1, (byte) 0x78, (byte) 0x71, (byte) 0x6F,
				(byte) 0x5E, (byte) 0x8E, (byte) 0x79, (byte) 0xE7,
				(byte) 0x5B, (byte) 0xEB, (byte) 0x1C, (byte) 0x84,
				(byte) 0xFA, (byte) 0x20, (byte) 0x2F, (byte) 0x80,
				(byte) 0xE6, (byte) 0x80, (byte) 0x69, (byte) 0xA9,
				(byte) 0x84, (byte) 0xE0, (byte) 0x08, (byte) 0x70,
				(byte) 0x6B, (byte) 0x30, (byte) 0xC2, (byte) 0x12,
				(byte) 0x30, (byte) 0x54, (byte) 0x56, (byte) 0x20,
				(byte) 0x15, (byte) 0x40, (byte) 0x78, (byte) 0x79,
				(byte) 0x25, (byte) 0xE8, (byte) 0x6A, (byte) 0x8B,
				(byte) 0x28, (byte) 0xB1, (byte) 0x29, (byte) 0xA1,
				(byte) 0x1A, (byte) 0xF2, (byte) 0x04, (byte) 0xB3,
				(byte) 0x87, (byte) 0xCB, (byte) 0x6E, (byte) 0xE4,
				(byte) 0x3D, (byte) 0xB5, (byte) 0x3D, (byte) 0x15,
				(byte) 0xA4, (byte) 0x6E, (byte) 0x13, (byte) 0x90,
				(byte) 0x1B, (byte) 0xEB, (byte) 0xD5, (byte) 0xCE,
				(byte) 0xCF, (byte) 0x48, (byte) 0x54, (byte) 0x25,
				(byte) 0x1D, (byte) 0x9E, (byte) 0x98, (byte) 0x75,
				(byte) 0xB1, (byte) 0x6E, (byte) 0x82, (byte) 0xAD,
				(byte) 0x1C, (byte) 0x59, (byte) 0x38, (byte) 0xA9,
				(byte) 0x72, (byte) 0x84, (byte) 0x2C, (byte) 0x8F,
				(byte) 0x1A, (byte) 0x42, (byte) 0xEB, (byte) 0xB5,
				(byte) 0xAE, (byte) 0x53, (byte) 0x36, (byte) 0xB0,
				(byte) 0x4F, (byte) 0xF3, (byte) 0xDA, (byte) 0x8B,
				(byte) 0x8D, (byte) 0xFB, (byte) 0xE6, (byte) 0x06,
				(byte) 0xFC, (byte) 0xA8, (byte) 0xB9, (byte) 0x08,
				(byte) 0x4E, (byte) 0xE0, (byte) 0x5B, (byte) 0xF6,
				(byte) 0x79, (byte) 0x50, (byte) 0xBA, (byte) 0x89,
				(byte) 0x89, (byte) 0x7C, (byte) 0xD0, (byte) 0x89,
				(byte) 0xF9, (byte) 0x24, (byte) 0xDB, (byte) 0xCD };
		ExponentLen = 1;
		Exponent = new byte[]{ (byte) 0x03 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x7D, (byte) 0xC4, (byte) 0x35, (byte) 0xDB,
				(byte) 0xDE, (byte) 0x09, (byte) 0x3D, (byte) 0x1F,
				(byte) 0x0A, (byte) 0xD0, (byte) 0xBA, (byte) 0xE0,
				(byte) 0xFE, (byte) 0xA4, (byte) 0xDC, (byte) 0x12,
				(byte) 0x05, (byte) 0x64, (byte) 0x13, (byte) 0xDC };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// AMEX 1152 bits Test Key 60
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x25 };
		KeyID = (byte) 0x60;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xA8, (byte) 0xEE, (byte) 0x74, (byte) 0xED,
				(byte) 0xEF, (byte) 0x3C, (byte) 0x0D, (byte) 0xCA,
				(byte) 0x51, (byte) 0x02, (byte) 0xFF, (byte) 0x9B,
				(byte) 0x57, (byte) 0x07, (byte) 0x97, (byte) 0x5F,
				(byte) 0xF6, (byte) 0x7B, (byte) 0x60, (byte) 0xD6,
				(byte) 0x4B, (byte) 0x5E, (byte) 0x73, (byte) 0x22,
				(byte) 0xD4, (byte) 0x8D, (byte) 0xE9, (byte) 0xD3,
				(byte) 0xBB, (byte) 0x61, (byte) 0x53, (byte) 0xF6,
				(byte) 0x35, (byte) 0x12, (byte) 0xA0, (byte) 0x91,
				(byte) 0xB6, (byte) 0x06, (byte) 0xDD, (byte) 0x8F,
				(byte) 0xD5, (byte) 0xF6, (byte) 0xA1, (byte) 0x45,
				(byte) 0x88, (byte) 0x32, (byte) 0x4E, (byte) 0xF8,
				(byte) 0x82, (byte) 0x78, (byte) 0x44, (byte) 0xC7,
				(byte) 0xFF, (byte) 0xC0, (byte) 0xBA, (byte) 0xB2,
				(byte) 0x33, (byte) 0x4A, (byte) 0xE5, (byte) 0x20,
				(byte) 0x77, (byte) 0x70, (byte) 0x07, (byte) 0x8B,
				(byte) 0x69, (byte) 0xCD, (byte) 0xC3, (byte) 0xF2,
				(byte) 0xC6, (byte) 0x66, (byte) 0xCF, (byte) 0x69,
				(byte) 0xE2, (byte) 0x8E, (byte) 0x16, (byte) 0xE1,
				(byte) 0x81, (byte) 0x67, (byte) 0x14, (byte) 0xC4,
				(byte) 0xDF, (byte) 0x31, (byte) 0x3B, (byte) 0xEF,
				(byte) 0x53, (byte) 0x9C, (byte) 0xC0, (byte) 0x1D,
				(byte) 0xA9, (byte) 0xDD, (byte) 0x2D, (byte) 0x6F,
				(byte) 0x47, (byte) 0xDE, (byte) 0x4F, (byte) 0x24,
				(byte) 0x7C, (byte) 0x50, (byte) 0x0B, (byte) 0x56,
				(byte) 0x1C, (byte) 0x09, (byte) 0x91, (byte) 0x66,
				(byte) 0xAD, (byte) 0x4F, (byte) 0xC1, (byte) 0x6D,
				(byte) 0xF1, (byte) 0x2D, (byte) 0xFB, (byte) 0x68,
				(byte) 0x4A, (byte) 0xC4, (byte) 0x8D, (byte) 0x35,
				(byte) 0xCD, (byte) 0xD2, (byte) 0xC4, (byte) 0x7A,
				(byte) 0x13, (byte) 0xA8, (byte) 0x6A, (byte) 0x5A,
				(byte) 0x16, (byte) 0x23, (byte) 0x06, (byte) 0xF6,
				(byte) 0x4E, (byte) 0x33, (byte) 0xB0, (byte) 0x92,
				(byte) 0xAB, (byte) 0x74, (byte) 0xED, (byte) 0xA7,
				(byte) 0x1A, (byte) 0x40, (byte) 0x91, (byte) 0xD9,
				(byte) 0x6E, (byte) 0x3D, (byte) 0xAA, (byte) 0x47 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x89, (byte) 0x4B, (byte) 0x8D, (byte) 0xF1,
				(byte) 0x9B, (byte) 0xDC, (byte) 0x69, (byte) 0x11,
				(byte) 0x03, (byte) 0xC3, (byte) 0xB9, (byte) 0x39,
				(byte) 0x79, (byte) 0xF5, (byte) 0xEE, (byte) 0x28,
				(byte) 0xC0, (byte) 0x58, (byte) 0x88, (byte) 0xA7 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		
		// AMEX 1984 bits Test Key 61
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00,
				(byte) 0x25 };
		KeyID = (byte) 0x61;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0x86, (byte) 0xC7, (byte) 0x25, (byte) 0x46,
				(byte) 0x65, (byte) 0xE1, (byte) 0x7C, (byte) 0xE6,
				(byte) 0x93, (byte) 0x4D, (byte) 0xF7, (byte) 0xD0,
				(byte) 0x82, (byte) 0x56, (byte) 0x9F, (byte) 0x20,
				(byte) 0x8D, (byte) 0x1C, (byte) 0xC1, (byte) 0xAD,
				(byte) 0x8E, (byte) 0x9F, (byte) 0xB2, (byte) 0xFE,
				(byte) 0x23, (byte) 0xE3, (byte) 0xD7, (byte) 0x46,
				(byte) 0x7B, (byte) 0xE5, (byte) 0x0B, (byte) 0x4F,
				(byte) 0x87, (byte) 0x4F, (byte) 0x90, (byte) 0x6A,
				(byte) 0xDF, (byte) 0x22, (byte) 0x80, (byte) 0xEC,
				(byte) 0x9D, (byte) 0x20, (byte) 0x4F, (byte) 0x6D,
				(byte) 0x10, (byte) 0xC0, (byte) 0x37, (byte) 0xA2,
				(byte) 0x3C, (byte) 0xE5, (byte) 0xFD, (byte) 0x82,
				(byte) 0x83, (byte) 0xC9, (byte) 0xED, (byte) 0x47,
				(byte) 0xD1, (byte) 0xC6, (byte) 0x69, (byte) 0xAB,
				(byte) 0xDD, (byte) 0x7C, (byte) 0x1C, (byte) 0xB3,
				(byte) 0x56, (byte) 0xC7, (byte) 0x0B, (byte) 0xCD,
				(byte) 0xC4, (byte) 0x4E, (byte) 0x5C, (byte) 0x8A,
				(byte) 0xE2, (byte) 0x31, (byte) 0x55, (byte) 0x5F,
				(byte) 0x7B, (byte) 0x78, (byte) 0x6A, (byte) 0xC9,
				(byte) 0xC3, (byte) 0x15, (byte) 0x5B, (byte) 0xCD,
				(byte) 0x51, (byte) 0xF2, (byte) 0x8E, (byte) 0xFB,
				(byte) 0xC1, (byte) 0xB3, (byte) 0x3C, (byte) 0xC8,
				(byte) 0x72, (byte) 0x77, (byte) 0x04, (byte) 0x92,
				(byte) 0x19, (byte) 0xB2, (byte) 0xC8, (byte) 0x90,
				(byte) 0x95, (byte) 0x27, (byte) 0x36, (byte) 0xC4,
				(byte) 0x71, (byte) 0x34, (byte) 0x87, (byte) 0x11,
				(byte) 0x16, (byte) 0x78, (byte) 0x91, (byte) 0x1D,
				(byte) 0x9F, (byte) 0x42, (byte) 0xE0, (byte) 0x80,
				(byte) 0x74, (byte) 0xCF, (byte) 0x52, (byte) 0x4E,
				(byte) 0x65, (byte) 0xD7, (byte) 0x21, (byte) 0xD7,
				(byte) 0x27, (byte) 0xF0, (byte) 0x54, (byte) 0xE6,
				(byte) 0xB5, (byte) 0xE8, (byte) 0x5E, (byte) 0xC9,
				(byte) 0x2B, (byte) 0x3E, (byte) 0xB5, (byte) 0x9F,
				(byte) 0xFE, (byte) 0xE9, (byte) 0x26, (byte) 0xDD,
				(byte) 0x6C, (byte) 0x31, (byte) 0x4D, (byte) 0xF5,
				(byte) 0x55, (byte) 0xC9, (byte) 0x4A, (byte) 0xD4,
				(byte) 0x87, (byte) 0xA9, (byte) 0x9B, (byte) 0x67,
				(byte) 0xCB, (byte) 0x7C, (byte) 0x7B, (byte) 0xA5,
				(byte) 0xE4, (byte) 0x6A, (byte) 0x5B, (byte) 0x81,
				(byte) 0x3D, (byte) 0xDB, (byte) 0x91, (byte) 0x8B,
				(byte) 0x8E, (byte) 0x3E, (byte) 0x04, (byte) 0x23,
				(byte) 0xF4, (byte) 0x30, (byte) 0x2A, (byte) 0x58,
				(byte) 0x68, (byte) 0x6D, (byte) 0x12, (byte) 0x63,
				(byte) 0xC0, (byte) 0xBA, (byte) 0xCA, (byte) 0x9E,
				(byte) 0x82, (byte) 0x06, (byte) 0x8C, (byte) 0x49,
				(byte) 0x32, (byte) 0x89, (byte) 0xE3, (byte) 0xE6,
				(byte) 0x93, (byte) 0x6E, (byte) 0xCA, (byte) 0x5F,
				(byte) 0x9F, (byte) 0x77, (byte) 0xE0, (byte) 0x6B,
				(byte) 0x0D, (byte) 0x6F, (byte) 0xBD, (byte) 0xA7,
				(byte) 0x18, (byte) 0x81, (byte) 0x8B, (byte) 0x83,
				(byte) 0x50, (byte) 0x20, (byte) 0x09, (byte) 0x8C,
				(byte) 0x67, (byte) 0x1C, (byte) 0x5D, (byte) 0xD7,
				(byte) 0xE9, (byte) 0xB8, (byte) 0xE8, (byte) 0xE8,
				(byte) 0x41, (byte) 0xD2, (byte) 0xDF, (byte) 0x32,
				(byte) 0xEE, (byte) 0x94, (byte) 0xA7, (byte) 0xF4,
				(byte) 0x74, (byte) 0x84, (byte) 0x84, (byte) 0xCA,
				(byte) 0x44, (byte) 0x10, (byte) 0x8A, (byte) 0xB2,
				(byte) 0x41, (byte) 0xA5, (byte) 0x26, (byte) 0x3B,
				(byte) 0xA1, (byte) 0xFF, (byte) 0x00, (byte) 0xD5,
				(byte) 0x13, (byte) 0x60, (byte) 0xDD, (byte) 0xDC,
				(byte) 0x74, (byte) 0x9D, (byte) 0x30, (byte) 0xA1 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xCC, (byte) 0xCF, (byte) 0x27, (byte) 0xC4,
				(byte) 0x9C, (byte) 0x15, (byte) 0xB2, (byte) 0xA9,
				(byte) 0x41, (byte) 0x0E, (byte) 0xC6, (byte) 0x08,
				(byte) 0x92, (byte) 0x23, (byte) 0xA3, (byte) 0xA0,
				(byte) 0x1E, (byte) 0xA8, (byte) 0x43, (byte) 0x3E };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		//======================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x01,
				(byte) 0x52 };
		KeyID = (byte) 0xD0;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xD0, (byte) 0x5C, (byte) 0x2A, (byte) 0x09,
				(byte) 0xD0, (byte) 0x9C, (byte) 0x90, (byte) 0x31,
				(byte) 0x36, (byte) 0x6E, (byte) 0xC0, (byte) 0x92,
				(byte) 0xBC, (byte) 0xAC, (byte) 0x67, (byte) 0xD4,
				(byte) 0xB1, (byte) 0xB4, (byte) 0xF8, (byte) 0x8B,
				(byte) 0x10, (byte) 0x00, (byte) 0x5E, (byte) 0x1F,
				(byte) 0xC4, (byte) 0x5C, (byte) 0x1B, (byte) 0x48,
				(byte) 0x3A, (byte) 0xE7, (byte) 0xEB, (byte) 0x86,
				(byte) 0xFF, (byte) 0x0E, (byte) 0x88, (byte) 0x4A,
				(byte) 0x19, (byte) 0xC0, (byte) 0x59, (byte) 0x5A,
				(byte) 0x6C, (byte) 0x34, (byte) 0xF0, (byte) 0x63,
				(byte) 0x86, (byte) 0xD7, (byte) 0x76, (byte) 0xA2,
				(byte) 0x1D, (byte) 0x62, (byte) 0x0F, (byte) 0xC9,
				(byte) 0xF9, (byte) 0xC4, (byte) 0x98, (byte) 0xAD,
				(byte) 0xCA, (byte) 0x00, (byte) 0xE6, (byte) 0x6D,
				(byte) 0x12, (byte) 0x9B, (byte) 0xCD, (byte) 0xD4,
				(byte) 0x78, (byte) 0x98, (byte) 0x37, (byte) 0xB9,
				(byte) 0x6D, (byte) 0xCC, (byte) 0x7F, (byte) 0x09,
				(byte) 0xDA, (byte) 0x94, (byte) 0xCC, (byte) 0xAC,
				(byte) 0x5A, (byte) 0xC7, (byte) 0xCF, (byte) 0xC0,
				(byte) 0x7F, (byte) 0x46, (byte) 0x00, (byte) 0xDF,
				(byte) 0x78, (byte) 0xE4, (byte) 0x93, (byte) 0xDC,
				(byte) 0x19, (byte) 0x57, (byte) 0xDE, (byte) 0xBA,
				(byte) 0x3F, (byte) 0x48, (byte) 0x38, (byte) 0xA4,
				(byte) 0xB8, (byte) 0xBD, (byte) 0x4C, (byte) 0xEF,
				(byte) 0xE4, (byte) 0xE4, (byte) 0xC6, (byte) 0x11,
				(byte) 0x90, (byte) 0x85, (byte) 0xE5, (byte) 0xBB,
				(byte) 0x21, (byte) 0x07, (byte) 0x73, (byte) 0x41,
				(byte) 0xC5, (byte) 0x68, (byte) 0xA2, (byte) 0x1D,
				(byte) 0x65, (byte) 0xD0, (byte) 0x49, (byte) 0xD6,
				(byte) 0x66, (byte) 0x80, (byte) 0x7C, (byte) 0x39,
				(byte) 0xC4, (byte) 0x01, (byte) 0xCD, (byte) 0xFE,
				(byte) 0xE7, (byte) 0xF7, (byte) 0xF9, (byte) 0x9B,
				(byte) 0x8F, (byte) 0x9C, (byte) 0xB3, (byte) 0x4A,
				(byte) 0x88, (byte) 0x41, (byte) 0xEA, (byte) 0x62,
				(byte) 0xE8, (byte) 0x3E, (byte) 0x8D, (byte) 0x63 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xDE, (byte) 0x1B, (byte) 0xB8, (byte) 0xA3,
				(byte) 0x7C, (byte) 0xDD, (byte) 0xBC, (byte) 0xEA,
				(byte) 0xAB, (byte) 0x04, (byte) 0x3A, (byte) 0xAE,
				(byte) 0xF8, (byte) 0x16, (byte) 0x34, (byte) 0x12,
				(byte) 0x03, (byte) 0x49, (byte) 0x72, (byte) 0x6D };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		//======================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x01,
				(byte) 0x52 };
		KeyID = (byte) 0xD1;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 248;
		Modul = new byte[]{ (byte) 0xA7, (byte) 0x1A, (byte) 0xF9, (byte) 0x77,
				(byte) 0xC1, (byte) 0x07, (byte) 0x93, (byte) 0x04,
				(byte) 0xD6, (byte) 0xDF, (byte) 0xF3, (byte) 0xF6,
				(byte) 0x65, (byte) 0xAB, (byte) 0x6D, (byte) 0xB3,
				(byte) 0xFB, (byte) 0xDF, (byte) 0xA1, (byte) 0xB1,
				(byte) 0x70, (byte) 0x28, (byte) 0x7A, (byte) 0xC6,
				(byte) 0xD7, (byte) 0xBC, (byte) 0x0A, (byte) 0xFC,
				(byte) 0xB7, (byte) 0xA2, (byte) 0x02, (byte) 0xA4,
				(byte) 0xC8, (byte) 0x15, (byte) 0xE1, (byte) 0xFC,
				(byte) 0x2E, (byte) 0x34, (byte) 0xF7, (byte) 0x5A,
				(byte) 0x05, (byte) 0x25, (byte) 0x64, (byte) 0xEE,
				(byte) 0x21, (byte) 0x48, (byte) 0xA3, (byte) 0x9C,
				(byte) 0xD6, (byte) 0xB0, (byte) 0xF3, (byte) 0x9C,
				(byte) 0xFA, (byte) 0xEF, (byte) 0x95, (byte) 0xF0,
				(byte) 0x29, (byte) 0x4A, (byte) 0x86, (byte) 0xC3,
				(byte) 0x19, (byte) 0x8E, (byte) 0x34, (byte) 0x9F,
				(byte) 0xF8, (byte) 0x2E, (byte) 0xEC, (byte) 0xE6,
				(byte) 0x33, (byte) 0xD5, (byte) 0x0E, (byte) 0x58,
				(byte) 0x60, (byte) 0xA1, (byte) 0x50, (byte) 0x82,
				(byte) 0xB4, (byte) 0xB3, (byte) 0x42, (byte) 0xA9,
				(byte) 0x09, (byte) 0x28, (byte) 0x02, (byte) 0x40,
				(byte) 0x57, (byte) 0xDD, (byte) 0x51, (byte) 0xA2,
				(byte) 0x40, (byte) 0x1D, (byte) 0x78, (byte) 0x1B,
				(byte) 0x67, (byte) 0xAE, (byte) 0x75, (byte) 0x98,
				(byte) 0xD5, (byte) 0xD1, (byte) 0xFF, (byte) 0x26,
				(byte) 0xA4, (byte) 0x41, (byte) 0x97, (byte) 0x0A,
				(byte) 0x19, (byte) 0xA3, (byte) 0xA5, (byte) 0x80,
				(byte) 0x11, (byte) 0xCA, (byte) 0x19, (byte) 0x28,
				(byte) 0x42, (byte) 0x79, (byte) 0xA8, (byte) 0x55,
				(byte) 0x67, (byte) 0xD3, (byte) 0x11, (byte) 0x92,
				(byte) 0x64, (byte) 0x80, (byte) 0x6C, (byte) 0xAF,
				(byte) 0x76, (byte) 0x11, (byte) 0x22, (byte) 0xA7,
				(byte) 0x1F, (byte) 0xC0, (byte) 0x49, (byte) 0x2A,
				(byte) 0xC8, (byte) 0xD8, (byte) 0xD4, (byte) 0x2B,
				(byte) 0x03, (byte) 0x6C, (byte) 0x39, (byte) 0x4F,
				(byte) 0xC4, (byte) 0x94, (byte) 0xE0, (byte) 0x3B,
				(byte) 0x43, (byte) 0x60, (byte) 0x0D, (byte) 0x7E,
				(byte) 0x02, (byte) 0xCB, (byte) 0x52, (byte) 0x67,
				(byte) 0x75, (byte) 0x5A, (byte) 0xCE, (byte) 0x64,
				(byte) 0x43, (byte) 0x7C, (byte) 0xFA, (byte) 0x7B,
				(byte) 0x47, (byte) 0x5A, (byte) 0xD4, (byte) 0x0D,
				(byte) 0xDC, (byte) 0x93, (byte) 0xB8, (byte) 0xC9,
				(byte) 0xBC, (byte) 0xAD, (byte) 0x63, (byte) 0x80,
				(byte) 0x1F, (byte) 0xC4, (byte) 0x92, (byte) 0xFD,
				(byte) 0x25, (byte) 0x16, (byte) 0x40, (byte) 0xE4,
				(byte) 0x1F, (byte) 0xD1, (byte) 0x3F, (byte) 0x6E,
				(byte) 0x23, (byte) 0x1F, (byte) 0x56, (byte) 0xF9,
				(byte) 0x72, (byte) 0x83, (byte) 0x44, (byte) 0x7A,
				(byte) 0xB4, (byte) 0x4C, (byte) 0xBE, (byte) 0x11,
				(byte) 0x91, (byte) 0x0D, (byte) 0xB3, (byte) 0xC7,
				(byte) 0x52, (byte) 0x43, (byte) 0x78, (byte) 0x4A,
				(byte) 0xA9, (byte) 0xBD, (byte) 0xF5, (byte) 0x75,
				(byte) 0x39, (byte) 0xC3, (byte) 0x1B, (byte) 0x51,
				(byte) 0xC9, (byte) 0xF3, (byte) 0x5B, (byte) 0xF8,
				(byte) 0xBC, (byte) 0x24, (byte) 0x95, (byte) 0x76,
				(byte) 0x28, (byte) 0x81, (byte) 0x25, (byte) 0x54,
				(byte) 0x78, (byte) 0x26, (byte) 0x4B, (byte) 0x79,
				(byte) 0x2B, (byte) 0xBD, (byte) 0xCA, (byte) 0x64,
				(byte) 0x98, (byte) 0x77, (byte) 0x7A, (byte) 0xE9,
				(byte) 0x12, (byte) 0x0E, (byte) 0xD9, (byte) 0x35,
				(byte) 0xBB, (byte) 0x3E, (byte) 0x8B, (byte) 0xEA,
				(byte) 0x3E, (byte) 0xAB, (byte) 0x13, (byte) 0xD9 };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xFF, (byte) 0xDA, (byte) 0x85, (byte) 0x8C,
				(byte) 0xB2, (byte) 0xAF, (byte) 0x08, (byte) 0xB7,
				(byte) 0x9D, (byte) 0x75, (byte) 0x0C, (byte) 0xC9,
				(byte) 0x7F, (byte) 0xA6, (byte) 0xEF, (byte) 0xE2,
				(byte) 0xEF, (byte) 0x22, (byte) 0x8D, (byte) 0xDA };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		//======================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0xC0;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		ModulLen = (byte) 144;
		Modul = new byte[]{ (byte) 0xC7, (byte) 0xCD, (byte) 0xB6, (byte) 0xF2,
				(byte) 0xA3, (byte) 0xFE, (byte) 0x80, (byte) 0xA8,
				(byte) 0x83, (byte) 0x4C, (byte) 0xDD, (byte) 0xDD,
				(byte) 0x32, (byte) 0x6E, (byte) 0x10, (byte) 0x82,
				(byte) 0xAA, (byte) 0x22, (byte) 0x88, (byte) 0xF4,
				(byte) 0x7C, (byte) 0x46, (byte) 0x4D, (byte) 0x57,
				(byte) 0xB3, (byte) 0x47, (byte) 0x18, (byte) 0x19,
				(byte) 0x34, (byte) 0x31, (byte) 0x71, (byte) 0x1A,
				(byte) 0x44, (byte) 0x11, (byte) 0x91, (byte) 0x48,
				(byte) 0x05, (byte) 0x50, (byte) 0x44, (byte) 0xCF,
				(byte) 0xE3, (byte) 0x31, (byte) 0x37, (byte) 0x08,
				(byte) 0xBE, (byte) 0xD0, (byte) 0xC9, (byte) 0x8E,
				(byte) 0x1C, (byte) 0x58, (byte) 0x9B, (byte) 0x0F,
				(byte) 0x53, (byte) 0xCF, (byte) 0x6D, (byte) 0x7E,
				(byte) 0x82, (byte) 0x9F, (byte) 0xCD, (byte) 0x90,
				(byte) 0x6D, (byte) 0x21, (byte) 0xA9, (byte) 0x0F,
				(byte) 0xD4, (byte) 0xCB, (byte) 0x6B, (byte) 0xAF,
				(byte) 0x13, (byte) 0x11, (byte) 0x0C, (byte) 0x46,
				(byte) 0x85, (byte) 0x10, (byte) 0x7C, (byte) 0x27,
				(byte) 0xE0, (byte) 0x09, (byte) 0x81, (byte) 0xDB,
				(byte) 0x29, (byte) 0xDC, (byte) 0x0A, (byte) 0xC1,
				(byte) 0x86, (byte) 0xE6, (byte) 0xD7, (byte) 0x01,
				(byte) 0x57, (byte) 0x7F, (byte) 0x23, (byte) 0x86,
				(byte) 0x56, (byte) 0x26, (byte) 0x24, (byte) 0x4E,
				(byte) 0x1F, (byte) 0x9B, (byte) 0x2C, (byte) 0xD1,
				(byte) 0xDD, (byte) 0xFC, (byte) 0xB9, (byte) 0xE8,
				(byte) 0x99, (byte) 0xB4, (byte) 0x1F, (byte) 0x50,
				(byte) 0x84, (byte) 0xD8, (byte) 0xCC, (byte) 0xC1,
				(byte) 0x78, (byte) 0xA7, (byte) 0xC3, (byte) 0xF4,
				(byte) 0x54, (byte) 0x6C, (byte) 0xF9, (byte) 0x31,
				(byte) 0x87, (byte) 0x10, (byte) 0x6F, (byte) 0xAB,
				(byte) 0x05, (byte) 0x5A, (byte) 0x7A, (byte) 0xC6,
				(byte) 0x7D, (byte) 0xF6, (byte) 0x2E, (byte) 0x77,
				(byte) 0x8C, (byte) 0xB8, (byte) 0x88, (byte) 0x23,
				(byte) 0xBA, (byte) 0x58, (byte) 0xCF, (byte) 0x75,
				(byte) 0x46, (byte) 0xC2, (byte) 0xB0, (byte) 0x9F };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0x8B, (byte) 0x09, (byte) 0x4D, (byte) 0x26,
				(byte) 0x0B, (byte) 0xDF, (byte) 0x8B, (byte) 0xFC,
				(byte) 0x8B, (byte) 0x9A, (byte) 0x88, (byte) 0xB0,
				(byte) 0xC1, (byte) 0x77, (byte) 0xA4, (byte) 0x3F,
				(byte) 0xE2, (byte) 0xFA, (byte) 0xE7, (byte) 0x65 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		
		//======================================
		RID = new byte[]{ (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03,
				(byte) 0x33 };
		KeyID = (byte) 0xC1;
		HashInd = (byte) 0x01;
		ArithInd = (byte) 0x01;
		Modul = new byte[]{ (byte) 0x92, (byte) 0xF0, (byte) 0x83, (byte) 0xCB,
				(byte) 0xE4, (byte) 0x6F, (byte) 0x8D, (byte) 0xCC,
				(byte) 0x0C, (byte) 0x04, (byte) 0xE4, (byte) 0x98,
				(byte) 0xBA, (byte) 0x99, (byte) 0x52, (byte) 0xBA,
				(byte) 0x9D, (byte) 0x4C, (byte) 0x09, (byte) 0xC8,
				(byte) 0x0D, (byte) 0xD2, (byte) 0x77, (byte) 0xE5,
				(byte) 0x79, (byte) 0xF0, (byte) 0x7E, (byte) 0x45,
				(byte) 0x77, (byte) 0x28, (byte) 0x46, (byte) 0xFA,
				(byte) 0x43, (byte) 0xDD, (byte) 0x3A, (byte) 0xB3,
				(byte) 0x1C, (byte) 0xC6, (byte) 0xB0, (byte) 0x8D,
				(byte) 0xD1, (byte) 0x86, (byte) 0x95, (byte) 0x71,
				(byte) 0x59, (byte) 0x49, (byte) 0xFB, (byte) 0x10,
				(byte) 0x8E, (byte) 0x53, (byte) 0xA0, (byte) 0x71,
				(byte) 0xD3, (byte) 0x93, (byte) 0xA7, (byte) 0xFD,
				(byte) 0xDB, (byte) 0xF9, (byte) 0xC5, (byte) 0xFB,
				(byte) 0x0B, (byte) 0x05, (byte) 0x07, (byte) 0x13,
				(byte) 0x87, (byte) 0x97, (byte) 0x31, (byte) 0x74,
				(byte) 0x80, (byte) 0xFC, (byte) 0x48, (byte) 0xD6,
				(byte) 0x33, (byte) 0xED, (byte) 0x38, (byte) 0xB4,
				(byte) 0x01, (byte) 0xA4, (byte) 0x51, (byte) 0x44,
				(byte) 0x3A, (byte) 0xD7, (byte) 0xF1, (byte) 0x5F,
				(byte) 0xAC, (byte) 0xDA, (byte) 0x45, (byte) 0xA6,
				(byte) 0x2A, (byte) 0xBE, (byte) 0x24, (byte) 0xFF,
				(byte) 0x63, (byte) 0x43, (byte) 0xAD, (byte) 0xD0,
				(byte) 0x90, (byte) 0x9E, (byte) 0xA8, (byte) 0x38,
				(byte) 0x93, (byte) 0x48, (byte) 0xE5, (byte) 0x4E,
				(byte) 0x26, (byte) 0xF8, (byte) 0x42, (byte) 0x88,
				(byte) 0x0D, (byte) 0x1A, (byte) 0x69, (byte) 0xF9,
				(byte) 0x21, (byte) 0x43, (byte) 0x68, (byte) 0xBA,
				(byte) 0x30, (byte) 0xC1, (byte) 0x8D, (byte) 0xE5,
				(byte) 0xC5, (byte) 0xE0, (byte) 0xCB, (byte) 0x92,
				(byte) 0x53, (byte) 0xB5, (byte) 0xAB, (byte) 0xC5,
				(byte) 0x5F, (byte) 0xB6, (byte) 0xEF, (byte) 0x0A,
				(byte) 0x73, (byte) 0x8D, (byte) 0x92, (byte) 0x74,
				(byte) 0x94, (byte) 0xA3, (byte) 0x0B, (byte) 0xBF,
				(byte) 0x82, (byte) 0xE3, (byte) 0x40, (byte) 0x28,
				(byte) 0x53, (byte) 0x63, (byte) 0xB6, (byte) 0xFA,
				(byte) 0xA1, (byte) 0x56, (byte) 0x73, (byte) 0x82,
				(byte) 0x9D, (byte) 0xBB, (byte) 0x21, (byte) 0x0E,
				(byte) 0x71, (byte) 0x0D, (byte) 0xA5, (byte) 0x8E,
				(byte) 0xE9, (byte) 0xE5, (byte) 0x78, (byte) 0xE7,
				(byte) 0xCE, (byte) 0x55, (byte) 0xDC, (byte) 0x81,
				(byte) 0x2A, (byte) 0xB7, (byte) 0xD6, (byte) 0xDC,
				(byte) 0xCE, (byte) 0x0E, (byte) 0x3B, (byte) 0x1A,
				(byte) 0xE1, (byte) 0x79, (byte) 0xD6, (byte) 0x64,
				(byte) 0xF3, (byte) 0x35, (byte) 0x6E, (byte) 0xB9,
				(byte) 0x51, (byte) 0xE3, (byte) 0xC9, (byte) 0x1A,
				(byte) 0x1C, (byte) 0xBB, (byte) 0xF6, (byte) 0xA7,
				(byte) 0xCA, (byte) 0x8D, (byte) 0x0C, (byte) 0x7E,
				(byte) 0xC9, (byte) 0xC6, (byte) 0xAF, (byte) 0x7A,
				(byte) 0x49, (byte) 0x41, (byte) 0xC5, (byte) 0x05,
				(byte) 0x10, (byte) 0x99, (byte) 0xB9, (byte) 0x78,
				(byte) 0x4E, (byte) 0x56, (byte) 0xC9, (byte) 0x16,
				(byte) 0x20, (byte) 0x67, (byte) 0xB8, (byte) 0xC3,
				(byte) 0xB1, (byte) 0x5C, (byte) 0x5F, (byte) 0xA4,
				(byte) 0x48, (byte) 0x0A, (byte) 0x64, (byte) 0x5C,
				(byte) 0xD2, (byte) 0x52, (byte) 0x6A, (byte) 0x69,
				(byte) 0xC8, (byte) 0x0B, (byte) 0xA8, (byte) 0xEF,
				(byte) 0x36, (byte) 0x1B, (byte) 0xE2, (byte) 0xAA,
				(byte) 0x94, (byte) 0x17, (byte) 0xDE, (byte) 0xFC,
				(byte) 0xE3, (byte) 0x5B, (byte) 0x62, (byte) 0xB0,
				(byte) 0xC9, (byte) 0xCF, (byte) 0x09, (byte) 0x7D };
		ExponentLen = 3;
		Exponent = new byte[]{ (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		ExpDate = new byte[]{ (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		CheckSum = new byte[]{ (byte) 0xB6, (byte) 0x37, (byte) 0x2D, (byte) 0xB9,
				(byte) 0x91, (byte) 0x9F, (byte) 0x8C, (byte) 0x6C,
				(byte) 0x9C, (byte) 0x88, (byte) 0xE8, (byte) 0x3D,
				(byte) 0x3C, (byte) 0x60, (byte) 0x0A, (byte) 0x4A,
				(byte) 0xD8, (byte) 0xAD, (byte) 0xC7, (byte) 0xA9 };
		EmvKernel.EmvLib_AddCapk(new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum));
		
		return;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	public static void setDefaultTestCAPK_VW() {
				EmvKernel.EmvLib_AddCapk(get_capk_visa_t94());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t95());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t96());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t97());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t98());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t99());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_v01());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_v03());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_v05());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_v07());
		/*
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_v02());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_v03());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_v04());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tEF());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF0());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF1());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF2());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF3());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF4());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tF8());
		 * EmvKernel.EmvLib_AddCapk(get_capk_eurocheque_tF8());
		 * EmvKernel.EmvLib_AddCapk(get_capk_mastercard_tFE());
		 * EmvKernel.EmvLib_AddCapk(get_capk_eurocheque_tFE());
		 */
		EmvKernel.EmvLib_AddCapk(get_capk_jcb_t08());
		EmvKernel.EmvLib_AddCapk(get_capk_jcb_t01());
		EmvKernel.EmvLib_AddCapk(get_capk_jcb_t02());
		EmvKernel.EmvLib_AddCapk(get_capk_jcb_t03());
		EmvKernel.EmvLib_AddCapk(get_capk_cup_t01());
		EmvKernel.EmvLib_AddCapk(get_capk_pboctest_t08());
		EmvKernel.EmvLib_AddCapk(get_capk_pboctest_t80());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v01());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v02());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v03());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v04());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v08());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v09());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v0A());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v0B());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_v0C());
		EmvKernel.EmvLib_AddCapk(get_capk_visatest_t50());
		EmvKernel.EmvLib_AddCapk(get_capk_visatest_t51());
		EmvKernel.EmvLib_AddCapk(get_capk_visatest_t53());
		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE1());
		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE2());
		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE3());
		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE4());
		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE5());
		EmvKernel.EmvLib_AddCapk(get_capk_emvtest_tE6());
		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFE());
		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFC());
		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFA());
		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFB());
		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFD());
		EmvKernel.EmvLib_AddCapk(get_capk_mastertest_tFF());
		EmvKernel.EmvLib_AddCapk(get_capk_jcbtest_t02());
		EmvKernel.EmvLib_AddCapk(get_capk_jcbtest_t03());
		EmvKernel.EmvLib_AddCapk(get_capk_amextest_t60());
		EmvKernel.EmvLib_AddCapk(get_capk_amextest_t61());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t50());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t51());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t53());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t54());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t57());
		EmvKernel.EmvLib_AddCapk(get_capk_visa_t58());
		EmvKernel.EmvLib_AddCapk(get_capk_discover_tD0());
		EmvKernel.EmvLib_AddCapk(get_capk_discover_tD1());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_vC0());
		EmvKernel.EmvLib_AddCapk(get_capk_pboc_vC1());
	}
	
	public static EMVCAPK get_capk_visa_t50() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x50;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xD1, (byte) 0x11, (byte) 0x97, (byte) 0x59,
				(byte) 0x00, (byte) 0x57, (byte) 0xB8, (byte) 0x41,
				(byte) 0x96, (byte) 0xC2, (byte) 0xF4, (byte) 0xD1,
				(byte) 0x1A, (byte) 0x8F, (byte) 0x3C, (byte) 0x05,
				(byte) 0x40, (byte) 0x8F, (byte) 0x42, (byte) 0x2A,
				(byte) 0x35, (byte) 0xD7, (byte) 0x02, (byte) 0xF9,
				(byte) 0x01, (byte) 0x06, (byte) 0xEA, (byte) 0x5B,
				(byte) 0x01, (byte) 0x9B, (byte) 0xB2, (byte) 0x8A,
				(byte) 0xE6, (byte) 0x07, (byte) 0xAA, (byte) 0x9C,
				(byte) 0xDE, (byte) 0xBC, (byte) 0xD0, (byte) 0xD8,
				(byte) 0x1A, (byte) 0x38, (byte) 0xD4, (byte) 0x8C,
				(byte) 0x7E, (byte) 0xBB, (byte) 0x00, (byte) 0x62,
				(byte) 0xD2, (byte) 0x87, (byte) 0x36, (byte) 0x9E,
				(byte) 0xC0, (byte) 0xC4, (byte) 0x21, (byte) 0x24,
				(byte) 0x24, (byte) 0x6A, (byte) 0xC3, (byte) 0x0D,
				(byte) 0x80, (byte) 0xCD, (byte) 0x60, (byte) 0x2A,
				(byte) 0xB7, (byte) 0x23, (byte) 0x8D, (byte) 0x51,
				(byte) 0x08, (byte) 0x4D, (byte) 0xED, (byte) 0x46,
				(byte) 0x98, (byte) 0x16, (byte) 0x2C, (byte) 0x59,
				(byte) 0xD2, (byte) 0x5E, (byte) 0xAC, (byte) 0x1E,
				(byte) 0x66, (byte) 0x25, (byte) 0x5B, (byte) 0x4D,
				(byte) 0xB2, (byte) 0x35, (byte) 0x25, (byte) 0x26,
				(byte) 0xEF, (byte) 0x09, (byte) 0x82, (byte) 0xC3,
				(byte) 0xB8, (byte) 0xAD, (byte) 0x3D, (byte) 0x1C,
				(byte) 0xCE, (byte) 0x85, (byte) 0xB0, (byte) 0x1D,
				(byte) 0xB5, (byte) 0x78, (byte) 0x8E, (byte) 0x75,
				(byte) 0xE0, (byte) 0x9F, (byte) 0x44, (byte) 0xBE,
				(byte) 0x73, (byte) 0x61, (byte) 0x36, (byte) 0x6D,
				(byte) 0xEF, (byte) 0x9D, (byte) 0x1E, (byte) 0x13,
				(byte) 0x17, (byte) 0xB0, (byte) 0x5E, (byte) 0x5D,
				(byte) 0x0F, (byte) 0xF5, (byte) 0x29, (byte) 0x0F,
				(byte) 0x88, (byte) 0xA0, (byte) 0xDB, (byte) 0x47 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB7, (byte) 0x69, (byte) 0x77, (byte) 0x56,
				(byte) 0x68, (byte) 0xCA, (byte) 0xCB, (byte) 0x5D,
				(byte) 0x22, (byte) 0xA6, (byte) 0x47, (byte) 0xD1,
				(byte) 0xD9, (byte) 0x93, (byte) 0x14, (byte) 0x1E,
				(byte) 0xDA, (byte) 0xB7, (byte) 0x23, (byte) 0x7B };
		
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_visa_t51() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x51;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xDB, (byte) 0x5F, (byte) 0xA2, (byte) 0x9D,
				(byte) 0x1F, (byte) 0xDA, (byte) 0x8C, (byte) 0x16,
				(byte) 0x34, (byte) 0xB0, (byte) 0x4D, (byte) 0xCC,
				(byte) 0xFF, (byte) 0x14, (byte) 0x8A, (byte) 0xBE,
				(byte) 0xE6, (byte) 0x3C, (byte) 0x77, (byte) 0x20,
				(byte) 0x35, (byte) 0xC7, (byte) 0x98, (byte) 0x51,
				(byte) 0xD3, (byte) 0x51, (byte) 0x21, (byte) 0x07,
				(byte) 0x58, (byte) 0x6E, (byte) 0x02, (byte) 0xA9,
				(byte) 0x17, (byte) 0xF7, (byte) 0xC7, (byte) 0xE8,
				(byte) 0x85, (byte) 0xE7, (byte) 0xC4, (byte) 0xA7,
				(byte) 0xD5, (byte) 0x29, (byte) 0x71, (byte) 0x0A,
				(byte) 0x14, (byte) 0x53, (byte) 0x34, (byte) 0xCE,
				(byte) 0x67, (byte) 0xDC, (byte) 0x41, (byte) 0x2C,
				(byte) 0xB1, (byte) 0x59, (byte) 0x7B, (byte) 0x77,
				(byte) 0xAA, (byte) 0x25, (byte) 0x43, (byte) 0xB9,
				(byte) 0x8D, (byte) 0x19, (byte) 0xCF, (byte) 0x2C,
				(byte) 0xB8, (byte) 0x0C, (byte) 0x52, (byte) 0x2B,
				(byte) 0xDB, (byte) 0xEA, (byte) 0x0F, (byte) 0x1B,
				(byte) 0x11, (byte) 0x3F, (byte) 0xA2, (byte) 0xC8,
				(byte) 0x62, (byte) 0x16, (byte) 0xC8, (byte) 0xC6,
				(byte) 0x10, (byte) 0xA2, (byte) 0xD5, (byte) 0x8F,
				(byte) 0x29, (byte) 0xCF, (byte) 0x33, (byte) 0x55,
				(byte) 0xCE, (byte) 0xB1, (byte) 0xBD, (byte) 0x3E,
				(byte) 0xF4, (byte) 0x10, (byte) 0xD1, (byte) 0xED,
				(byte) 0xD1, (byte) 0xF7, (byte) 0xAE, (byte) 0x0F,
				(byte) 0x16, (byte) 0x89, (byte) 0x79, (byte) 0x79,
				(byte) 0xDE, (byte) 0x28, (byte) 0xC6, (byte) 0xEF,
				(byte) 0x29, (byte) 0x3E, (byte) 0x0A, (byte) 0x19,
				(byte) 0x28, (byte) 0x2B, (byte) 0xD1, (byte) 0xD7,
				(byte) 0x93, (byte) 0xF1, (byte) 0x33, (byte) 0x15,
				(byte) 0x23, (byte) 0xFC, (byte) 0x71, (byte) 0xA2,
				(byte) 0x28, (byte) 0x80, (byte) 0x04, (byte) 0x68,
				(byte) 0xC0, (byte) 0x1A, (byte) 0x36, (byte) 0x53,
				(byte) 0xD1, (byte) 0x4C, (byte) 0x6B, (byte) 0x48,
				(byte) 0x51, (byte) 0xA5, (byte) 0xC0, (byte) 0x29,
				(byte) 0x47, (byte) 0x8E, (byte) 0x75, (byte) 0x7F };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB9, (byte) 0xD2, (byte) 0x48, (byte) 0x07,
				(byte) 0x5A, (byte) 0x3F, (byte) 0x23, (byte) 0xB5,
				(byte) 0x22, (byte) 0xFE, (byte) 0x45, (byte) 0x57,
				(byte) 0x3E, (byte) 0x04, (byte) 0x37, (byte) 0x4D,
				(byte) 0xC4, (byte) 0x99, (byte) 0x5D, (byte) 0x71 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_visa_t53() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x53;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xBC, (byte) 0xD8, (byte) 0x37, (byte) 0x21,
				(byte) 0xBE, (byte) 0x52, (byte) 0xCC, (byte) 0xCC,
				(byte) 0x4B, (byte) 0x64, (byte) 0x57, (byte) 0x32,
				(byte) 0x1F, (byte) 0x22, (byte) 0xA7, (byte) 0xDC,
				(byte) 0x76, (byte) 0x9F, (byte) 0x54, (byte) 0xEB,
				(byte) 0x80, (byte) 0x25, (byte) 0x91, (byte) 0x3B,
				(byte) 0xE8, (byte) 0x04, (byte) 0xD9, (byte) 0xEA,
				(byte) 0xBB, (byte) 0xFA, (byte) 0x19, (byte) 0xB3,
				(byte) 0xD7, (byte) 0xC5, (byte) 0xD3, (byte) 0xCA,
				(byte) 0x65, (byte) 0x8D, (byte) 0x76, (byte) 0x8C,
				(byte) 0xAF, (byte) 0x57, (byte) 0x06, (byte) 0x7E,
				(byte) 0xEC, (byte) 0x83, (byte) 0xC7, (byte) 0xE6,
				(byte) 0xE9, (byte) 0xF8, (byte) 0x1D, (byte) 0x05,
				(byte) 0x86, (byte) 0x70, (byte) 0x3E, (byte) 0xD9,
				(byte) 0xDD, (byte) 0xDA, (byte) 0xDD, (byte) 0x20,
				(byte) 0x67, (byte) 0x5D, (byte) 0x63, (byte) 0x42,
				(byte) 0x49, (byte) 0x80, (byte) 0xB1, (byte) 0x0E,
				(byte) 0xB3, (byte) 0x64, (byte) 0xE8, (byte) 0x1E,
				(byte) 0xB3, (byte) 0x7D, (byte) 0xB4, (byte) 0x0E,
				(byte) 0xD1, (byte) 0x00, (byte) 0x34, (byte) 0x4C,
				(byte) 0x92, (byte) 0x88, (byte) 0x86, (byte) 0xFF,
				(byte) 0x4C, (byte) 0xCC, (byte) 0x37, (byte) 0x20,
				(byte) 0x3E, (byte) 0xE6, (byte) 0x10, (byte) 0x6D,
				(byte) 0x5B, (byte) 0x59, (byte) 0xD1, (byte) 0xAC,
				(byte) 0x10, (byte) 0x2E, (byte) 0x2C, (byte) 0xD2,
				(byte) 0xD7, (byte) 0xAC, (byte) 0x17, (byte) 0xF4,
				(byte) 0xD9, (byte) 0x6C, (byte) 0x39, (byte) 0x8E,
				(byte) 0x5F, (byte) 0xD9, (byte) 0x93, (byte) 0xEC,
				(byte) 0xB4, (byte) 0xFF, (byte) 0xDF, (byte) 0x79,
				(byte) 0xB1, (byte) 0x75, (byte) 0x47, (byte) 0xFF,
				(byte) 0x9F, (byte) 0xA2, (byte) 0xAA, (byte) 0x8E,
				(byte) 0xEF, (byte) 0xD6, (byte) 0xCB, (byte) 0xDA,
				(byte) 0x12, (byte) 0x4C, (byte) 0xBB, (byte) 0x17,
				(byte) 0xA0, (byte) 0xF8, (byte) 0x52, (byte) 0x81,
				(byte) 0x46, (byte) 0x38, (byte) 0x71, (byte) 0x35,
				(byte) 0xE2, (byte) 0x26, (byte) 0xB0, (byte) 0x05,
				(byte) 0xA4, (byte) 0x74, (byte) 0xB9, (byte) 0x06,
				(byte) 0x2F, (byte) 0xF2, (byte) 0x64, (byte) 0xD2,
				(byte) 0xFF, (byte) 0x8E, (byte) 0xFA, (byte) 0x36,
				(byte) 0x81, (byte) 0x4A, (byte) 0xA2, (byte) 0x95,
				(byte) 0x00, (byte) 0x65, (byte) 0xB1, (byte) 0xB0,
				(byte) 0x4C, (byte) 0x0A, (byte) 0x1A, (byte) 0xE9,
				(byte) 0xB2, (byte) 0xF6, (byte) 0x9D, (byte) 0x4A,
				(byte) 0x4A, (byte) 0xA9, (byte) 0x79, (byte) 0xD6,
				(byte) 0xCE, (byte) 0x95, (byte) 0xFE, (byte) 0xE9,
				(byte) 0x48, (byte) 0x5E, (byte) 0xD0, (byte) 0xA0,
				(byte) 0x3A, (byte) 0xEE, (byte) 0x9B, (byte) 0xD9,
				(byte) 0x53, (byte) 0xE8, (byte) 0x1C, (byte) 0xFD,
				(byte) 0x1E, (byte) 0xF6, (byte) 0xE8, (byte) 0x14,
				(byte) 0xDF, (byte) 0xD3, (byte) 0xC2, (byte) 0xCE,
				(byte) 0x37, (byte) 0xAE, (byte) 0xFA, (byte) 0x38,
				(byte) 0xC1, (byte) 0xF9, (byte) 0x87, (byte) 0x73,
				(byte) 0x71, (byte) 0xE9, (byte) 0x1D, (byte) 0x6A,
				(byte) 0x5E, (byte) 0xB5, (byte) 0x9F, (byte) 0xDE,
				(byte) 0xDF, (byte) 0x75, (byte) 0xD3, (byte) 0x32,
				(byte) 0x5F, (byte) 0xA3, (byte) 0xCA, (byte) 0x66,
				(byte) 0xCD, (byte) 0xFB, (byte) 0xA0, (byte) 0xE5,
				(byte) 0x71, (byte) 0x46, (byte) 0xCC, (byte) 0x78,
				(byte) 0x98, (byte) 0x18, (byte) 0xFF, (byte) 0x06,
				(byte) 0xBE, (byte) 0x5F, (byte) 0xCC, (byte) 0x50,
				(byte) 0xAB, (byte) 0xD3, (byte) 0x62, (byte) 0xAE,
				(byte) 0x4B, (byte) 0x80, (byte) 0x99, (byte) 0x6D };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xAC, (byte) 0x21, (byte) 0x3A, (byte) 0x2E,
				(byte) 0x0D, (byte) 0x2C, (byte) 0x0C, (byte) 0xA3,
				(byte) 0x5A, (byte) 0xD0, (byte) 0x20, (byte) 0x13,
				(byte) 0x23, (byte) 0x53, (byte) 0x6D, (byte) 0x58,
				(byte) 0x09, (byte) 0x7E, (byte) 0x4E, (byte) 0x57 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_visa_t57() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x57;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 96;
		byte[] Modul = { (byte) 0x94, (byte) 0x2B, (byte) 0x7F, (byte) 0x2B,
				(byte) 0xA5, (byte) 0xEA, (byte) 0x30, (byte) 0x73,
				(byte) 0x12, (byte) 0xB6, (byte) 0x3D, (byte) 0xF7,
				(byte) 0x7C, (byte) 0x52, (byte) 0x43, (byte) 0x61,
				(byte) 0x8A, (byte) 0xCC, (byte) 0x20, (byte) 0x02,
				(byte) 0xBD, (byte) 0x7E, (byte) 0xCB, (byte) 0x74,
				(byte) 0xD8, (byte) 0x21, (byte) 0xFE, (byte) 0x7B,
				(byte) 0xDC, (byte) 0x78, (byte) 0xBF, (byte) 0x28,
				(byte) 0xF4, (byte) 0x9F, (byte) 0x74, (byte) 0x19,
				(byte) 0x0A, (byte) 0xD9, (byte) 0xB2, (byte) 0x3B,
				(byte) 0x97, (byte) 0x13, (byte) 0xB1, (byte) 0x40,
				(byte) 0xFF, (byte) 0xEC, (byte) 0x1F, (byte) 0xB4,
				(byte) 0x29, (byte) 0xD9, (byte) 0x3F, (byte) 0x56,
				(byte) 0xBD, (byte) 0xC7, (byte) 0xAD, (byte) 0xE4,
				(byte) 0xAC, (byte) 0x07, (byte) 0x5D, (byte) 0x75,
				(byte) 0x53, (byte) 0x2C, (byte) 0x1E, (byte) 0x59,
				(byte) 0x0B, (byte) 0x21, (byte) 0x87, (byte) 0x4C,
				(byte) 0x79, (byte) 0x52, (byte) 0xF2, (byte) 0x9B,
				(byte) 0x8C, (byte) 0x0F, (byte) 0x0C, (byte) 0x1C,
				(byte) 0xE3, (byte) 0xAE, (byte) 0xED, (byte) 0xC8,
				(byte) 0xDA, (byte) 0x25, (byte) 0x34, (byte) 0x31,
				(byte) 0x23, (byte) 0xE7, (byte) 0x1D, (byte) 0xCF,
				(byte) 0x86, (byte) 0xC6, (byte) 0x99, (byte) 0x8E,
				(byte) 0x15, (byte) 0xF7, (byte) 0x56, (byte) 0xE3 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x25, (byte) 0x1A, (byte) 0x5F, (byte) 0x5D,
				(byte) 0xE6, (byte) 0x1C, (byte) 0xF2, (byte) 0x8B,
				(byte) 0x5C, (byte) 0x6E, (byte) 0x2B, (byte) 0x58,
				(byte) 0x07, (byte) 0xC0, (byte) 0x64, (byte) 0x4A,
				(byte) 0x01, (byte) 0xD4, (byte) 0x6F, (byte) 0xF5 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_visa_t58() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x58;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 200;
		byte[] Modul = { (byte) 0x99, (byte) 0x55, (byte) 0x2C, (byte) 0x4A,
				(byte) 0x1E, (byte) 0xCD, (byte) 0x68, (byte) 0xA0,
				(byte) 0x26, (byte) 0x01, (byte) 0x57, (byte) 0xFC,
				(byte) 0x41, (byte) 0x51, (byte) 0xB5, (byte) 0x99,
				(byte) 0x28, (byte) 0x37, (byte) 0x44, (byte) 0x5D,
				(byte) 0x3F, (byte) 0xC5, (byte) 0x73, (byte) 0x65,
				(byte) 0xCA, (byte) 0x56, (byte) 0x92, (byte) 0xC8,
				(byte) 0x7B, (byte) 0xE3, (byte) 0x58, (byte) 0xCD,
				(byte) 0xCD, (byte) 0xF2, (byte) 0xC9, (byte) 0x2F,
				(byte) 0xB6, (byte) 0x83, (byte) 0x75, (byte) 0x22,
				(byte) 0x84, (byte) 0x2A, (byte) 0x48, (byte) 0xEB,
				(byte) 0x11, (byte) 0xCD, (byte) 0xFF, (byte) 0xE2,
				(byte) 0xFD, (byte) 0x91, (byte) 0x77, (byte) 0x0C,
				(byte) 0x72, (byte) 0x21, (byte) 0xE4, (byte) 0xAF,
				(byte) 0x62, (byte) 0x07, (byte) 0xC2, (byte) 0xDE,
				(byte) 0x40, (byte) 0x04, (byte) 0xC7, (byte) 0xDE,
				(byte) 0xE1, (byte) 0xB6, (byte) 0x27, (byte) 0x6D,
				(byte) 0xC6, (byte) 0x2D, (byte) 0x52, (byte) 0xA8,
				(byte) 0x7D, (byte) 0x2C, (byte) 0xD0, (byte) 0x1F,
				(byte) 0xBF, (byte) 0x2D, (byte) 0xC4, (byte) 0x06,
				(byte) 0x5D, (byte) 0xB5, (byte) 0x28, (byte) 0x24,
				(byte) 0xD2, (byte) 0xA2, (byte) 0x16, (byte) 0x7A,
				(byte) 0x06, (byte) 0xD1, (byte) 0x9E, (byte) 0x6A,
				(byte) 0x0F, (byte) 0x78, (byte) 0x10, (byte) 0x71,
				(byte) 0xCD, (byte) 0xB2, (byte) 0xDD, (byte) 0x31,
				(byte) 0x4C, (byte) 0xB9, (byte) 0x44, (byte) 0x41,
				(byte) 0xD8, (byte) 0xDC, (byte) 0x0E, (byte) 0x93,
				(byte) 0x63, (byte) 0x17, (byte) 0xB7, (byte) 0x7B,
				(byte) 0xF0, (byte) 0x6F, (byte) 0x51, (byte) 0x77,
				(byte) 0xF6, (byte) 0xC5, (byte) 0xAB, (byte) 0xA3,
				(byte) 0xA3, (byte) 0xBC, (byte) 0x6A, (byte) 0xA3,
				(byte) 0x02, (byte) 0x09, (byte) 0xC9, (byte) 0x72,
				(byte) 0x60, (byte) 0xB7, (byte) 0xA1, (byte) 0xAD,
				(byte) 0x3A, (byte) 0x19, (byte) 0x2C, (byte) 0x9B,
				(byte) 0x8C, (byte) 0xD1, (byte) 0xD1, (byte) 0x53,
				(byte) 0x57, (byte) 0x0A, (byte) 0xFC, (byte) 0xC8,
				(byte) 0x7C, (byte) 0x3C, (byte) 0xD6, (byte) 0x81,
				(byte) 0xD1, (byte) 0x3E, (byte) 0x99, (byte) 0x7F,
				(byte) 0xE3, (byte) 0x3B, (byte) 0x39, (byte) 0x63,
				(byte) 0xA0, (byte) 0xA1, (byte) 0xC7, (byte) 0x97,
				(byte) 0x72, (byte) 0xAC, (byte) 0xF9, (byte) 0x91,
				(byte) 0x03, (byte) 0x3E, (byte) 0x1B, (byte) 0x83,
				(byte) 0x97, (byte) 0xAD, (byte) 0x03, (byte) 0x41,
				(byte) 0x50, (byte) 0x0E, (byte) 0x48, (byte) 0xA2,
				(byte) 0x47, (byte) 0x70, (byte) 0xBC, (byte) 0x4C,
				(byte) 0xBE, (byte) 0x19, (byte) 0xD2, (byte) 0xCC,
				(byte) 0xF4, (byte) 0x19, (byte) 0x50, (byte) 0x4F,
				(byte) 0xDB, (byte) 0xF0, (byte) 0x38, (byte) 0x9B,
				(byte) 0xC2, (byte) 0xF2, (byte) 0xFD, (byte) 0xCD,
				(byte) 0x4D, (byte) 0x44, (byte) 0xE6, (byte) 0x1F };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x75, (byte) 0x3E, (byte) 0xD0, (byte) 0xAA,
				(byte) 0x23, (byte) 0xE4, (byte) 0xCD, (byte) 0x5A,
				(byte) 0xBD, (byte) 0x69, (byte) 0xEA, (byte) 0xE7,
				(byte) 0x90, (byte) 0x4B, (byte) 0x68, (byte) 0x4A,
				(byte) 0x34, (byte) 0xA5, (byte) 0x7C, (byte) 0x22 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_visa_t54() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x54;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xC6, (byte) 0xDD, (byte) 0xC0, (byte) 0xB7,
				(byte) 0x64, (byte) 0x5F, (byte) 0x7F, (byte) 0x16,
				(byte) 0x28, (byte) 0x6A, (byte) 0xB7, (byte) 0xE4,
				(byte) 0x11, (byte) 0x66, (byte) 0x55, (byte) 0xF5,
				(byte) 0x6D, (byte) 0xD0, (byte) 0xC9, (byte) 0x44,
				(byte) 0x76, (byte) 0x60, (byte) 0x40, (byte) 0xDC,
				(byte) 0x68, (byte) 0x66, (byte) 0x4D, (byte) 0xD9,
				(byte) 0x73, (byte) 0xBD, (byte) 0x3B, (byte) 0xFD,
				(byte) 0x4C, (byte) 0x52, (byte) 0x5B, (byte) 0xCB,
				(byte) 0xB9, (byte) 0x52, (byte) 0x72, (byte) 0xB6,
				(byte) 0xB3, (byte) 0xAD, (byte) 0x9B, (byte) 0xA8,
				(byte) 0x86, (byte) 0x03, (byte) 0x03, (byte) 0xAD,
				(byte) 0x08, (byte) 0xD9, (byte) 0xE8, (byte) 0xCC,
				(byte) 0x34, (byte) 0x4A, (byte) 0x40, (byte) 0x70,
				(byte) 0xF4, (byte) 0xCF, (byte) 0xB9, (byte) 0xEE,
				(byte) 0xAF, (byte) 0x29, (byte) 0xC8, (byte) 0xA3,
				(byte) 0x46, (byte) 0x08, (byte) 0x50, (byte) 0xC2,
				(byte) 0x64, (byte) 0xCD, (byte) 0xA3, (byte) 0x9B,
				(byte) 0xBE, (byte) 0x3A, (byte) 0x7E, (byte) 0x7D,
				(byte) 0x08, (byte) 0xA6, (byte) 0x9C, (byte) 0x31,
				(byte) 0xB5, (byte) 0xC8, (byte) 0xDD, (byte) 0x9F,
				(byte) 0x94, (byte) 0xDD, (byte) 0xBC, (byte) 0x92,
				(byte) 0x65, (byte) 0x75, (byte) 0x8C, (byte) 0x0E,
				(byte) 0x73, (byte) 0x99, (byte) 0xAD, (byte) 0xCF,
				(byte) 0x43, (byte) 0x62, (byte) 0xCA, (byte) 0xEE,
				(byte) 0x45, (byte) 0x8D, (byte) 0x41, (byte) 0x4C,
				(byte) 0x52, (byte) 0xB4, (byte) 0x98, (byte) 0x27,
				(byte) 0x48, (byte) 0x81, (byte) 0xB1, (byte) 0x96,
				(byte) 0xDA, (byte) 0xCC, (byte) 0xA7, (byte) 0x27,
				(byte) 0x3F, (byte) 0x68, (byte) 0x7F, (byte) 0x2A,
				(byte) 0x65, (byte) 0xFA, (byte) 0xEB, (byte) 0x80,
				(byte) 0x9D, (byte) 0x4B, (byte) 0x2A, (byte) 0xC1,
				(byte) 0xD3, (byte) 0xD1, (byte) 0xEF, (byte) 0xB4,
				(byte) 0xF6, (byte) 0x49, (byte) 0x03, (byte) 0x22,
				(byte) 0x31, (byte) 0x8B, (byte) 0xD2, (byte) 0x96,
				(byte) 0xD1, (byte) 0x53, (byte) 0xB3, (byte) 0x07,
				(byte) 0xA3, (byte) 0x28, (byte) 0x3A, (byte) 0xB4,
				(byte) 0xE5, (byte) 0xBE, (byte) 0x6E, (byte) 0xBD,
				(byte) 0x91, (byte) 0x03, (byte) 0x59, (byte) 0xA8,
				(byte) 0x56, (byte) 0x5E, (byte) 0xB9, (byte) 0xC4,
				(byte) 0x36, (byte) 0x0D, (byte) 0x24, (byte) 0xBA,
				(byte) 0xAC, (byte) 0xA3, (byte) 0xDB, (byte) 0xFE,
				(byte) 0x39, (byte) 0x3F, (byte) 0x3D, (byte) 0x6C,
				(byte) 0x83, (byte) 0x0D, (byte) 0x60, (byte) 0x3C,
				(byte) 0x6F, (byte) 0xC1, (byte) 0xE8, (byte) 0x34,
				(byte) 0x09, (byte) 0xDF, (byte) 0xCD, (byte) 0x80,
				(byte) 0xD3, (byte) 0xA3, (byte) 0x3B, (byte) 0xA2,
				(byte) 0x43, (byte) 0x81, (byte) 0x3B, (byte) 0xBB,
				(byte) 0x4C, (byte) 0xEA, (byte) 0xF9, (byte) 0xCB,
				(byte) 0xAB, (byte) 0x6B, (byte) 0x74, (byte) 0xB0,
				(byte) 0x01, (byte) 0x16, (byte) 0xF7, (byte) 0x2A,
				(byte) 0xB2, (byte) 0x78, (byte) 0xA8, (byte) 0x8A,
				(byte) 0x01, (byte) 0x1D, (byte) 0x70, (byte) 0x07,
				(byte) 0x1E, (byte) 0x06, (byte) 0xCA, (byte) 0xB1,
				(byte) 0x40, (byte) 0x64, (byte) 0x64, (byte) 0x38,
				(byte) 0xD9, (byte) 0x86, (byte) 0xD4, (byte) 0x82,
				(byte) 0x81, (byte) 0x62, (byte) 0x4B, (byte) 0x85,
				(byte) 0xB3, (byte) 0xB2, (byte) 0xEB, (byte) 0xB9,
				(byte) 0xA6, (byte) 0xAB, (byte) 0x3B, (byte) 0xF2,
				(byte) 0x17, (byte) 0x8F, (byte) 0xCC, (byte) 0x30,
				(byte) 0x11, (byte) 0xE7, (byte) 0xCA, (byte) 0xF2,
				(byte) 0x48, (byte) 0x97, (byte) 0xAE, (byte) 0x7D };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x06, (byte) 0x96, (byte) 0x06, (byte) 0x18,
				(byte) 0x79, (byte) 0x1A, (byte) 0x86, (byte) 0xD3,
				(byte) 0x87, (byte) 0x30, (byte) 0x1E, (byte) 0xDD,
				(byte) 0x4A, (byte) 0x3B, (byte) 0xAF, (byte) 0x2D,
				(byte) 0x34, (byte) 0xFE, (byte) 0xF1, (byte) 0xB4 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_jcb_t02() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x65 };
		byte KeyID = (byte) 0x02;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xBB, (byte) 0x7F, (byte) 0x51, (byte) 0x98,
				(byte) 0x3F, (byte) 0xD8, (byte) 0x70, (byte) 0x7F,
				(byte) 0xD6, (byte) 0x22, (byte) 0x7C, (byte) 0x23,
				(byte) 0xDE, (byte) 0xF5, (byte) 0xD5, (byte) 0x37,
				(byte) 0x7A, (byte) 0x5A, (byte) 0x73, (byte) 0x7C,
				(byte) 0xEF, (byte) 0x3C, (byte) 0x52, (byte) 0x52,
				(byte) 0xE5, (byte) 0x78, (byte) 0xEF, (byte) 0xE1,
				(byte) 0x36, (byte) 0xDF, (byte) 0x87, (byte) 0xB5,
				(byte) 0x04, (byte) 0x73, (byte) 0xF9, (byte) 0x34,
				(byte) 0x1F, (byte) 0x16, (byte) 0x40, (byte) 0xC8,
				(byte) 0xD2, (byte) 0x58, (byte) 0x03, (byte) 0x4E,
				(byte) 0x14, (byte) 0xC1, (byte) 0x69, (byte) 0x93,
				(byte) 0xFC, (byte) 0xE6, (byte) 0xC6, (byte) 0xB8,
				(byte) 0xC3, (byte) 0xCE, (byte) 0xEB, (byte) 0x65,
				(byte) 0xFC, (byte) 0x8F, (byte) 0xBC, (byte) 0xD8,
				(byte) 0xEB, (byte) 0x77, (byte) 0xB3, (byte) 0xB0,
				(byte) 0x5A, (byte) 0xC7, (byte) 0xC4, (byte) 0xD0,
				(byte) 0x9E, (byte) 0x0F, (byte) 0xA1, (byte) 0xBA,
				(byte) 0x2E, (byte) 0xFE, (byte) 0x87, (byte) 0xD3,
				(byte) 0x18, (byte) 0x4D, (byte) 0xB6, (byte) 0x71,
				(byte) 0x8A, (byte) 0xE4, (byte) 0x1A, (byte) 0x7C,
				(byte) 0xAD, (byte) 0x89, (byte) 0xB8, (byte) 0xDC,
				(byte) 0xE0, (byte) 0xFE, (byte) 0x80, (byte) 0xCE,
				(byte) 0xB5, (byte) 0x23, (byte) 0xD5, (byte) 0xD6,
				(byte) 0x47, (byte) 0xF9, (byte) 0xDB, (byte) 0x58,
				(byte) 0xA3, (byte) 0x1D, (byte) 0x2E, (byte) 0x71,
				(byte) 0xAC, (byte) 0x67, (byte) 0x7E, (byte) 0x67,
				(byte) 0xFA, (byte) 0x6E, (byte) 0x75, (byte) 0x82,
				(byte) 0x07, (byte) 0x36, (byte) 0xC9, (byte) 0x89,
				(byte) 0x37, (byte) 0x61, (byte) 0xEE, (byte) 0x4A,
				(byte) 0xCD, (byte) 0x11, (byte) 0xF3, (byte) 0x1D,
				(byte) 0xBD, (byte) 0xC3, (byte) 0x49, (byte) 0xEF };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB9, (byte) 0x73, (byte) 0xE9, (byte) 0xF3,
				(byte) 0x77, (byte) 0xB4, (byte) 0x19, (byte) 0xC3,
				(byte) 0x6A, (byte) 0xC9, (byte) 0x69, (byte) 0x6E,
				(byte) 0xD9, (byte) 0x5F, (byte) 0xFB, (byte) 0x25,
				(byte) 0xC8, (byte) 0x02, (byte) 0x06, (byte) 0x87 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_jcb_t03() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x65 };
		byte KeyID = (byte) 0x03;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xC9, (byte) 0xE6, (byte) 0xC1, (byte) 0xF3,
				(byte) 0xC6, (byte) 0x94, (byte) 0x9A, (byte) 0x8A,
				(byte) 0x42, (byte) 0xA9, (byte) 0x1F, (byte) 0x8D,
				(byte) 0x02, (byte) 0x24, (byte) 0x13, (byte) 0x2B,
				(byte) 0x28, (byte) 0x65, (byte) 0xE6, (byte) 0xD9,
				(byte) 0x53, (byte) 0xA5, (byte) 0xB5, (byte) 0xA5,
				(byte) 0x4C, (byte) 0xFF, (byte) 0xB0, (byte) 0x41,
				(byte) 0x24, (byte) 0x39, (byte) 0xD5, (byte) 0x4A,
				(byte) 0xEB, (byte) 0xA7, (byte) 0x9E, (byte) 0x9B,
				(byte) 0x39, (byte) 0x9A, (byte) 0x6C, (byte) 0x10,
				(byte) 0x46, (byte) 0x84, (byte) 0xDF, (byte) 0x3F,
				(byte) 0xB7, (byte) 0x27, (byte) 0xC7, (byte) 0xF5,
				(byte) 0x59, (byte) 0x84, (byte) 0xDB, (byte) 0x7A,
				(byte) 0x45, (byte) 0x0E, (byte) 0x6A, (byte) 0xA9,
				(byte) 0x17, (byte) 0xE1, (byte) 0x10, (byte) 0xA7,
				(byte) 0xF2, (byte) 0x34, (byte) 0x3A, (byte) 0x00,
				(byte) 0x24, (byte) 0xD2, (byte) 0x78, (byte) 0x5D,
				(byte) 0x9E, (byte) 0xBE, (byte) 0x09, (byte) 0xF6,
				(byte) 0x01, (byte) 0xD5, (byte) 0x92, (byte) 0x36,
				(byte) 0x2F, (byte) 0xDB, (byte) 0x23, (byte) 0x77,
				(byte) 0x00, (byte) 0xB5, (byte) 0x67, (byte) 0xBA,
				(byte) 0x14, (byte) 0xBB, (byte) 0xE2, (byte) 0xA6,
				(byte) 0xD3, (byte) 0xD2, (byte) 0x3C, (byte) 0xF1,
				(byte) 0x27, (byte) 0x0B, (byte) 0x3D, (byte) 0xD8,
				(byte) 0x22, (byte) 0xB5, (byte) 0x49, (byte) 0x65,
				(byte) 0x49, (byte) 0xBF, (byte) 0x88, (byte) 0x49,
				(byte) 0x48, (byte) 0xF5, (byte) 0x5A, (byte) 0x0D,
				(byte) 0x30, (byte) 0x83, (byte) 0x48, (byte) 0xC4,
				(byte) 0xB7, (byte) 0x23, (byte) 0xBA, (byte) 0xFB,
				(byte) 0x6A, (byte) 0x7F, (byte) 0x39, (byte) 0x75,
				(byte) 0xAC, (byte) 0x39, (byte) 0x7C, (byte) 0xAD,
				(byte) 0x3C, (byte) 0x5D, (byte) 0x0F, (byte) 0xC2,
				(byte) 0xD1, (byte) 0x78, (byte) 0x71, (byte) 0x6F,
				(byte) 0x5E, (byte) 0x8E, (byte) 0x79, (byte) 0xE7,
				(byte) 0x5B, (byte) 0xEB, (byte) 0x1C, (byte) 0x84,
				(byte) 0xFA, (byte) 0x20, (byte) 0x2F, (byte) 0x80,
				(byte) 0xE6, (byte) 0x80, (byte) 0x69, (byte) 0xA9,
				(byte) 0x84, (byte) 0xE0, (byte) 0x08, (byte) 0x70,
				(byte) 0x6B, (byte) 0x30, (byte) 0xC2, (byte) 0x12,
				(byte) 0x30, (byte) 0x54, (byte) 0x56, (byte) 0x20,
				(byte) 0x15, (byte) 0x40, (byte) 0x78, (byte) 0x79,
				(byte) 0x25, (byte) 0xE8, (byte) 0x6A, (byte) 0x8B,
				(byte) 0x28, (byte) 0xB1, (byte) 0x29, (byte) 0xA1,
				(byte) 0x1A, (byte) 0xF2, (byte) 0x04, (byte) 0xB3,
				(byte) 0x87, (byte) 0xCB, (byte) 0x6E, (byte) 0xE4,
				(byte) 0x3D, (byte) 0xB5, (byte) 0x3D, (byte) 0x15,
				(byte) 0xA4, (byte) 0x6E, (byte) 0x13, (byte) 0x90,
				(byte) 0x1B, (byte) 0xEB, (byte) 0xD5, (byte) 0xCE,
				(byte) 0xCF, (byte) 0x48, (byte) 0x54, (byte) 0x25,
				(byte) 0x1D, (byte) 0x9E, (byte) 0x98, (byte) 0x75,
				(byte) 0xB1, (byte) 0x6E, (byte) 0x82, (byte) 0xAD,
				(byte) 0x1C, (byte) 0x59, (byte) 0x38, (byte) 0xA9,
				(byte) 0x72, (byte) 0x84, (byte) 0x2C, (byte) 0x8F,
				(byte) 0x1A, (byte) 0x42, (byte) 0xEB, (byte) 0xB5,
				(byte) 0xAE, (byte) 0x53, (byte) 0x36, (byte) 0xB0,
				(byte) 0x4F, (byte) 0xF3, (byte) 0xDA, (byte) 0x8B,
				(byte) 0x8D, (byte) 0xFB, (byte) 0xE6, (byte) 0x06,
				(byte) 0xFC, (byte) 0xA8, (byte) 0xB9, (byte) 0x08,
				(byte) 0x4E, (byte) 0xE0, (byte) 0x5B, (byte) 0xF6,
				(byte) 0x79, (byte) 0x50, (byte) 0xBA, (byte) 0x89,
				(byte) 0x89, (byte) 0x7C, (byte) 0xD0, (byte) 0x89,
				(byte) 0xF9, (byte) 0x24, (byte) 0xDB, (byte) 0xCD };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x7D, (byte) 0xC4, (byte) 0x35, (byte) 0xDB,
				(byte) 0xDE, (byte) 0x09, (byte) 0x3D, (byte) 0x1F,
				(byte) 0x0A, (byte) 0xD0, (byte) 0xBA, (byte) 0xE0,
				(byte) 0xFE, (byte) 0xA4, (byte) 0xDC, (byte) 0x12,
				(byte) 0x05, (byte) 0x64, (byte) 0x13, (byte) 0xDC };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// ////////////////////////////////////////////////////////////////////////
		// VISA 512 bits Test Key 90

	public static EMVCAPK get_capk_visa_t90() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x90;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 64;
		byte[] Modul = { (byte) 0xC2, (byte) 0x6B, (byte) 0x3C, (byte) 0xB3,
				(byte) 0x83, (byte) 0x3E, (byte) 0x42, (byte) 0xD8,
				(byte) 0x27, (byte) 0x0D, (byte) 0xC1, (byte) 0x0C,
				(byte) 0x89, (byte) 0x99, (byte) 0xB2, (byte) 0xDA,
				(byte) 0x18, (byte) 0x10, (byte) 0x68, (byte) 0x38,
				(byte) 0x65, (byte) 0x0D, (byte) 0xA0, (byte) 0xDB,
				(byte) 0xF1, (byte) 0x54, (byte) 0xEF, (byte) 0xD5,
				(byte) 0x11, (byte) 0x00, (byte) 0xAD, (byte) 0x14,
				(byte) 0x47, (byte) 0x41, (byte) 0xB2, (byte) 0xA8,
				(byte) 0x7D, (byte) 0x68, (byte) 0x81, (byte) 0xF8,
				(byte) 0x63, (byte) 0x0E, (byte) 0x33, (byte) 0x48,
				(byte) 0xDE, (byte) 0xA3, (byte) 0xF7, (byte) 0x80,
				(byte) 0x38, (byte) 0xE9, (byte) 0xB2, (byte) 0x1A,
				(byte) 0x69, (byte) 0x7E, (byte) 0xB2, (byte) 0xA6,
				(byte) 0x71, (byte) 0x6D, (byte) 0x32, (byte) 0xCB,
				(byte) 0xF2, (byte) 0x60, (byte) 0x86, (byte) 0xF1 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB3, (byte) 0xAE, (byte) 0x2B, (byte) 0xC3,
				(byte) 0xCA, (byte) 0xFC, (byte) 0x05, (byte) 0xEE,
				(byte) 0xEF, (byte) 0xAA, (byte) 0x46, (byte) 0xA2,
				(byte) 0xA4, (byte) 0x7E, (byte) 0xD5, (byte) 0x1D,
				(byte) 0xE6, (byte) 0x79, (byte) 0xF8, (byte) 0x23 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1984 bits Test Key 94

	public static EMVCAPK get_capk_visa_t94() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x94;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xD1, (byte) 0xBE, (byte) 0x39, (byte) 0x61,
				(byte) 0x5F, (byte) 0x39, (byte) 0x5A, (byte) 0xC9,
				(byte) 0x33, (byte) 0x7E, (byte) 0x33, (byte) 0x07,
				(byte) 0xAA, (byte) 0x5A, (byte) 0x7A, (byte) 0xC3,
				(byte) 0x5E, (byte) 0xAE, (byte) 0x00, (byte) 0x36,
				(byte) 0xBF, (byte) 0x20, (byte) 0xB9, (byte) 0x2F,
				(byte) 0x9A, (byte) 0x45, (byte) 0xD1, (byte) 0x90,
				(byte) 0xB2, (byte) 0xF4, (byte) 0x61, (byte) 0x6A,
				(byte) 0xBF, (byte) 0x9D, (byte) 0x34, (byte) 0x0C,
				(byte) 0xBF, (byte) 0x5F, (byte) 0xBB, (byte) 0x3A,
				(byte) 0x2B, (byte) 0x94, (byte) 0xBD, (byte) 0x8F,
				(byte) 0x2F, (byte) 0x97, (byte) 0x7C, (byte) 0x0A,
				(byte) 0x10, (byte) 0xB9, (byte) 0x0E, (byte) 0x59,
				(byte) 0xD4, (byte) 0x20, (byte) 0x1A, (byte) 0xA3,
				(byte) 0x26, (byte) 0x69, (byte) 0xE8, (byte) 0xCB,
				(byte) 0xE7, (byte) 0x53, (byte) 0xF5, (byte) 0x36,
				(byte) 0x11, (byte) 0x9D, (byte) 0xF4, (byte) 0xFB,
				(byte) 0x5E, (byte) 0x63, (byte) 0xCE, (byte) 0xD8,
				(byte) 0x7F, (byte) 0x11, (byte) 0x53, (byte) 0xCE,
				(byte) 0x91, (byte) 0x4B, (byte) 0x12, (byte) 0x4F,
				(byte) 0x3E, (byte) 0x6B, (byte) 0x64, (byte) 0x8C,
				(byte) 0xD5, (byte) 0xC9, (byte) 0x76, (byte) 0x55,
				(byte) 0xF7, (byte) 0xAB, (byte) 0x4D, (byte) 0xF6,
				(byte) 0x26, (byte) 0x07, (byte) 0xC9, (byte) 0x5D,
				(byte) 0xA5, (byte) 0x05, (byte) 0x17, (byte) 0xAB,
				(byte) 0x8B, (byte) 0xE3, (byte) 0x83, (byte) 0x66,
				(byte) 0x72, (byte) 0xD1, (byte) 0xC7, (byte) 0x1B,
				(byte) 0xCD, (byte) 0xE9, (byte) 0xBA, (byte) 0x72,
				(byte) 0x93, (byte) 0xFF, (byte) 0x34, (byte) 0x82,
				(byte) 0xF1, (byte) 0x24, (byte) 0xF8, (byte) 0x66,
				(byte) 0x91, (byte) 0x13, (byte) 0x0A, (byte) 0xB0,
				(byte) 0x81, (byte) 0x77, (byte) 0xB0, (byte) 0x2F,
				(byte) 0x45, (byte) 0x9C, (byte) 0x02, (byte) 0x5A,
				(byte) 0x1F, (byte) 0x3D, (byte) 0xFF, (byte) 0xE0,
				(byte) 0x88, (byte) 0x4C, (byte) 0xE7, (byte) 0x81,
				(byte) 0x22, (byte) 0x54, (byte) 0x2E, (byte) 0xA1,
				(byte) 0xC8, (byte) 0xEA, (byte) 0x09, (byte) 0x2B,
				(byte) 0x55, (byte) 0x2B, (byte) 0x58, (byte) 0x69,
				(byte) 0x07, (byte) 0xC8, (byte) 0x3A, (byte) 0xD6,
				(byte) 0x5E, (byte) 0x0C, (byte) 0x6F, (byte) 0x91,
				(byte) 0xA4, (byte) 0x00, (byte) 0xE4, (byte) 0x85,
				(byte) 0xE1, (byte) 0x11, (byte) 0x92, (byte) 0xAA,
				(byte) 0x4C, (byte) 0x17, (byte) 0x1C, (byte) 0x5A,
				(byte) 0x1E, (byte) 0xF5, (byte) 0x63, (byte) 0x81,
				(byte) 0xF4, (byte) 0xD0, (byte) 0x91, (byte) 0xCC,
				(byte) 0x7E, (byte) 0xF6, (byte) 0xBD, (byte) 0x86,
				(byte) 0x04, (byte) 0xCB, (byte) 0xC4, (byte) 0xC7,
				(byte) 0x4D, (byte) 0x5D, (byte) 0x77, (byte) 0xFF,
				(byte) 0xA0, (byte) 0x7B, (byte) 0x64, (byte) 0x1D,
				(byte) 0x53, (byte) 0x99, (byte) 0x8C, (byte) 0xDB,
				(byte) 0x5C, (byte) 0x21, (byte) 0xB7, (byte) 0xBC,
				(byte) 0x65, (byte) 0xE0, (byte) 0x82, (byte) 0xA6,
				(byte) 0x51, (byte) 0x3F, (byte) 0x42, (byte) 0x4A,
				(byte) 0x4B, (byte) 0x25, (byte) 0x2E, (byte) 0x0D,
				(byte) 0x77, (byte) 0xFA, (byte) 0x40, (byte) 0x56,
				(byte) 0x98, (byte) 0x6A, (byte) 0x0A, (byte) 0xB0,
				(byte) 0xCD, (byte) 0xA6, (byte) 0x15, (byte) 0x5E,
				(byte) 0xD9, (byte) 0xA8, (byte) 0x83, (byte) 0xC6,
				(byte) 0x9C, (byte) 0xC2, (byte) 0x99, (byte) 0x2D,
				(byte) 0x49, (byte) 0xEC, (byte) 0xBD, (byte) 0x47,
				(byte) 0x97, (byte) 0xDD, (byte) 0x28, (byte) 0x64,
				(byte) 0xFF, (byte) 0xC9, (byte) 0x6B, (byte) 0x8D };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x1D, (byte) 0x19, (byte) 0x31, (byte) 0x49,
				(byte) 0xFD, (byte) 0x83, (byte) 0xDC, (byte) 0xB3,
				(byte) 0x37, (byte) 0xF4, (byte) 0xA1, (byte) 0xB5,
				(byte) 0xCF, (byte) 0xAA, (byte) 0x14, (byte) 0x4D,
				(byte) 0x06, (byte) 0x6B, (byte) 0x66, (byte) 0xFB };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1152 bits Test Key 95

	public static EMVCAPK get_capk_visa_t95() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x95;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xBE, (byte) 0x9E, (byte) 0x1F, (byte) 0xA5,
				(byte) 0xE9, (byte) 0xA8, (byte) 0x03, (byte) 0x85,
				(byte) 0x29, (byte) 0x99, (byte) 0xC4, (byte) 0xAB,
				(byte) 0x43, (byte) 0x2D, (byte) 0xB2, (byte) 0x86,
				(byte) 0x00, (byte) 0xDC, (byte) 0xD9, (byte) 0xDA,
				(byte) 0xB7, (byte) 0x6D, (byte) 0xFA, (byte) 0xAA,
				(byte) 0x47, (byte) 0x35, (byte) 0x5A, (byte) 0x0F,
				(byte) 0xE3, (byte) 0x7B, (byte) 0x15, (byte) 0x08,
				(byte) 0xAC, (byte) 0x6B, (byte) 0xF3, (byte) 0x88,
				(byte) 0x60, (byte) 0xD3, (byte) 0xC6, (byte) 0xC2,
				(byte) 0xE5, (byte) 0xB1, (byte) 0x2A, (byte) 0x3C,
				(byte) 0xAA, (byte) 0xF2, (byte) 0xA7, (byte) 0x00,
				(byte) 0x5A, (byte) 0x72, (byte) 0x41, (byte) 0xEB,
				(byte) 0xAA, (byte) 0x77, (byte) 0x71, (byte) 0x11,
				(byte) 0x2C, (byte) 0x74, (byte) 0xCF, (byte) 0x9A,
				(byte) 0x06, (byte) 0x34, (byte) 0x65, (byte) 0x2F,
				(byte) 0xBC, (byte) 0xA0, (byte) 0xE5, (byte) 0x98,
				(byte) 0x0C, (byte) 0x54, (byte) 0xA6, (byte) 0x47,
				(byte) 0x61, (byte) 0xEA, (byte) 0x10, (byte) 0x1A,
				(byte) 0x11, (byte) 0x4E, (byte) 0x0F, (byte) 0x0B,
				(byte) 0x55, (byte) 0x72, (byte) 0xAD, (byte) 0xD5,
				(byte) 0x7D, (byte) 0x01, (byte) 0x0B, (byte) 0x7C,
				(byte) 0x9C, (byte) 0x88, (byte) 0x7E, (byte) 0x10,
				(byte) 0x4C, (byte) 0xA4, (byte) 0xEE, (byte) 0x12,
				(byte) 0x72, (byte) 0xDA, (byte) 0x66, (byte) 0xD9,
				(byte) 0x97, (byte) 0xB9, (byte) 0xA9, (byte) 0x0B,
				(byte) 0x5A, (byte) 0x6D, (byte) 0x62, (byte) 0x4A,
				(byte) 0xB6, (byte) 0xC5, (byte) 0x7E, (byte) 0x73,
				(byte) 0xC8, (byte) 0xF9, (byte) 0x19, (byte) 0x00,
				(byte) 0x0E, (byte) 0xB5, (byte) 0xF6, (byte) 0x84,
				(byte) 0x89, (byte) 0x8E, (byte) 0xF8, (byte) 0xC3,
				(byte) 0xDB, (byte) 0xEF, (byte) 0xB3, (byte) 0x30,
				(byte) 0xC6, (byte) 0x26, (byte) 0x60, (byte) 0xBE,
				(byte) 0xD8, (byte) 0x8E, (byte) 0xA7, (byte) 0x8E,
				(byte) 0x90, (byte) 0x9A, (byte) 0xFF, (byte) 0x05,
				(byte) 0xF6, (byte) 0xDA, (byte) 0x62, (byte) 0x7B };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xEE, (byte) 0x15, (byte) 0x11, (byte) 0xCE,
				(byte) 0xC7, (byte) 0x10, (byte) 0x20, (byte) 0xA9,
				(byte) 0xB9, (byte) 0x04, (byte) 0x43, (byte) 0xB3,
				(byte) 0x7B, (byte) 0x1D, (byte) 0x5F, (byte) 0x6E,
				(byte) 0x70, (byte) 0x30, (byte) 0x30, (byte) 0xF6 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1024 bits Test Key 96

	//checked
	public static EMVCAPK get_capk_visa_t96() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x96;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xB7, (byte) 0x45, (byte) 0x86, (byte) 0xD1,
				(byte) 0x9A, (byte) 0x20, (byte) 0x7B, (byte) 0xE6,
				(byte) 0x62, (byte) 0x7C, (byte) 0x5B, (byte) 0x0A,
				(byte) 0xAF, (byte) 0xBC, (byte) 0x44, (byte) 0xA2,
				(byte) 0xEC, (byte) 0xF5, (byte) 0xA2, (byte) 0x94,
				(byte) 0x2D, (byte) 0x3A, (byte) 0x26, (byte) 0xCE,
				(byte) 0x19, (byte) 0xC4, (byte) 0xFF, (byte) 0xAE,
				(byte) 0xEE, (byte) 0x92, (byte) 0x05, (byte) 0x21,
				(byte) 0x86, (byte) 0x89, (byte) 0x22, (byte) 0xE8,
				(byte) 0x93, (byte) 0xE7, (byte) 0x83, (byte) 0x82,
				(byte) 0x25, (byte) 0xA3, (byte) 0x94, (byte) 0x7A,
				(byte) 0x26, (byte) 0x14, (byte) 0x79, (byte) 0x6F,
				(byte) 0xB2, (byte) 0xC0, (byte) 0x62, (byte) 0x8C,
				(byte) 0xE8, (byte) 0xC1, (byte) 0x1E, (byte) 0x38,
				(byte) 0x25, (byte) 0xA5, (byte) 0x6D, (byte) 0x3B,
				(byte) 0x1B, (byte) 0xBA, (byte) 0xEF, (byte) 0x78,
				(byte) 0x3A, (byte) 0x5C, (byte) 0x6A, (byte) 0x81,
				(byte) 0xF3, (byte) 0x6F, (byte) 0x86, (byte) 0x25,
				(byte) 0x39, (byte) 0x51, (byte) 0x26, (byte) 0xFA,
				(byte) 0x98, (byte) 0x3C, (byte) 0x52, (byte) 0x16,
				(byte) 0xD3, (byte) 0x16, (byte) 0x6D, (byte) 0x48,
				(byte) 0xAC, (byte) 0xDE, (byte) 0x8A, (byte) 0x43,
				(byte) 0x12, (byte) 0x12, (byte) 0xFF, (byte) 0x76,
				(byte) 0x3A, (byte) 0x7F, (byte) 0x79, (byte) 0xD9,
				(byte) 0xED, (byte) 0xB7, (byte) 0xFE, (byte) 0xD7,
				(byte) 0x6B, (byte) 0x48, (byte) 0x5D, (byte) 0xE4,
				(byte) 0x5B, (byte) 0xEB, (byte) 0x82, (byte) 0x9A,
				(byte) 0x3D, (byte) 0x47, (byte) 0x30, (byte) 0x84,
				(byte) 0x8A, (byte) 0x36, (byte) 0x6D, (byte) 0x33,
				(byte) 0x24, (byte) 0xC3, (byte) 0x02, (byte) 0x70,
				(byte) 0x32, (byte) 0xFF, (byte) 0x8D, (byte) 0x16,
				(byte) 0xA1, (byte) 0xE4, (byte) 0x4D, (byte) 0x8D };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x76, (byte) 0x16, (byte) 0xE9, (byte) 0xAC,
				(byte) 0x8B, (byte) 0xE0, (byte) 0x14, (byte) 0xAF,
				(byte) 0x88, (byte) 0xCA, (byte) 0x11, (byte) 0xA8,
				(byte) 0xFB, (byte) 0x17, (byte) 0x96, (byte) 0x7B,
				(byte) 0x73, (byte) 0x94, (byte) 0x03, (byte) 0x0E };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 768 bits Test Key 97

	public static EMVCAPK get_capk_visa_t97() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x97;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 96;
		byte[] Modul = { (byte) 0xAF, (byte) 0x07, (byte) 0x54, (byte) 0xEA,
				(byte) 0xED, (byte) 0x97, (byte) 0x70, (byte) 0x43,
				(byte) 0xAB, (byte) 0x6F, (byte) 0x41, (byte) 0xD6,
				(byte) 0x31, (byte) 0x2A, (byte) 0xB1, (byte) 0xE2,
				(byte) 0x2A, (byte) 0x68, (byte) 0x09, (byte) 0x17,
				(byte) 0x5B, (byte) 0xEB, (byte) 0x28, (byte) 0xE7,
				(byte) 0x0D, (byte) 0x5F, (byte) 0x99, (byte) 0xB2,
				(byte) 0xDF, (byte) 0x18, (byte) 0xCA, (byte) 0xE7,
				(byte) 0x35, (byte) 0x19, (byte) 0x34, (byte) 0x1B,
				(byte) 0xBB, (byte) 0xD3, (byte) 0x27, (byte) 0xD0,
				(byte) 0xB8, (byte) 0xBE, (byte) 0x9D, (byte) 0x4D,
				(byte) 0x0E, (byte) 0x15, (byte) 0xF0, (byte) 0x7D,
				(byte) 0x36, (byte) 0xEA, (byte) 0x3E, (byte) 0x3A,
				(byte) 0x05, (byte) 0xC8, (byte) 0x92, (byte) 0xF5,
				(byte) 0xB1, (byte) 0x9A, (byte) 0x3E, (byte) 0x9D,
				(byte) 0x34, (byte) 0x13, (byte) 0xB0, (byte) 0xD9,
				(byte) 0x7E, (byte) 0x7A, (byte) 0xD1, (byte) 0x0A,
				(byte) 0x5F, (byte) 0x5D, (byte) 0xE8, (byte) 0xE3,
				(byte) 0x88, (byte) 0x60, (byte) 0xC0, (byte) 0xAD,
				(byte) 0x00, (byte) 0x4B, (byte) 0x1E, (byte) 0x06,
				(byte) 0xF4, (byte) 0x04, (byte) 0x0C, (byte) 0x29,
				(byte) 0x5A, (byte) 0xCB, (byte) 0x45, (byte) 0x7A,
				(byte) 0x78, (byte) 0x85, (byte) 0x51, (byte) 0xB6,
				(byte) 0x12, (byte) 0x7C, (byte) 0x0B, (byte) 0x29 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x80, (byte) 0x01, (byte) 0xCA, (byte) 0x76,
				(byte) 0xC1, (byte) 0x20, (byte) 0x39, (byte) 0x55,
				(byte) 0xE2, (byte) 0xC6, (byte) 0x28, (byte) 0x41,
				(byte) 0xCD, (byte) 0x6F, (byte) 0x20, (byte) 0x10,
				(byte) 0x87, (byte) 0xE5, (byte) 0x64, (byte) 0xBF };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 896 bits Test Key 98

	public static EMVCAPK get_capk_visa_t98() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x98;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 112;
		byte[] Modul = { (byte) 0xCA, (byte) 0x02, (byte) 0x6E, (byte) 0x52,
				(byte) 0xA6, (byte) 0x95, (byte) 0xE7, (byte) 0x2B,
				(byte) 0xD3, (byte) 0x0A, (byte) 0xF9, (byte) 0x28,
				(byte) 0x19, (byte) 0x6E, (byte) 0xED, (byte) 0xC9,
				(byte) 0xFA, (byte) 0xF4, (byte) 0xA6, (byte) 0x19,
				(byte) 0xF2, (byte) 0x49, (byte) 0x2E, (byte) 0x3F,
				(byte) 0xB3, (byte) 0x11, (byte) 0x69, (byte) 0x78,
				(byte) 0x9C, (byte) 0x27, (byte) 0x6F, (byte) 0xFB,
				(byte) 0xB7, (byte) 0xD4, (byte) 0x31, (byte) 0x16,
				(byte) 0x64, (byte) 0x7B, (byte) 0xA9, (byte) 0xE0,
				(byte) 0xD1, (byte) 0x06, (byte) 0xA3, (byte) 0x54,
				(byte) 0x2E, (byte) 0x39, (byte) 0x65, (byte) 0x29,
				(byte) 0x2C, (byte) 0xF7, (byte) 0x78, (byte) 0x23,
				(byte) 0xDD, (byte) 0x34, (byte) 0xCA, (byte) 0x8E,
				(byte) 0xEC, (byte) 0x7D, (byte) 0xE3, (byte) 0x67,
				(byte) 0xE0, (byte) 0x80, (byte) 0x70, (byte) 0x89,
				(byte) 0x50, (byte) 0x77, (byte) 0xC7, (byte) 0xEF,
				(byte) 0xAD, (byte) 0x93, (byte) 0x99, (byte) 0x24,
				(byte) 0xCB, (byte) 0x18, (byte) 0x70, (byte) 0x67,
				(byte) 0xDB, (byte) 0xF9, (byte) 0x2C, (byte) 0xB1,
				(byte) 0xE7, (byte) 0x85, (byte) 0x91, (byte) 0x7B,
				(byte) 0xD3, (byte) 0x8B, (byte) 0xAC, (byte) 0xE0,
				(byte) 0xC1, (byte) 0x94, (byte) 0xCA, (byte) 0x12,
				(byte) 0xDF, (byte) 0x0C, (byte) 0xE5, (byte) 0xB7,
				(byte) 0xA5, (byte) 0x02, (byte) 0x75, (byte) 0xAC,
				(byte) 0x61, (byte) 0xBE, (byte) 0x7C, (byte) 0x3B,
				(byte) 0x43, (byte) 0x68, (byte) 0x87, (byte) 0xCA,
				(byte) 0x98, (byte) 0xC9, (byte) 0xFD, (byte) 0x39 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xE7, (byte) 0xAC, (byte) 0x9A, (byte) 0xA8,
				(byte) 0xEE, (byte) 0xD1, (byte) 0xB5, (byte) 0xFF,
				(byte) 0x1B, (byte) 0xD5, (byte) 0x32, (byte) 0xCF,
				(byte) 0x14, (byte) 0x89, (byte) 0xA3, (byte) 0xE5,
				(byte) 0x55, (byte) 0x75, (byte) 0x72, (byte) 0xC1 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1024 bits Test Key 99

	public static EMVCAPK get_capk_visa_t99() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x99;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xAB, (byte) 0x79, (byte) 0xFC, (byte) 0xC9,
				(byte) 0x52, (byte) 0x08, (byte) 0x96, (byte) 0x96,
				(byte) 0x7E, (byte) 0x77, (byte) 0x6E, (byte) 0x64,
				(byte) 0x44, (byte) 0x4E, (byte) 0x5D, (byte) 0xCD,
				(byte) 0xD6, (byte) 0xE1, (byte) 0x36, (byte) 0x11,
				(byte) 0x87, (byte) 0x4F, (byte) 0x39, (byte) 0x85,
				(byte) 0x72, (byte) 0x25, (byte) 0x20, (byte) 0x42,
				(byte) 0x52, (byte) 0x95, (byte) 0xEE, (byte) 0xA4,
				(byte) 0xBD, (byte) 0x0C, (byte) 0x27, (byte) 0x81,
				(byte) 0xDE, (byte) 0x7F, (byte) 0x31, (byte) 0xCD,
				(byte) 0x3D, (byte) 0x04, (byte) 0x1F, (byte) 0x56,
				(byte) 0x5F, (byte) 0x74, (byte) 0x73, (byte) 0x06,
				(byte) 0xEE, (byte) 0xD6, (byte) 0x29, (byte) 0x54,
				(byte) 0xB1, (byte) 0x7E, (byte) 0xDA, (byte) 0xBA,
				(byte) 0x3A, (byte) 0x6C, (byte) 0x5B, (byte) 0x85,
				(byte) 0xA1, (byte) 0xDE, (byte) 0x1B, (byte) 0xEB,
				(byte) 0x9A, (byte) 0x34, (byte) 0x14, (byte) 0x1A,
				(byte) 0xF3, (byte) 0x8F, (byte) 0xCF, (byte) 0x82,
				(byte) 0x79, (byte) 0xC9, (byte) 0xDE, (byte) 0xA0,
				(byte) 0xD5, (byte) 0xA6, (byte) 0x71, (byte) 0x0D,
				(byte) 0x08, (byte) 0xDB, (byte) 0x41, (byte) 0x24,
				(byte) 0xF0, (byte) 0x41, (byte) 0x94, (byte) 0x55,
				(byte) 0x87, (byte) 0xE2, (byte) 0x03, (byte) 0x59,
				(byte) 0xBA, (byte) 0xB4, (byte) 0x7B, (byte) 0x75,
				(byte) 0x75, (byte) 0xAD, (byte) 0x94, (byte) 0x26,
				(byte) 0x2D, (byte) 0x4B, (byte) 0x25, (byte) 0xF2,
				(byte) 0x64, (byte) 0xAF, (byte) 0x33, (byte) 0xDE,
				(byte) 0xDC, (byte) 0xF2, (byte) 0x8E, (byte) 0x09,
				(byte) 0x61, (byte) 0x5E, (byte) 0x93, (byte) 0x7D,
				(byte) 0xE3, (byte) 0x2E, (byte) 0xDC, (byte) 0x03,
				(byte) 0xC5, (byte) 0x44, (byte) 0x45, (byte) 0xFE,
				(byte) 0x7E, (byte) 0x38, (byte) 0x27, (byte) 0x77 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x4A, (byte) 0xBF, (byte) 0xFD, (byte) 0x6B,
				(byte) 0x1C, (byte) 0x51, (byte) 0x21, (byte) 0x2D,
				(byte) 0x05, (byte) 0x55, (byte) 0x2E, (byte) 0x43,
				(byte) 0x1C, (byte) 0x5B, (byte) 0x17, (byte) 0x00,
				(byte) 0x7D, (byte) 0x2F, (byte) 0x5E, (byte) 0x6D };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1024 bits Live Key 01

	public static EMVCAPK get_capk_visa_v01() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x01;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xC6, (byte) 0x96, (byte) 0x03, (byte) 0x42,
				(byte) 0x13, (byte) 0xD7, (byte) 0xD8, (byte) 0x54,
				(byte) 0x69, (byte) 0x84, (byte) 0x57, (byte) 0x9D,
				(byte) 0x1D, (byte) 0x0F, (byte) 0x0E, (byte) 0xA5,
				(byte) 0x19, (byte) 0xCF, (byte) 0xF8, (byte) 0xDE,
				(byte) 0xFF, (byte) 0xC4, (byte) 0x29, (byte) 0x35,
				(byte) 0x4C, (byte) 0xF3, (byte) 0xA8, (byte) 0x71,
				(byte) 0xA6, (byte) 0xF7, (byte) 0x18, (byte) 0x3F,
				(byte) 0x12, (byte) 0x28, (byte) 0xDA, (byte) 0x5C,
				(byte) 0x74, (byte) 0x70, (byte) 0xC0, (byte) 0x55,
				(byte) 0x38, (byte) 0x71, (byte) 0x00, (byte) 0xCB,
				(byte) 0x93, (byte) 0x5A, (byte) 0x71, (byte) 0x2C,
				(byte) 0x4E, (byte) 0x28, (byte) 0x64, (byte) 0xDF,
				(byte) 0x5D, (byte) 0x64, (byte) 0xBA, (byte) 0x93,
				(byte) 0xFE, (byte) 0x7E, (byte) 0x63, (byte) 0xE7,
				(byte) 0x1F, (byte) 0x25, (byte) 0xB1, (byte) 0xE5,
				(byte) 0xF5, (byte) 0x29, (byte) 0x85, (byte) 0x75,
				(byte) 0xEB, (byte) 0xE1, (byte) 0xC6, (byte) 0x3A,
				(byte) 0xA6, (byte) 0x17, (byte) 0x70, (byte) 0x69,
				(byte) 0x17, (byte) 0x91, (byte) 0x1D, (byte) 0xC2,
				(byte) 0xA7, (byte) 0x5A, (byte) 0xC2, (byte) 0x8B,
				(byte) 0x25, (byte) 0x1C, (byte) 0x7E, (byte) 0xF4,
				(byte) 0x0F, (byte) 0x23, (byte) 0x65, (byte) 0x91,
				(byte) 0x24, (byte) 0x90, (byte) 0xB9, (byte) 0x39,
				(byte) 0xBC, (byte) 0xA2, (byte) 0x12, (byte) 0x4A,
				(byte) 0x30, (byte) 0xA2, (byte) 0x8F, (byte) 0x54,
				(byte) 0x40, (byte) 0x2C, (byte) 0x34, (byte) 0xAE,
				(byte) 0xCA, (byte) 0x33, (byte) 0x1A, (byte) 0xB6,
				(byte) 0x7E, (byte) 0x1E, (byte) 0x79, (byte) 0xB2,
				(byte) 0x85, (byte) 0xDD, (byte) 0x57, (byte) 0x71,
				(byte) 0xB5, (byte) 0xD9, (byte) 0xFF, (byte) 0x79,
				(byte) 0xEA, (byte) 0x63, (byte) 0x0B, (byte) 0x75 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xD3, (byte) 0x4A, (byte) 0x6A, (byte) 0x77,
				(byte) 0x60, (byte) 0x11, (byte) 0xC7, (byte) 0xE7,
				(byte) 0xCE, (byte) 0x3A, (byte) 0xEC, (byte) 0x5F,
				(byte) 0x03, (byte) 0xAD, (byte) 0x2F, (byte) 0x8C,
				(byte) 0xFC, (byte) 0x55, (byte) 0x03, (byte) 0xCC };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 896 bits Live Key 03

	public static EMVCAPK get_capk_visa_v03() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x03;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 112;
		byte[] Modul = { (byte) 0xB3, (byte) 0xE5, (byte) 0xE6, (byte) 0x67,
				(byte) 0x50, (byte) 0x6C, (byte) 0x47, (byte) 0xCA,
				(byte) 0xAF, (byte) 0xB1, (byte) 0x2A, (byte) 0x26,
				(byte) 0x33, (byte) 0x81, (byte) 0x93, (byte) 0x50,
				(byte) 0x84, (byte) 0x66, (byte) 0x97, (byte) 0xDD,
				(byte) 0x65, (byte) 0xA7, (byte) 0x96, (byte) 0xE5,
				(byte) 0xCE, (byte) 0x77, (byte) 0xC5, (byte) 0x7C,
				(byte) 0x62, (byte) 0x6A, (byte) 0x66, (byte) 0xF7,
				(byte) 0x0B, (byte) 0xB6, (byte) 0x30, (byte) 0x91,
				(byte) 0x16, (byte) 0x12, (byte) 0xAD, (byte) 0x28,
				(byte) 0x32, (byte) 0x90, (byte) 0x9B, (byte) 0x80,
				(byte) 0x62, (byte) 0x29, (byte) 0x1B, (byte) 0xEC,
				(byte) 0xA4, (byte) 0x6C, (byte) 0xD3, (byte) 0x3B,
				(byte) 0x66, (byte) 0xA6, (byte) 0xF9, (byte) 0xC9,
				(byte) 0xD4, (byte) 0x8C, (byte) 0xED, (byte) 0x8B,
				(byte) 0x4F, (byte) 0xC8, (byte) 0x56, (byte) 0x1C,
				(byte) 0x8A, (byte) 0x1D, (byte) 0x8F, (byte) 0xB1,
				(byte) 0x58, (byte) 0x62, (byte) 0xC9, (byte) 0xEB,
				(byte) 0x60, (byte) 0x17, (byte) 0x8D, (byte) 0xEA,
				(byte) 0x2B, (byte) 0xE1, (byte) 0xF8, (byte) 0x22,
				(byte) 0x36, (byte) 0xFF, (byte) 0xCF, (byte) 0xF4,
				(byte) 0xF3, (byte) 0x84, (byte) 0x3C, (byte) 0x27,
				(byte) 0x21, (byte) 0x79, (byte) 0xDC, (byte) 0xDD,
				(byte) 0x38, (byte) 0x4D, (byte) 0x54, (byte) 0x10,
				(byte) 0x53, (byte) 0xDA, (byte) 0x6A, (byte) 0x6A,
				(byte) 0x0D, (byte) 0x3C, (byte) 0xE4, (byte) 0x8F,
				(byte) 0xDC, (byte) 0x2D, (byte) 0xC4, (byte) 0xE3,
				(byte) 0xE0, (byte) 0xEE, (byte) 0xE1, (byte) 0x5F };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xFE, (byte) 0x70, (byte) 0xAB, (byte) 0x3B,
				(byte) 0x4D, (byte) 0x5A, (byte) 0x1B, (byte) 0x99,
				(byte) 0x24, (byte) 0x22, (byte) 0x8A, (byte) 0xDF,
				(byte) 0x80, (byte) 0x27, (byte) 0xC7, (byte) 0x58,
				(byte) 0x48, (byte) 0x3A, (byte) 0x8B, (byte) 0x7E };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 768 bits Live Key 05

	public static EMVCAPK get_capk_visa_v05() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x05;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 96;
		byte[] Modul = { (byte) 0xD0, (byte) 0x13, (byte) 0x5C, (byte) 0xE8,
				(byte) 0xA4, (byte) 0x43, (byte) 0x6C, (byte) 0x7F,
				(byte) 0x9D, (byte) 0x5C, (byte) 0xC6, (byte) 0x65,
				(byte) 0x47, (byte) 0xE3, (byte) 0x0E, (byte) 0xA4,
				(byte) 0x02, (byte) 0xF9, (byte) 0x81, (byte) 0x05,
				(byte) 0xB7, (byte) 0x17, (byte) 0x22, (byte) 0xE2,
				(byte) 0x4B, (byte) 0xC0, (byte) 0x8D, (byte) 0xCC,
				(byte) 0x80, (byte) 0xAB, (byte) 0x7E, (byte) 0x71,
				(byte) 0xEC, (byte) 0x23, (byte) 0xB8, (byte) 0xCE,
				(byte) 0x6A, (byte) 0x1D, (byte) 0xC6, (byte) 0xAC,
				(byte) 0x2A, (byte) 0x8C, (byte) 0xF5, (byte) 0x55,
				(byte) 0x43, (byte) 0xD7, (byte) 0x4A, (byte) 0x8A,
				(byte) 0xE7, (byte) 0xB3, (byte) 0x88, (byte) 0xF9,
				(byte) 0xB1, (byte) 0x74, (byte) 0xB7, (byte) 0xF0,
				(byte) 0xD7, (byte) 0x56, (byte) 0xC2, (byte) 0x2C,
				(byte) 0xBB, (byte) 0x59, (byte) 0x74, (byte) 0xF9,
				(byte) 0x01, (byte) 0x6A, (byte) 0x56, (byte) 0xB6,
				(byte) 0x01, (byte) 0xCC, (byte) 0xA6, (byte) 0x4C,
				(byte) 0x71, (byte) 0xF0, (byte) 0x4B, (byte) 0x78,
				(byte) 0xE8, (byte) 0x6C, (byte) 0x50, (byte) 0x1B,
				(byte) 0x19, (byte) 0x3A, (byte) 0x55, (byte) 0x56,
				(byte) 0xD5, (byte) 0x38, (byte) 0x9E, (byte) 0xCE,
				(byte) 0x4D, (byte) 0xEA, (byte) 0x25, (byte) 0x8A,
				(byte) 0xB9, (byte) 0x7F, (byte) 0x52, (byte) 0xA3 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x86, (byte) 0xDF, (byte) 0x04, (byte) 0x1E,
				(byte) 0x79, (byte) 0x95, (byte) 0x02, (byte) 0x35,
				(byte) 0x52, (byte) 0xA7, (byte) 0x9E, (byte) 0x26,
				(byte) 0x23, (byte) 0xE4, (byte) 0x91, (byte) 0x80,
				(byte) 0xC0, (byte) 0xCD, (byte) 0x95, (byte) 0x7A };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1152 bits Live Key 07

	public static EMVCAPK get_capk_visa_v07() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x07;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xA8, (byte) 0x9F, (byte) 0x25, (byte) 0xA5,
				(byte) 0x6F, (byte) 0xA6, (byte) 0xDA, (byte) 0x25,
				(byte) 0x8C, (byte) 0x8C, (byte) 0xA8, (byte) 0xB4,
				(byte) 0x04, (byte) 0x27, (byte) 0xD9, (byte) 0x27,
				(byte) 0xB4, (byte) 0xA1, (byte) 0xEB, (byte) 0x4D,
				(byte) 0x7E, (byte) 0xA3, (byte) 0x26, (byte) 0xBB,
				(byte) 0xB1, (byte) 0x2F, (byte) 0x97, (byte) 0xDE,
				(byte) 0xD7, (byte) 0x0A, (byte) 0xE5, (byte) 0xE4,
				(byte) 0x48, (byte) 0x0F, (byte) 0xC9, (byte) 0xC5,
				(byte) 0xE8, (byte) 0xA9, (byte) 0x72, (byte) 0x17,
				(byte) 0x71, (byte) 0x10, (byte) 0xA1, (byte) 0xCC,
				(byte) 0x31, (byte) 0x8D, (byte) 0x06, (byte) 0xD2,
				(byte) 0xF8, (byte) 0xF5, (byte) 0xC4, (byte) 0x84,
				(byte) 0x4A, (byte) 0xC5, (byte) 0xFA, (byte) 0x79,
				(byte) 0xA4, (byte) 0xDC, (byte) 0x47, (byte) 0x0B,
				(byte) 0xB1, (byte) 0x1E, (byte) 0xD6, (byte) 0x35,
				(byte) 0x69, (byte) 0x9C, (byte) 0x17, (byte) 0x08,
				(byte) 0x1B, (byte) 0x90, (byte) 0xF1, (byte) 0xB9,
				(byte) 0x84, (byte) 0xF1, (byte) 0x2E, (byte) 0x92,
				(byte) 0xC1, (byte) 0xC5, (byte) 0x29, (byte) 0x27,
				(byte) 0x6D, (byte) 0x8A, (byte) 0xF8, (byte) 0xEC,
				(byte) 0x7F, (byte) 0x28, (byte) 0x49, (byte) 0x20,
				(byte) 0x97, (byte) 0xD8, (byte) 0xCD, (byte) 0x5B,
				(byte) 0xEC, (byte) 0xEA, (byte) 0x16, (byte) 0xFE,
				(byte) 0x40, (byte) 0x88, (byte) 0xF6, (byte) 0xCF,
				(byte) 0xAB, (byte) 0x4A, (byte) 0x1B, (byte) 0x42,
				(byte) 0x32, (byte) 0x8A, (byte) 0x1B, (byte) 0x99,
				(byte) 0x6F, (byte) 0x92, (byte) 0x78, (byte) 0xB0,
				(byte) 0xB7, (byte) 0xE3, (byte) 0x31, (byte) 0x1C,
				(byte) 0xA5, (byte) 0xEF, (byte) 0x85, (byte) 0x6C,
				(byte) 0x2F, (byte) 0x88, (byte) 0x84, (byte) 0x74,
				(byte) 0xB8, (byte) 0x36, (byte) 0x12, (byte) 0xA8,
				(byte) 0x2E, (byte) 0x4E, (byte) 0x00, (byte) 0xD0,
				(byte) 0xCD, (byte) 0x40, (byte) 0x69, (byte) 0xA6,
				(byte) 0x78, (byte) 0x31, (byte) 0x40, (byte) 0x43,
				(byte) 0x3D, (byte) 0x50, (byte) 0x72, (byte) 0x5F };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB4, (byte) 0xBC, (byte) 0x56, (byte) 0xCC,
				(byte) 0x4E, (byte) 0x88, (byte) 0x32, (byte) 0x49,
				(byte) 0x32, (byte) 0xCB, (byte) 0xC6, (byte) 0x43,
				(byte) 0xD6, (byte) 0x89, (byte) 0x8F, (byte) 0x6F,
				(byte) 0xE5, (byte) 0x93, (byte) 0xB1, (byte) 0x72 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Modified from old 1152 bits key to new one on Feb 6,2004.
		// Mastercard 896 bits Live Key 02

	public static EMVCAPK get_capk_mastercard_v02() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0x02;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 112;
		byte[] Modul = { (byte) 0xCF, (byte) 0x42, (byte) 0x64, (byte) 0xE1,
				(byte) 0x70, (byte) 0x2D, (byte) 0x34, (byte) 0xCA,
				(byte) 0x89, (byte) 0x7D, (byte) 0x1F, (byte) 0x9B,
				(byte) 0x66, (byte) 0xC5, (byte) 0xD6, (byte) 0x36,
				(byte) 0x91, (byte) 0xEA, (byte) 0xCC, (byte) 0x61,
				(byte) 0x2C, (byte) 0x8F, (byte) 0x14, (byte) 0x71,
				(byte) 0x16, (byte) 0xBB, (byte) 0x22, (byte) 0xD0,
				(byte) 0xC4, (byte) 0x63, (byte) 0x49, (byte) 0x5B,
				(byte) 0xD5, (byte) 0xBA, (byte) 0x70, (byte) 0xFB,
				(byte) 0x15, (byte) 0x38, (byte) 0x48, (byte) 0x89,
				(byte) 0x52, (byte) 0x20, (byte) 0xB8, (byte) 0xAD,
				(byte) 0xEE, (byte) 0xC3, (byte) 0xE7, (byte) 0xBA,
				(byte) 0xB3, (byte) 0x1E, (byte) 0xA2, (byte) 0x2C,
				(byte) 0x1D, (byte) 0xC9, (byte) 0x97, (byte) 0x2F,
				(byte) 0xA0, (byte) 0x27, (byte) 0xD5, (byte) 0x42,
				(byte) 0x65, (byte) 0xBE, (byte) 0xBF, (byte) 0x0A,
				(byte) 0xE3, (byte) 0xA2, (byte) 0x3A, (byte) 0x8A,
				(byte) 0x09, (byte) 0x18, (byte) 0x7F, (byte) 0x21,
				(byte) 0xC8, (byte) 0x56, (byte) 0x60, (byte) 0x7B,
				(byte) 0x98, (byte) 0xBD, (byte) 0xA6, (byte) 0xFC,
				(byte) 0x90, (byte) 0x81, (byte) 0x16, (byte) 0x81,
				(byte) 0x6C, (byte) 0x50, (byte) 0x2B, (byte) 0x3E,
				(byte) 0x58, (byte) 0xA1, (byte) 0x45, (byte) 0x25,
				(byte) 0x4E, (byte) 0xEF, (byte) 0xEE, (byte) 0x2A,
				(byte) 0x33, (byte) 0x35, (byte) 0x11, (byte) 0x02,
				(byte) 0x24, (byte) 0x02, (byte) 0x8B, (byte) 0x67,
				(byte) 0x80, (byte) 0x9D, (byte) 0xCB, (byte) 0x80,
				(byte) 0x58, (byte) 0xE2, (byte) 0x48, (byte) 0x95 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xAF, (byte) 0x1C, (byte) 0xC1, (byte) 0xFD,
				(byte) 0x1C, (byte) 0x1B, (byte) 0xC9, (byte) 0xBC,
				(byte) 0xA0, (byte) 0x7E, (byte) 0x78, (byte) 0xDA,
				(byte) 0x6C, (byte) 0xBA, (byte) 0x21, (byte) 0x63,
				(byte) 0xF1, (byte) 0x69, (byte) 0xCB, (byte) 0xB7 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1024 bits Live Key 03

	public static EMVCAPK get_capk_mastercard_v03() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0x03;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xC2, (byte) 0x49, (byte) 0x07, (byte) 0x47,
				(byte) 0xFE, (byte) 0x17, (byte) 0xEB, (byte) 0x05,
				(byte) 0x84, (byte) 0xC8, (byte) 0x8D, (byte) 0x47,
				(byte) 0xB1, (byte) 0x60, (byte) 0x27, (byte) 0x04,
				(byte) 0x15, (byte) 0x0A, (byte) 0xDC, (byte) 0x88,
				(byte) 0xC5, (byte) 0xB9, (byte) 0x98, (byte) 0xBD,
				(byte) 0x59, (byte) 0xCE, (byte) 0x04, (byte) 0x3E,
				(byte) 0xDE, (byte) 0xBF, (byte) 0x0F, (byte) 0xFE,
				(byte) 0xE3, (byte) 0x09, (byte) 0x3A, (byte) 0xC7,
				(byte) 0x95, (byte) 0x6A, (byte) 0xD3, (byte) 0xB6,
				(byte) 0xAD, (byte) 0x45, (byte) 0x54, (byte) 0xC6,
				(byte) 0xDE, (byte) 0x19, (byte) 0xA1, (byte) 0x78,
				(byte) 0xD6, (byte) 0xDA, (byte) 0x29, (byte) 0x5B,
				(byte) 0xE1, (byte) 0x5D, (byte) 0x52, (byte) 0x20,
				(byte) 0x64, (byte) 0x5E, (byte) 0x3C, (byte) 0x81,
				(byte) 0x31, (byte) 0x66, (byte) 0x6F, (byte) 0xA4,
				(byte) 0xBE, (byte) 0x5B, (byte) 0x84, (byte) 0xFE,
				(byte) 0x13, (byte) 0x1E, (byte) 0xA4, (byte) 0x4B,
				(byte) 0x03, (byte) 0x93, (byte) 0x07, (byte) 0x63,
				(byte) 0x8B, (byte) 0x9E, (byte) 0x74, (byte) 0xA8,
				(byte) 0xC4, (byte) 0x25, (byte) 0x64, (byte) 0xF8,
				(byte) 0x92, (byte) 0xA6, (byte) 0x4D, (byte) 0xF1,
				(byte) 0xCB, (byte) 0x15, (byte) 0x71, (byte) 0x2B,
				(byte) 0x73, (byte) 0x6E, (byte) 0x33, (byte) 0x74,
				(byte) 0xF1, (byte) 0xBB, (byte) 0xB6, (byte) 0x81,
				(byte) 0x93, (byte) 0x71, (byte) 0x60, (byte) 0x2D,
				(byte) 0x89, (byte) 0x70, (byte) 0xE9, (byte) 0x7B,
				(byte) 0x90, (byte) 0x07, (byte) 0x93, (byte) 0xC7,
				(byte) 0xC2, (byte) 0xA8, (byte) 0x9A, (byte) 0x4A,
				(byte) 0x16, (byte) 0x49, (byte) 0xA5, (byte) 0x9B,
				(byte) 0xE6, (byte) 0x80, (byte) 0x57, (byte) 0x4D,
				(byte) 0xD0, (byte) 0xB6, (byte) 0x01, (byte) 0x45 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x5A, (byte) 0xDD, (byte) 0xF2, (byte) 0x1D,
				(byte) 0x09, (byte) 0x27, (byte) 0x86, (byte) 0x61,
				(byte) 0x14, (byte) 0x11, (byte) 0x79, (byte) 0xCB,
				(byte) 0xEF, (byte) 0xF2, (byte) 0x72, (byte) 0xEA,
				(byte) 0x38, (byte) 0x4B, (byte) 0x13, (byte) 0xBB };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1152 bits Live Key 04

	public static EMVCAPK get_capk_mastercard_v04() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = 0x04;
		byte HashInd = 0x01;
		byte ArithInd = 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xA6, (byte) 0xDA, (byte) 0x42, (byte) 0x83,
				(byte) 0x87, (byte) 0xA5, (byte) 0x02, (byte) 0xD7,
				(byte) 0xDD, (byte) 0xFB, (byte) 0x7A, (byte) 0x74,
				(byte) 0xD3, (byte) 0xF4, (byte) 0x12, (byte) 0xBE,
				(byte) 0x76, (byte) 0x26, (byte) 0x27, (byte) 0x19,
				(byte) 0x7B, (byte) 0x25, (byte) 0x43, (byte) 0x5B,
				(byte) 0x7A, (byte) 0x81, (byte) 0x71, (byte) 0x6A,
				(byte) 0x70, (byte) 0x01, (byte) 0x57, (byte) 0xDD,
				(byte) 0xD0, (byte) 0x6F, (byte) 0x7C, (byte) 0xC9,
				(byte) 0x9D, (byte) 0x6C, (byte) 0xA2, (byte) 0x8C,
				(byte) 0x24, (byte) 0x70, (byte) 0x52, (byte) 0x7E,
				(byte) 0x2C, (byte) 0x03, (byte) 0x61, (byte) 0x6B,
				(byte) 0x9C, (byte) 0x59, (byte) 0x21, (byte) 0x73,
				(byte) 0x57, (byte) 0xC2, (byte) 0x67, (byte) 0x4F,
				(byte) 0x58, (byte) 0x3B, (byte) 0x3B, (byte) 0xA5,
				(byte) 0xC7, (byte) 0xDC, (byte) 0xF2, (byte) 0x83,
				(byte) 0x86, (byte) 0x92, (byte) 0xD0, (byte) 0x23,
				(byte) 0xE3, (byte) 0x56, (byte) 0x24, (byte) 0x20,
				(byte) 0xB4, (byte) 0x61, (byte) 0x5C, (byte) 0x43,
				(byte) 0x9C, (byte) 0xA9, (byte) 0x7C, (byte) 0x44,
				(byte) 0xDC, (byte) 0x9A, (byte) 0x24, (byte) 0x9C,
				(byte) 0xFC, (byte) 0xE7, (byte) 0xB3, (byte) 0xBF,
				(byte) 0xB2, (byte) 0x2F, (byte) 0x68, (byte) 0x22,
				(byte) 0x8C, (byte) 0x3A, (byte) 0xF1, (byte) 0x33,
				(byte) 0x29, (byte) 0xAA, (byte) 0x4A, (byte) 0x61,
				(byte) 0x3C, (byte) 0xF8, (byte) 0xDD, (byte) 0x85,
				(byte) 0x35, (byte) 0x02, (byte) 0x37, (byte) 0x3D,
				(byte) 0x62, (byte) 0xE4, (byte) 0x9A, (byte) 0xB2,
				(byte) 0x56, (byte) 0xD2, (byte) 0xBC, (byte) 0x17,
				(byte) 0x12, (byte) 0x0E, (byte) 0x54, (byte) 0xAE,
				(byte) 0xDC, (byte) 0xED, (byte) 0x6D, (byte) 0x96,
				(byte) 0xA4, (byte) 0x28, (byte) 0x7A, (byte) 0xCC,
				(byte) 0x5C, (byte) 0x04, (byte) 0x67, (byte) 0x7D,
				(byte) 0x4A, (byte) 0x5A, (byte) 0x32, (byte) 0x0D,
				(byte) 0xB8, (byte) 0xBE, (byte) 0xE2, (byte) 0xF7,
				(byte) 0x75, (byte) 0xE5, (byte) 0xFE, (byte) 0xC5 };
		byte ExponentLen = 1;
		byte[] Exponent = { 0x03 };
		byte[] ExpDate = { 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { 0x38, (byte) 0x1A, (byte) 0x03, (byte) 0x5D,
				(byte) 0xA5, (byte) 0x8B, (byte) 0x48, (byte) 0x2E,
				(byte) 0xE2, (byte) 0xAF, (byte) 0x75, (byte) 0xF4,
				(byte) 0xC3, (byte) 0xF2, (byte) 0xCA, (byte) 0x46,
				(byte) 0x9B, (byte) 0xA4, (byte) 0xAA, (byte) 0x6C };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1984 bits transaction time test Key EF

	public static EMVCAPK get_capk_mastercard_tEF() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xEF;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xA1, (byte) 0x91, (byte) 0xCB, (byte) 0x87,
				(byte) 0x47, (byte) 0x3F, (byte) 0x29, (byte) 0x34,
				(byte) 0x9B, (byte) 0x5D, (byte) 0x60, (byte) 0xA8,
				(byte) 0x8B, (byte) 0x3E, (byte) 0xAE, (byte) 0xE0,
				(byte) 0x97, (byte) 0x3A, (byte) 0xA6, (byte) 0xF1,
				(byte) 0xA0, (byte) 0x82, (byte) 0xF3, (byte) 0x58,
				(byte) 0xD8, (byte) 0x49, (byte) 0xFD, (byte) 0xDF,
				(byte) 0xF9, (byte) 0xC0, (byte) 0x91, (byte) 0xF8,
				(byte) 0x99, (byte) 0xED, (byte) 0xA9, (byte) 0x79,
				(byte) 0x2C, (byte) 0xAF, (byte) 0x09, (byte) 0xEF,
				(byte) 0x28, (byte) 0xF5, (byte) 0xD2, (byte) 0x24,
				(byte) 0x04, (byte) 0xB8, (byte) 0x8A, (byte) 0x22,
				(byte) 0x93, (byte) 0xEE, (byte) 0xBB, (byte) 0xC1,
				(byte) 0x94, (byte) 0x9C, (byte) 0x43, (byte) 0xBE,
				(byte) 0xA4, (byte) 0xD6, (byte) 0x0C, (byte) 0xFD,
				(byte) 0x87, (byte) 0x9A, (byte) 0x15, (byte) 0x39,
				(byte) 0x54, (byte) 0x4E, (byte) 0x09, (byte) 0xE0,
				(byte) 0xF0, (byte) 0x9F, (byte) 0x60, (byte) 0xF0,
				(byte) 0x65, (byte) 0xB2, (byte) 0xBF, (byte) 0x2A,
				(byte) 0x13, (byte) 0xEC, (byte) 0xC7, (byte) 0x05,
				(byte) 0xF3, (byte) 0xD4, (byte) 0x68, (byte) 0xB9,
				(byte) 0xD3, (byte) 0x3A, (byte) 0xE7, (byte) 0x7A,
				(byte) 0xD9, (byte) 0xD3, (byte) 0xF1, (byte) 0x9C,
				(byte) 0xA4, (byte) 0x0F, (byte) 0x23, (byte) 0xDC,
				(byte) 0xF5, (byte) 0xEB, (byte) 0x7C, (byte) 0x04,
				(byte) 0xDC, (byte) 0x8F, (byte) 0x69, (byte) 0xEB,
				(byte) 0xA5, (byte) 0x65, (byte) 0xB1, (byte) 0xEB,
				(byte) 0xCB, (byte) 0x46, (byte) 0x86, (byte) 0xCD,
				(byte) 0x27, (byte) 0x47, (byte) 0x85, (byte) 0x53,
				(byte) 0x0F, (byte) 0xF6, (byte) 0xF6, (byte) 0xE9,
				(byte) 0xEE, (byte) 0x43, (byte) 0xAA, (byte) 0x43,
				(byte) 0xFD, (byte) 0xB0, (byte) 0x2C, (byte) 0xE0,
				(byte) 0x0D, (byte) 0xAE, (byte) 0xC1, (byte) 0x5C,
				(byte) 0x7B, (byte) 0x8F, (byte) 0xD6, (byte) 0xA9,
				(byte) 0xB3, (byte) 0x94, (byte) 0xBA, (byte) 0xBA,
				(byte) 0x41, (byte) 0x9D, (byte) 0x3F, (byte) 0x6D,
				(byte) 0xC8, (byte) 0x5E, (byte) 0x16, (byte) 0x56,
				(byte) 0x9B, (byte) 0xE8, (byte) 0xE7, (byte) 0x69,
				(byte) 0x89, (byte) 0x68, (byte) 0x8E, (byte) 0xFE,
				(byte) 0xA2, (byte) 0xDF, (byte) 0x22, (byte) 0xFF,
				(byte) 0x7D, (byte) 0x35, (byte) 0xC0, (byte) 0x43,
				(byte) 0x33, (byte) 0x8D, (byte) 0xEA, (byte) 0xA9,
				(byte) 0x82, (byte) 0xA0, (byte) 0x2B, (byte) 0x86,
				(byte) 0x6D, (byte) 0xE5, (byte) 0x32, (byte) 0x85,
				(byte) 0x19, (byte) 0xEB, (byte) 0xBC, (byte) 0xD6,
				(byte) 0xF0, (byte) 0x3C, (byte) 0xDD, (byte) 0x68,
				(byte) 0x66, (byte) 0x73, (byte) 0x84, (byte) 0x7F,
				(byte) 0x84, (byte) 0xDB, (byte) 0x65, (byte) 0x1A,
				(byte) 0xB8, (byte) 0x6C, (byte) 0x28, (byte) 0xCF,
				(byte) 0x14, (byte) 0x62, (byte) 0x56, (byte) 0x2C,
				(byte) 0x57, (byte) 0x7B, (byte) 0x85, (byte) 0x35,
				(byte) 0x64, (byte) 0xA2, (byte) 0x90, (byte) 0xC8,
				(byte) 0x55, (byte) 0x6D, (byte) 0x81, (byte) 0x85,
				(byte) 0x31, (byte) 0x26, (byte) 0x8D, (byte) 0x25,
				(byte) 0xCC, (byte) 0x98, (byte) 0xA4, (byte) 0xCC,
				(byte) 0x6A, (byte) 0x0B, (byte) 0xDF, (byte) 0xFF,
				(byte) 0xDA, (byte) 0x2D, (byte) 0xCC, (byte) 0xA3,
				(byte) 0xA9, (byte) 0x4C, (byte) 0x99, (byte) 0x85,
				(byte) 0x59, (byte) 0xE3, (byte) 0x07, (byte) 0xFD,
				(byte) 0xDF, (byte) 0x91, (byte) 0x50, (byte) 0x06,
				(byte) 0xD9, (byte) 0xA9, (byte) 0x87, (byte) 0xB0,
				(byte) 0x7D, (byte) 0xDA, (byte) 0xEB, (byte) 0x3B };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x21, (byte) 0x76, (byte) 0x6E, (byte) 0xBB,
				(byte) 0x0E, (byte) 0xE1, (byte) 0x22, (byte) 0xAF,
				(byte) 0xB6, (byte) 0x5D, (byte) 0x78, (byte) 0x45,
				(byte) 0xB7, (byte) 0x3D, (byte) 0xB4, (byte) 0x6B,
				(byte) 0xAB, (byte) 0x65, (byte) 0x42, (byte) 0x7A };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1664 bits transaction time test Key F0

	public static EMVCAPK get_capk_mastercard_tF0() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xF0;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 208;
		byte[] Modul = { (byte) 0x99, (byte) 0x9E, (byte) 0xA2, (byte) 0xD4,
				(byte) 0x30, (byte) 0xD6, (byte) 0x06, (byte) 0x14,
				(byte) 0xE1, (byte) 0x00, (byte) 0x70, (byte) 0x6C,
				(byte) 0x7D, (byte) 0xA2, (byte) 0x13, (byte) 0xE1,
				(byte) 0xC7, (byte) 0x7A, (byte) 0xD1, (byte) 0x8C,
				(byte) 0x11, (byte) 0xBD, (byte) 0x70, (byte) 0xBC,
				(byte) 0x42, (byte) 0xCE, (byte) 0xBD, (byte) 0x80,
				(byte) 0xA3, (byte) 0xC9, (byte) 0x4E, (byte) 0xC5,
				(byte) 0xE7, (byte) 0x36, (byte) 0xD3, (byte) 0x45,
				(byte) 0xEA, (byte) 0x7A, (byte) 0xDE, (byte) 0x2B,
				(byte) 0x9E, (byte) 0x0B, (byte) 0xC8, (byte) 0x81,
				(byte) 0x6E, (byte) 0x56, (byte) 0x7D, (byte) 0x39,
				(byte) 0x41, (byte) 0x2E, (byte) 0xB7, (byte) 0x28,
				(byte) 0xC2, (byte) 0xB2, (byte) 0xCC, (byte) 0xE7,
				(byte) 0x3D, (byte) 0xEB, (byte) 0xC9, (byte) 0xFA,
				(byte) 0x25, (byte) 0xD4, (byte) 0x91, (byte) 0x9B,
				(byte) 0xF5, (byte) 0x42, (byte) 0x0C, (byte) 0x98,
				(byte) 0x60, (byte) 0x83, (byte) 0xFB, (byte) 0xC0,
				(byte) 0x75, (byte) 0x08, (byte) 0x95, (byte) 0xAF,
				(byte) 0xBA, (byte) 0x6B, (byte) 0x9D, (byte) 0xAA,
				(byte) 0x62, (byte) 0xB1, (byte) 0xB7, (byte) 0xD8,
				(byte) 0x43, (byte) 0x9C, (byte) 0xF2, (byte) 0x9E,
				(byte) 0x72, (byte) 0x0D, (byte) 0x08, (byte) 0x5D,
				(byte) 0x5D, (byte) 0x09, (byte) 0x62, (byte) 0xA9,
				(byte) 0x44, (byte) 0x3B, (byte) 0x1F, (byte) 0x73,
				(byte) 0x8E, (byte) 0x65, (byte) 0x60, (byte) 0xEF,
				(byte) 0x0E, (byte) 0xED, (byte) 0x75, (byte) 0x72,
				(byte) 0x81, (byte) 0x5E, (byte) 0xA8, (byte) 0x7A,
				(byte) 0x1B, (byte) 0x07, (byte) 0x57, (byte) 0x0F,
				(byte) 0x11, (byte) 0x98, (byte) 0x67, (byte) 0xDD,
				(byte) 0x6C, (byte) 0xC5, (byte) 0xD4, (byte) 0xDE,
				(byte) 0x06, (byte) 0xAA, (byte) 0x53, (byte) 0x73,
				(byte) 0x84, (byte) 0x7D, (byte) 0x17, (byte) 0xA6,
				(byte) 0x10, (byte) 0xEC, (byte) 0xF9, (byte) 0x32,
				(byte) 0xFA, (byte) 0x2C, (byte) 0x94, (byte) 0x23,
				(byte) 0x4E, (byte) 0x68, (byte) 0xAF, (byte) 0x84,
				(byte) 0xA9, (byte) 0xE0, (byte) 0xDA, (byte) 0xA1,
				(byte) 0x81, (byte) 0x16, (byte) 0xB3, (byte) 0x26,
				(byte) 0x01, (byte) 0x6B, (byte) 0x70, (byte) 0x13,
				(byte) 0x6F, (byte) 0x49, (byte) 0x34, (byte) 0x82,
				(byte) 0xFE, (byte) 0xAE, (byte) 0x98, (byte) 0xE4,
				(byte) 0xAE, (byte) 0x68, (byte) 0x2B, (byte) 0xF9,
				(byte) 0x6C, (byte) 0x59, (byte) 0x27, (byte) 0x97,
				(byte) 0x52, (byte) 0x24, (byte) 0x8D, (byte) 0xEC,
				(byte) 0x91, (byte) 0x5E, (byte) 0xD6, (byte) 0xF9,
				(byte) 0xBB, (byte) 0x73, (byte) 0xF9, (byte) 0x20,
				(byte) 0x61, (byte) 0x55, (byte) 0xD9, (byte) 0x61,
				(byte) 0xB5, (byte) 0x08, (byte) 0x65, (byte) 0xE1,
				(byte) 0xCA, (byte) 0x6D, (byte) 0x47, (byte) 0x32,
				(byte) 0x2F, (byte) 0xCE, (byte) 0x22, (byte) 0xDC,
				(byte) 0xF1, (byte) 0x95, (byte) 0x71, (byte) 0x82,
				(byte) 0xB6, (byte) 0xE9, (byte) 0x9C, (byte) 0xBB };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB8, (byte) 0xEA, (byte) 0x49, (byte) 0x16,
				(byte) 0x9B, (byte) 0x54, (byte) 0xF3, (byte) 0xB7,
				(byte) 0xFF, (byte) 0x0D, (byte) 0xF3, (byte) 0xA8,
				(byte) 0xB6, (byte) 0x38, (byte) 0x8C, (byte) 0x82,
				(byte) 0xA1, (byte) 0xDB, (byte) 0xE7, (byte) 0x30 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1408 bits transaction time test Key F1

	public static EMVCAPK get_capk_mastercard_tF1() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xF1;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 176;
		byte[] Modul = { (byte) 0xA0, (byte) 0xDC, (byte) 0xF4, (byte) 0xBD,
				(byte) 0xE1, (byte) 0x9C, (byte) 0x35, (byte) 0x46,
				(byte) 0xB4, (byte) 0xB6, (byte) 0xF0, (byte) 0x41,
				(byte) 0x4D, (byte) 0x17, (byte) 0x4D, (byte) 0xDE,
				(byte) 0x29, (byte) 0x4A, (byte) 0xAB, (byte) 0xBB,
				(byte) 0x82, (byte) 0x8C, (byte) 0x5A, (byte) 0x83,
				(byte) 0x4D, (byte) 0x73, (byte) 0xAA, (byte) 0xE2,
				(byte) 0x7C, (byte) 0x99, (byte) 0xB0, (byte) 0xB0,
				(byte) 0x53, (byte) 0xA9, (byte) 0x02, (byte) 0x78,
				(byte) 0x00, (byte) 0x72, (byte) 0x39, (byte) 0xB6,
				(byte) 0x45, (byte) 0x9F, (byte) 0xF0, (byte) 0xBB,
				(byte) 0xCD, (byte) 0x7B, (byte) 0x4B, (byte) 0x9C,
				(byte) 0x6C, (byte) 0x50, (byte) 0xAC, (byte) 0x02,
				(byte) 0xCE, (byte) 0x91, (byte) 0x36, (byte) 0x8D,
				(byte) 0xA1, (byte) 0xBD, (byte) 0x21, (byte) 0xAA,
				(byte) 0xEA, (byte) 0xDB, (byte) 0xC6, (byte) 0x53,
				(byte) 0x47, (byte) 0x33, (byte) 0x7D, (byte) 0x89,
				(byte) 0xB6, (byte) 0x8F, (byte) 0x5C, (byte) 0x99,
				(byte) 0xA0, (byte) 0x9D, (byte) 0x05, (byte) 0xBE,
				(byte) 0x02, (byte) 0xDD, (byte) 0x1F, (byte) 0x8C,
				(byte) 0x5B, (byte) 0xA2, (byte) 0x0E, (byte) 0x2F,
				(byte) 0x13, (byte) 0xFB, (byte) 0x2A, (byte) 0x27,
				(byte) 0xC4, (byte) 0x1D, (byte) 0x3F, (byte) 0x85,
				(byte) 0xCA, (byte) 0xD5, (byte) 0xCF, (byte) 0x66,
				(byte) 0x68, (byte) 0xE7, (byte) 0x58, (byte) 0x51,
				(byte) 0xEC, (byte) 0x66, (byte) 0xED, (byte) 0xBF,
				(byte) 0x98, (byte) 0x85, (byte) 0x1F, (byte) 0xD4,
				(byte) 0xE4, (byte) 0x2C, (byte) 0x44, (byte) 0xC1,
				(byte) 0xD5, (byte) 0x9F, (byte) 0x59, (byte) 0x84,
				(byte) 0x70, (byte) 0x3B, (byte) 0x27, (byte) 0xD5,
				(byte) 0xB9, (byte) 0xF2, (byte) 0x1B, (byte) 0x8F,
				(byte) 0xA0, (byte) 0xD9, (byte) 0x32, (byte) 0x79,
				(byte) 0xFB, (byte) 0xBF, (byte) 0x69, (byte) 0xE0,
				(byte) 0x90, (byte) 0x64, (byte) 0x29, (byte) 0x09,
				(byte) 0xC9, (byte) 0xEA, (byte) 0x27, (byte) 0xF8,
				(byte) 0x98, (byte) 0x95, (byte) 0x95, (byte) 0x41,
				(byte) 0xAA, (byte) 0x67, (byte) 0x57, (byte) 0xF5,
				(byte) 0xF6, (byte) 0x24, (byte) 0x10, (byte) 0x4F,
				(byte) 0x6E, (byte) 0x1D, (byte) 0x3A, (byte) 0x95,
				(byte) 0x32, (byte) 0xF2, (byte) 0xA6, (byte) 0xE5,
				(byte) 0x15, (byte) 0x15, (byte) 0xAE, (byte) 0xAD,
				(byte) 0x1B, (byte) 0x43, (byte) 0xB3, (byte) 0xD7,
				(byte) 0x83, (byte) 0x50, (byte) 0x88, (byte) 0xA2,
				(byte) 0xFA, (byte) 0xFA, (byte) 0x7B, (byte) 0xE7 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xD8, (byte) 0xE6, (byte) 0x8D, (byte) 0xA1,
				(byte) 0x67, (byte) 0xAB, (byte) 0x5A, (byte) 0x85,
				(byte) 0xD8, (byte) 0xC3, (byte) 0xD5, (byte) 0x5E,
				(byte) 0xCB, (byte) 0x9B, (byte) 0x05, (byte) 0x17,
				(byte) 0xA1, (byte) 0xA5, (byte) 0xB4, (byte) 0xBB };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1152 bits transaction time test Key F2 (exponent=65537)

	public static EMVCAPK get_capk_mastercard_tF2() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xF2;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xA2, (byte) 0xB9, (byte) 0xFF, (byte) 0x84,
				(byte) 0xF8, (byte) 0x7F, (byte) 0xA1, (byte) 0x08,
				(byte) 0xFF, (byte) 0x9A, (byte) 0x8B, (byte) 0x2E,
				(byte) 0x93, (byte) 0xFD, (byte) 0x5A, (byte) 0x37,
				(byte) 0xCB, (byte) 0xFD, (byte) 0xA1, (byte) 0x84,
				(byte) 0xF1, (byte) 0x89, (byte) 0xCE, (byte) 0xB3,
				(byte) 0x76, (byte) 0x30, (byte) 0x90, (byte) 0x31,
				(byte) 0x9C, (byte) 0xAB, (byte) 0xBD, (byte) 0xD8,
				(byte) 0x22, (byte) 0xEC, (byte) 0x40, (byte) 0x11,
				(byte) 0xED, (byte) 0xA3, (byte) 0x69, (byte) 0x89,
				(byte) 0xE5, (byte) 0xD0, (byte) 0x68, (byte) 0x06,
				(byte) 0x66, (byte) 0xC2, (byte) 0x25, (byte) 0xFC,
				(byte) 0x3E, (byte) 0x83, (byte) 0xFF, (byte) 0x09,
				(byte) 0x96, (byte) 0xD2, (byte) 0x3E, (byte) 0x0F,
				(byte) 0x94, (byte) 0xF9, (byte) 0xF6, (byte) 0x5D,
				(byte) 0x0F, (byte) 0xC2, (byte) 0x1C, (byte) 0x39,
				(byte) 0x29, (byte) 0xB0, (byte) 0x8E, (byte) 0x2F,
				(byte) 0xCF, (byte) 0xB6, (byte) 0xF5, (byte) 0x82,
				(byte) 0x60, (byte) 0x20, (byte) 0xCF, (byte) 0x96,
				(byte) 0x50, (byte) 0x50, (byte) 0xB0, (byte) 0x38,
				(byte) 0x1D, (byte) 0x9B, (byte) 0x47, (byte) 0xBD,
				(byte) 0x93, (byte) 0x0B, (byte) 0x93, (byte) 0x46,
				(byte) 0xA7, (byte) 0xE1, (byte) 0x92, (byte) 0xB6,
				(byte) 0xFF, (byte) 0xB7, (byte) 0x1B, (byte) 0xF4,
				(byte) 0x58, (byte) 0x58, (byte) 0x5E, (byte) 0x84,
				(byte) 0x4F, (byte) 0xE5, (byte) 0x04, (byte) 0x74,
				(byte) 0x1A, (byte) 0x04, (byte) 0xC3, (byte) 0xDE,
				(byte) 0xFB, (byte) 0x1D, (byte) 0xC8, (byte) 0x4C,
				(byte) 0xDD, (byte) 0xDE, (byte) 0x3F, (byte) 0x66,
				(byte) 0x86, (byte) 0xD6, (byte) 0x22, (byte) 0xAE,
				(byte) 0xE3, (byte) 0x21, (byte) 0x6E, (byte) 0x45,
				(byte) 0xFB, (byte) 0x77, (byte) 0xE7, (byte) 0xE4,
				(byte) 0xE4, (byte) 0x8F, (byte) 0x5F, (byte) 0x3D,
				(byte) 0x8F, (byte) 0x9D, (byte) 0x95, (byte) 0x82,
				(byte) 0x68, (byte) 0x5F, (byte) 0xD0, (byte) 0x99,
				(byte) 0xCB, (byte) 0xD6, (byte) 0x28, (byte) 0x73 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x0F, (byte) 0x3B, (byte) 0xA8, (byte) 0xCB,
				(byte) 0x57, (byte) 0x77, (byte) 0xDC, (byte) 0x4A,
				(byte) 0xA9, (byte) 0x6C, (byte) 0x30, (byte) 0xBF,
				(byte) 0xB1, (byte) 0xFC, (byte) 0x26, (byte) 0x7A,
				(byte) 0x38, (byte) 0x2A, (byte) 0x48, (byte) 0x47 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1152 bits transaction time test Key F3

	public static EMVCAPK get_capk_mastercard_tF3() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xF3;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0x98, (byte) 0xF0, (byte) 0xC7, (byte) 0x70,
				(byte) 0xF2, (byte) 0x38, (byte) 0x64, (byte) 0xC2,
				(byte) 0xE7, (byte) 0x66, (byte) 0xDF, (byte) 0x02,
				(byte) 0xD1, (byte) 0xE8, (byte) 0x33, (byte) 0xDF,
				(byte) 0xF4, (byte) 0xFF, (byte) 0xE9, (byte) 0x2D,
				(byte) 0x69, (byte) 0x6E, (byte) 0x16, (byte) 0x42,
				(byte) 0xF0, (byte) 0xA8, (byte) 0x8C, (byte) 0x56,
				(byte) 0x94, (byte) 0xC6, (byte) 0x47, (byte) 0x9D,
				(byte) 0x16, (byte) 0xDB, (byte) 0x15, (byte) 0x37,
				(byte) 0xBF, (byte) 0xE2, (byte) 0x9E, (byte) 0x4F,
				(byte) 0xDC, (byte) 0x6E, (byte) 0x6E, (byte) 0x8A,
				(byte) 0xFD, (byte) 0x1B, (byte) 0x0E, (byte) 0xB7,
				(byte) 0xEA, (byte) 0x01, (byte) 0x24, (byte) 0x72,
				(byte) 0x3C, (byte) 0x33, (byte) 0x31, (byte) 0x79,
				(byte) 0xBF, (byte) 0x19, (byte) 0xE9, (byte) 0x3F,
				(byte) 0x10, (byte) 0x65, (byte) 0x8B, (byte) 0x2F,
				(byte) 0x77, (byte) 0x6E, (byte) 0x82, (byte) 0x9E,
				(byte) 0x87, (byte) 0xDA, (byte) 0xED, (byte) 0xA9,
				(byte) 0xC9, (byte) 0x4A, (byte) 0x8B, (byte) 0x33,
				(byte) 0x82, (byte) 0x19, (byte) 0x9A, (byte) 0x35,
				(byte) 0x0C, (byte) 0x07, (byte) 0x79, (byte) 0x77,
				(byte) 0xC9, (byte) 0x7A, (byte) 0xFF, (byte) 0x08,
				(byte) 0xFD, (byte) 0x11, (byte) 0x31, (byte) 0x0A,
				(byte) 0xC9, (byte) 0x50, (byte) 0xA7, (byte) 0x2C,
				(byte) 0x3C, (byte) 0xA5, (byte) 0x00, (byte) 0x2E,
				(byte) 0xF5, (byte) 0x13, (byte) 0xFC, (byte) 0xCC,
				(byte) 0x28, (byte) 0x6E, (byte) 0x64, (byte) 0x6E,
				(byte) 0x3C, (byte) 0x53, (byte) 0x87, (byte) 0x53,
				(byte) 0x5D, (byte) 0x50, (byte) 0x95, (byte) 0x14,
				(byte) 0xB3, (byte) 0xB3, (byte) 0x26, (byte) 0xE1,
				(byte) 0x23, (byte) 0x4F, (byte) 0x9C, (byte) 0xB4,
				(byte) 0x8C, (byte) 0x36, (byte) 0xDD, (byte) 0xD4,
				(byte) 0x4B, (byte) 0x41, (byte) 0x6D, (byte) 0x23,
				(byte) 0x65, (byte) 0x40, (byte) 0x34, (byte) 0xA6,
				(byte) 0x6F, (byte) 0x40, (byte) 0x3B, (byte) 0xA5,
				(byte) 0x11, (byte) 0xC5, (byte) 0xEF, (byte) 0xA3 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xA6, (byte) 0x9A, (byte) 0xC7, (byte) 0x60,
				(byte) 0x3D, (byte) 0xAF, (byte) 0x56, (byte) 0x6E,
				(byte) 0x97, (byte) 0x2D, (byte) 0xED, (byte) 0xC2,
				(byte) 0xCB, (byte) 0x43, (byte) 0x3E, (byte) 0x07,
				(byte) 0xE8, (byte) 0xB0, (byte) 0x1A, (byte) 0x9A };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 896 bits transaction time test Key F4

	public static EMVCAPK get_capk_mastercard_tF4() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xF4;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 112;
		byte[] Modul = { (byte) 0x9C, (byte) 0xFA, (byte) 0xD5, (byte) 0x4B,
				(byte) 0x40, (byte) 0x29, (byte) 0x7C, (byte) 0x1C,
				(byte) 0xDE, (byte) 0x23, (byte) 0xFC, (byte) 0xB3,
				(byte) 0xEF, (byte) 0x68, (byte) 0xD3, (byte) 0x18,
				(byte) 0x34, (byte) 0x1A, (byte) 0x47, (byte) 0x27,
				(byte) 0xAE, (byte) 0x1D, (byte) 0xAA, (byte) 0x2B,
				(byte) 0xEB, (byte) 0xE3, (byte) 0x58, (byte) 0x72,
				(byte) 0xEF, (byte) 0x3D, (byte) 0xC9, (byte) 0x07,
				(byte) 0x46, (byte) 0x29, (byte) 0x7B, (byte) 0x06,
				(byte) 0x6E, (byte) 0xD1, (byte) 0xCE, (byte) 0x3C,
				(byte) 0x07, (byte) 0xC1, (byte) 0xF2, (byte) 0x34,
				(byte) 0xFF, (byte) 0x54, (byte) 0x90, (byte) 0x42,
				(byte) 0x5E, (byte) 0x8B, (byte) 0x14, (byte) 0x67,
				(byte) 0x4C, (byte) 0xC5, (byte) 0x7E, (byte) 0x43,
				(byte) 0x97, (byte) 0xA5, (byte) 0x15, (byte) 0x84,
				(byte) 0xFF, (byte) 0x5E, (byte) 0xBA, (byte) 0x6B,
				(byte) 0x5D, (byte) 0x54, (byte) 0xD9, (byte) 0x9D,
				(byte) 0x2C, (byte) 0x9F, (byte) 0xC9, (byte) 0x9D,
				(byte) 0x5E, (byte) 0x4C, (byte) 0xAC, (byte) 0xB3,
				(byte) 0x48, (byte) 0x7A, (byte) 0xBA, (byte) 0x79,
				(byte) 0x0F, (byte) 0x28, (byte) 0xE3, (byte) 0x04,
				(byte) 0x98, (byte) 0x7A, (byte) 0xFA, (byte) 0x7F,
				(byte) 0x5F, (byte) 0x92, (byte) 0xE2, (byte) 0x2D,
				(byte) 0x89, (byte) 0xFF, (byte) 0x51, (byte) 0x0C,
				(byte) 0x1B, (byte) 0x58, (byte) 0x19, (byte) 0x41,
				(byte) 0x16, (byte) 0x6C, (byte) 0x7C, (byte) 0xCB,
				(byte) 0x11, (byte) 0xEF, (byte) 0xB0, (byte) 0x8D,
				(byte) 0xE6, (byte) 0x07, (byte) 0x46, (byte) 0x0D };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x98, (byte) 0xCE, (byte) 0xB9, (byte) 0xE0,
				(byte) 0xE8, (byte) 0xED, (byte) 0x52, (byte) 0xAB,
				(byte) 0xDD, (byte) 0x85, (byte) 0x49, (byte) 0xFD,
				(byte) 0x50, (byte) 0xAC, (byte) 0xEC, (byte) 0xA3,
				(byte) 0xBF, (byte) 0x51, (byte) 0xA7, (byte) 0x86 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1024 bits transaction time test Key F8 (also for ETEC test)

	public static EMVCAPK get_capk_mastercard_tF8() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xF8;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xA1, (byte) 0xF5, (byte) 0xE1, (byte) 0xC9,
				(byte) 0xBD, (byte) 0x86, (byte) 0x50, (byte) 0xBD,
				(byte) 0x43, (byte) 0xAB, (byte) 0x6E, (byte) 0xE5,
				(byte) 0x6B, (byte) 0x89, (byte) 0x1E, (byte) 0xF7,
				(byte) 0x45, (byte) 0x9C, (byte) 0x0A, (byte) 0x24,
				(byte) 0xFA, (byte) 0x84, (byte) 0xF9, (byte) 0x12,
				(byte) 0x7D, (byte) 0x1A, (byte) 0x6C, (byte) 0x79,
				(byte) 0xD4, (byte) 0x93, (byte) 0x0F, (byte) 0x6D,
				(byte) 0xB1, (byte) 0x85, (byte) 0x2E, (byte) 0x25,
				(byte) 0x10, (byte) 0xF1, (byte) 0x8B, (byte) 0x61,
				(byte) 0xCD, (byte) 0x35, (byte) 0x4D, (byte) 0xB8,
				(byte) 0x3A, (byte) 0x35, (byte) 0x6B, (byte) 0xD1,
				(byte) 0x90, (byte) 0xB8, (byte) 0x8A, (byte) 0xB8,
				(byte) 0xDF, (byte) 0x04, (byte) 0x28, (byte) 0x4D,
				(byte) 0x02, (byte) 0xA4, (byte) 0x20, (byte) 0x4A,
				(byte) 0x7B, (byte) 0x6C, (byte) 0xB7, (byte) 0xC5,
				(byte) 0x55, (byte) 0x19, (byte) 0x77, (byte) 0xA9,
				(byte) 0xB3, (byte) 0x63, (byte) 0x79, (byte) 0xCA,
				(byte) 0x3D, (byte) 0xE1, (byte) 0xA0, (byte) 0x8E,
				(byte) 0x69, (byte) 0xF3, (byte) 0x01, (byte) 0xC9,
				(byte) 0x5C, (byte) 0xC1, (byte) 0xC2, (byte) 0x05,
				(byte) 0x06, (byte) 0x95, (byte) 0x92, (byte) 0x75,
				(byte) 0xF4, (byte) 0x17, (byte) 0x23, (byte) 0xDD,
				(byte) 0x5D, (byte) 0x29, (byte) 0x25, (byte) 0x29,
				(byte) 0x05, (byte) 0x79, (byte) 0xE5, (byte) 0xA9,
				(byte) 0x5B, (byte) 0x0D, (byte) 0xF6, (byte) 0x32,
				(byte) 0x3F, (byte) 0xC8, (byte) 0xE9, (byte) 0x27,
				(byte) 0x3D, (byte) 0x6F, (byte) 0x84, (byte) 0x91,
				(byte) 0x98, (byte) 0xC4, (byte) 0x99, (byte) 0x62,
				(byte) 0x09, (byte) 0x16, (byte) 0x6D, (byte) 0x9B,
				(byte) 0xFC, (byte) 0x97, (byte) 0x3C, (byte) 0x36,
				(byte) 0x1C, (byte) 0xC8, (byte) 0x26, (byte) 0xE1 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xF0, (byte) 0x6E, (byte) 0xCC, (byte) 0x6D,
				(byte) 0x2A, (byte) 0xAE, (byte) 0xBF, (byte) 0x25,
				(byte) 0x9B, (byte) 0x7E, (byte) 0x75, (byte) 0x5A,
				(byte) 0x38, (byte) 0xD9, (byte) 0xA9, (byte) 0xB2,
				(byte) 0x4E, (byte) 0x2F, (byte) 0xF3, (byte) 0xDD };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard - eurocheque 1024 bits transaction time test Key F8(also for
		// ETEC test)

	public static EMVCAPK get_capk_eurocheque_tF8() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10 };
		byte KeyID = (byte) 0xF8;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xA1, (byte) 0xF5, (byte) 0xE1, (byte) 0xC9,
				(byte) 0xBD, (byte) 0x86, (byte) 0x50, (byte) 0xBD,
				(byte) 0x43, (byte) 0xAB, (byte) 0x6E, (byte) 0xE5,
				(byte) 0x6B, (byte) 0x89, (byte) 0x1E, (byte) 0xF7,
				(byte) 0x45, (byte) 0x9C, (byte) 0x0A, (byte) 0x24,
				(byte) 0xFA, (byte) 0x84, (byte) 0xF9, (byte) 0x12,
				(byte) 0x7D, (byte) 0x1A, (byte) 0x6C, (byte) 0x79,
				(byte) 0xD4, (byte) 0x93, (byte) 0x0F, (byte) 0x6D,
				(byte) 0xB1, (byte) 0x85, (byte) 0x2E, (byte) 0x25,
				(byte) 0x10, (byte) 0xF1, (byte) 0x8B, (byte) 0x61,
				(byte) 0xCD, (byte) 0x35, (byte) 0x4D, (byte) 0xB8,
				(byte) 0x3A, (byte) 0x35, (byte) 0x6B, (byte) 0xD1,
				(byte) 0x90, (byte) 0xB8, (byte) 0x8A, (byte) 0xB8,
				(byte) 0xDF, (byte) 0x04, (byte) 0x28, (byte) 0x4D,
				(byte) 0x02, (byte) 0xA4, (byte) 0x20, (byte) 0x4A,
				(byte) 0x7B, (byte) 0x6C, (byte) 0xB7, (byte) 0xC5,
				(byte) 0x55, (byte) 0x19, (byte) 0x77, (byte) 0xA9,
				(byte) 0xB3, (byte) 0x63, (byte) 0x79, (byte) 0xCA,
				(byte) 0x3D, (byte) 0xE1, (byte) 0xA0, (byte) 0x8E,
				(byte) 0x69, (byte) 0xF3, (byte) 0x01, (byte) 0xC9,
				(byte) 0x5C, (byte) 0xC1, (byte) 0xC2, (byte) 0x05,
				(byte) 0x06, (byte) 0x95, (byte) 0x92, (byte) 0x75,
				(byte) 0xF4, (byte) 0x17, (byte) 0x23, (byte) 0xDD,
				(byte) 0x5D, (byte) 0x29, (byte) 0x25, (byte) 0x29,
				(byte) 0x05, (byte) 0x79, (byte) 0xE5, (byte) 0xA9,
				(byte) 0x5B, (byte) 0x0D, (byte) 0xF6, (byte) 0x32,
				(byte) 0x3F, (byte) 0xC8, (byte) 0xE9, (byte) 0x27,
				(byte) 0x3D, (byte) 0x6F, (byte) 0x84, (byte) 0x91,
				(byte) 0x98, (byte) 0xC4, (byte) 0x99, (byte) 0x62,
				(byte) 0x09, (byte) 0x16, (byte) 0x6D, (byte) 0x9B,
				(byte) 0xFC, (byte) 0x97, (byte) 0x3C, (byte) 0x36,
				(byte) 0x1C, (byte) 0xC8, (byte) 0x26, (byte) 0xE1 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x0F, (byte) 0x44, (byte) 0x88, (byte) 0x56,
				(byte) 0x8C, (byte) 0xF8, (byte) 0xAF, (byte) 0xB0,
				(byte) 0xC1, (byte) 0x2E, (byte) 0xC6, (byte) 0x53,
				(byte) 0xCF, (byte) 0x7A, (byte) 0x04, (byte) 0xD2,
				(byte) 0xD4, (byte) 0x6D, (byte) 0xCD, (byte) 0x34 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard 1024 bits Test Key FE(also for ETEC test)

	public static EMVCAPK get_capk_mastercard_tFE() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xFE;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xA6, (byte) 0x53, (byte) 0xEA, (byte) 0xC1,
				(byte) 0xC0, (byte) 0xF7, (byte) 0x86, (byte) 0xC8,
				(byte) 0x72, (byte) 0x4F, (byte) 0x73, (byte) 0x7F,
				(byte) 0x17, (byte) 0x29, (byte) 0x97, (byte) 0xD6,
				(byte) 0x3D, (byte) 0x1C, (byte) 0x32, (byte) 0x51,
				(byte) 0xC4, (byte) 0x44, (byte) 0x02, (byte) 0x04,
				(byte) 0x9B, (byte) 0x86, (byte) 0x5B, (byte) 0xAE,
				(byte) 0x87, (byte) 0x7D, (byte) 0x0F, (byte) 0x39,
				(byte) 0x8C, (byte) 0xBF, (byte) 0xBE, (byte) 0x8A,
				(byte) 0x60, (byte) 0x35, (byte) 0xE2, (byte) 0x4A,
				(byte) 0xFA, (byte) 0x08, (byte) 0x6B, (byte) 0xEF,
				(byte) 0xDE, (byte) 0x93, (byte) 0x51, (byte) 0xE5,
				(byte) 0x4B, (byte) 0x95, (byte) 0x70, (byte) 0x8E,
				(byte) 0xE6, (byte) 0x72, (byte) 0xF0, (byte) 0x96,
				(byte) 0x8B, (byte) 0xCD, (byte) 0x50, (byte) 0xDC,
				(byte) 0xE4, (byte) 0x0F, (byte) 0x78, (byte) 0x33,
				(byte) 0x22, (byte) 0xB2, (byte) 0xAB, (byte) 0xA0,
				(byte) 0x4E, (byte) 0xF1, (byte) 0x37, (byte) 0xEF,
				(byte) 0x18, (byte) 0xAB, (byte) 0xF0, (byte) 0x3C,
				(byte) 0x7D, (byte) 0xBC, (byte) 0x58, (byte) 0x13,
				(byte) 0xAE, (byte) 0xAE, (byte) 0xF3, (byte) 0xAA,
				(byte) 0x77, (byte) 0x97, (byte) 0xBA, (byte) 0x15,
				(byte) 0xDF, (byte) 0x7D, (byte) 0x5B, (byte) 0xA1,
				(byte) 0xCB, (byte) 0xAF, (byte) 0x7F, (byte) 0xD5,
				(byte) 0x20, (byte) 0xB5, (byte) 0xA4, (byte) 0x82,
				(byte) 0xD8, (byte) 0xD3, (byte) 0xFE, (byte) 0xE1,
				(byte) 0x05, (byte) 0x07, (byte) 0x78, (byte) 0x71,
				(byte) 0x11, (byte) 0x3E, (byte) 0x23, (byte) 0xA4,
				(byte) 0x9A, (byte) 0xF3, (byte) 0x92, (byte) 0x65,
				(byte) 0x54, (byte) 0xA7, (byte) 0x0F, (byte) 0xE1,
				(byte) 0x0E, (byte) 0xD7, (byte) 0x28, (byte) 0xCF,
				(byte) 0x79, (byte) 0x3B, (byte) 0x62, (byte) 0xA1 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x9A, (byte) 0x29, (byte) 0x5B, (byte) 0x05,
				(byte) 0xFB, (byte) 0x39, (byte) 0x0E, (byte) 0xF7,
				(byte) 0x92, (byte) 0x3F, (byte) 0x57, (byte) 0x61,
				(byte) 0x8A, (byte) 0x9F, (byte) 0xDA, (byte) 0x29,
				(byte) 0x41, (byte) 0xFC, (byte) 0x34, (byte) 0xE0 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Mastercard - eurocheque 1024 bits Test Key FE(also for ETEC test)

	public static EMVCAPK get_capk_eurocheque_tFE() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x10 };
		byte KeyID = (byte) 0xFE;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xA6, (byte) 0x53, (byte) 0xEA, (byte) 0xC1,
				(byte) 0xC0, (byte) 0xF7, (byte) 0x86, (byte) 0xC8,
				(byte) 0x72, (byte) 0x4F, (byte) 0x73, (byte) 0x7F,
				(byte) 0x17, (byte) 0x29, (byte) 0x97, (byte) 0xD6,
				(byte) 0x3D, (byte) 0x1C, (byte) 0x32, (byte) 0x51,
				(byte) 0xC4, (byte) 0x44, (byte) 0x02, (byte) 0x04,
				(byte) 0x9B, (byte) 0x86, (byte) 0x5B, (byte) 0xAE,
				(byte) 0x87, (byte) 0x7D, (byte) 0x0F, (byte) 0x39,
				(byte) 0x8C, (byte) 0xBF, (byte) 0xBE, (byte) 0x8A,
				(byte) 0x60, (byte) 0x35, (byte) 0xE2, (byte) 0x4A,
				(byte) 0xFA, (byte) 0x08, (byte) 0x6B, (byte) 0xEF,
				(byte) 0xDE, (byte) 0x93, (byte) 0x51, (byte) 0xE5,
				(byte) 0x4B, (byte) 0x95, (byte) 0x70, (byte) 0x8E,
				(byte) 0xE6, (byte) 0x72, (byte) 0xF0, (byte) 0x96,
				(byte) 0x8B, (byte) 0xCD, (byte) 0x50, (byte) 0xDC,
				(byte) 0xE4, (byte) 0x0F, (byte) 0x78, (byte) 0x33,
				(byte) 0x22, (byte) 0xB2, (byte) 0xAB, (byte) 0xA0,
				(byte) 0x4E, (byte) 0xF1, (byte) 0x37, (byte) 0xEF,
				(byte) 0x18, (byte) 0xAB, (byte) 0xF0, (byte) 0x3C,
				(byte) 0x7D, (byte) 0xBC, (byte) 0x58, (byte) 0x13,
				(byte) 0xAE, (byte) 0xAE, (byte) 0xF3, (byte) 0xAA,
				(byte) 0x77, (byte) 0x97, (byte) 0xBA, (byte) 0x15,
				(byte) 0xDF, (byte) 0x7D, (byte) 0x5B, (byte) 0xA1,
				(byte) 0xCB, (byte) 0xAF, (byte) 0x7F, (byte) 0xD5,
				(byte) 0x20, (byte) 0xB5, (byte) 0xA4, (byte) 0x82,
				(byte) 0xD8, (byte) 0xD3, (byte) 0xFE, (byte) 0xE1,
				(byte) 0x05, (byte) 0x07, (byte) 0x78, (byte) 0x71,
				(byte) 0x11, (byte) 0x3E, (byte) 0x23, (byte) 0xA4,
				(byte) 0x9A, (byte) 0xF3, (byte) 0x92, (byte) 0x65,
				(byte) 0x54, (byte) 0xA7, (byte) 0x0F, (byte) 0xE1,
				(byte) 0x0E, (byte) 0xD7, (byte) 0x28, (byte) 0xCF,
				(byte) 0x79, (byte) 0x3B, (byte) 0x62, (byte) 0xA1 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x2C, (byte) 0xFB, (byte) 0xB8, (byte) 0x24,
				(byte) 0x09, (byte) 0xED, (byte) 0x86, (byte) 0xA3,
				(byte) 0x19, (byte) 0x73, (byte) 0xB0, (byte) 0xE0,
				(byte) 0xCE, (byte) 0xEA, (byte) 0x38, (byte) 0x1B,
				(byte) 0xC4, (byte) 0x3C, (byte) 0x80, (byte) 0x97 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// JCB 1024 bits Test Key 08

	public static EMVCAPK get_capk_jcb_t08() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x65 };
		byte KeyID = (byte) 0x08;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xB7, (byte) 0x46, (byte) 0x70, (byte) 0xDA,
				(byte) 0xD1, (byte) 0xDC, (byte) 0x89, (byte) 0x83,
				(byte) 0x65, (byte) 0x20, (byte) 0x00, (byte) 0xE5,
				(byte) 0xA7, (byte) 0xF2, (byte) 0xF8, (byte) 0xB3,
				(byte) 0x5D, (byte) 0xFD, (byte) 0x08, (byte) 0x3E,
				(byte) 0xE5, (byte) 0x93, (byte) 0xE5, (byte) 0xBA,
				(byte) 0x89, (byte) 0x5C, (byte) 0x95, (byte) 0x72,
				(byte) 0x9F, (byte) 0x2B, (byte) 0xAD, (byte) 0xE9,
				(byte) 0xC8, (byte) 0xAB, (byte) 0xF3, (byte) 0xDD,
				(byte) 0x9C, (byte) 0xE2, (byte) 0x40, (byte) 0xC4,
				(byte) 0x51, (byte) 0xC6, (byte) 0xCE, (byte) 0xFF,
				(byte) 0xC7, (byte) 0x68, (byte) 0xD8, (byte) 0x3C,
				(byte) 0xBA, (byte) 0xC7, (byte) 0x6A, (byte) 0xBB,
				(byte) 0x8F, (byte) 0xEA, (byte) 0x58, (byte) 0xF0,
				(byte) 0x13, (byte) 0xC6, (byte) 0x47, (byte) 0x00,
				(byte) 0x7C, (byte) 0xFF, (byte) 0x76, (byte) 0x17,
				(byte) 0xBA, (byte) 0xC2, (byte) 0xAE, (byte) 0x39,
				(byte) 0x81, (byte) 0x81, (byte) 0x6F, (byte) 0x25,
				(byte) 0xCC, (byte) 0x7E, (byte) 0x52, (byte) 0x38,
				(byte) 0xEF, (byte) 0x34, (byte) 0xC4, (byte) 0xF0,
				(byte) 0x2D, (byte) 0x0B, (byte) 0x01, (byte) 0xC2,
				(byte) 0x4F, (byte) 0x80, (byte) 0xC2, (byte) 0xC6,
				(byte) 0x5E, (byte) 0x7E, (byte) 0x77, (byte) 0x43,
				(byte) 0xA4, (byte) 0xFA, (byte) 0x8E, (byte) 0x23,
				(byte) 0x20, (byte) 0x6A, (byte) 0x23, (byte) 0xEC,
				(byte) 0xE2, (byte) 0x90, (byte) 0xC2, (byte) 0x6E,
				(byte) 0xA5, (byte) 0x6D, (byte) 0xB0, (byte) 0x85,
				(byte) 0xC5, (byte) 0xC5, (byte) 0xEA, (byte) 0xE2,
				(byte) 0x62, (byte) 0x92, (byte) 0x45, (byte) 0x1F,
				(byte) 0xC8, (byte) 0x29, (byte) 0x2F, (byte) 0x99,
				(byte) 0x57, (byte) 0xBE, (byte) 0x8F, (byte) 0xF2,
				(byte) 0x0F, (byte) 0xAD, (byte) 0x53, (byte) 0xE5 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xDD, (byte) 0x36, (byte) 0xD5, (byte) 0x89,
				(byte) 0x62, (byte) 0x28, (byte) 0xC8, (byte) 0xC4,
				(byte) 0x90, (byte) 0x07, (byte) 0x42, (byte) 0xF1,
				(byte) 0x07, (byte) 0xE2, (byte) 0xF9, (byte) 0x1F,
				(byte) 0xE5, (byte) 0x0B, (byte) 0xC7, (byte) 0xEE };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// JCB 1024 bits Test Key 01

	public static EMVCAPK get_capk_jcb_t01() {
		byte[] RID = { (byte) 0xF1, (byte) 0x23, (byte) 0x45, (byte) 0x67, (byte) 0x89 };
		byte KeyID = (byte) 0x01;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xED, (byte) 0x0B, (byte) 0x06, (byte) 0xEE,
				(byte) 0xF1, (byte) 0x24, (byte) 0x39, (byte) 0xB9,
				(byte) 0xE6, (byte) 0xF5, (byte) 0x2A, (byte) 0xBC,
				(byte) 0xCA, (byte) 0x3B, (byte) 0x64, (byte) 0x00,
				(byte) 0x85, (byte) 0x36, (byte) 0x58, (byte) 0x49,
				(byte) 0xF9, (byte) 0xD6, (byte) 0x1E, (byte) 0x67,
				(byte) 0xEB, (byte) 0xBE, (byte) 0x78, (byte) 0x0E,
				(byte) 0x1D, (byte) 0x7F, (byte) 0xA8, (byte) 0xBE,
				(byte) 0x19, (byte) 0xB2, (byte) 0x0C, (byte) 0x45,
				(byte) 0x1D, (byte) 0x55, (byte) 0xA8, (byte) 0x68,
				(byte) 0xC8, (byte) 0x01, (byte) 0x3A, (byte) 0xA2,
				(byte) 0x5C, (byte) 0x89, (byte) 0x31, (byte) 0x82,
				(byte) 0x1F, (byte) 0x1B, (byte) 0xA2, (byte) 0xEB,
				(byte) 0x00, (byte) 0x5C, (byte) 0xD5, (byte) 0x51,
				(byte) 0x31, (byte) 0xE5, (byte) 0xB0, (byte) 0xF0,
				(byte) 0x62, (byte) 0x20, (byte) 0xD5, (byte) 0x19,
				(byte) 0xBC, (byte) 0x0E, (byte) 0x38, (byte) 0xE3,
				(byte) 0x7B, (byte) 0x38, (byte) 0xFA, (byte) 0x58,
				(byte) 0xAA, (byte) 0x96, (byte) 0x8F, (byte) 0x11,
				(byte) 0x46, (byte) 0x71, (byte) 0xB4, (byte) 0xD6,
				(byte) 0x16, (byte) 0x0D, (byte) 0x31, (byte) 0xEB,
				(byte) 0x9F, (byte) 0x38, (byte) 0x63, (byte) 0xED,
				(byte) 0x3C, (byte) 0xB7, (byte) 0xB6, (byte) 0x6E,
				(byte) 0x35, (byte) 0x79, (byte) 0x09, (byte) 0xBE,
				(byte) 0xD8, (byte) 0xC8, (byte) 0x5C, (byte) 0xDE,
				(byte) 0x76, (byte) 0x8D, (byte) 0x79, (byte) 0x74,
				(byte) 0x76, (byte) 0x4C, (byte) 0x8A, (byte) 0x15,
				(byte) 0x0A, (byte) 0xA5, (byte) 0xBA, (byte) 0x13,
				(byte) 0xC6, (byte) 0xA9, (byte) 0x23, (byte) 0xBB,
				(byte) 0x38, (byte) 0x48, (byte) 0x91, (byte) 0x58,
				(byte) 0xEE, (byte) 0xF1, (byte) 0x5A, (byte) 0x74,
				(byte) 0x27, (byte) 0x2E, (byte) 0x50, (byte) 0x83 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xCC, (byte) 0xC1, (byte) 0x8B, (byte) 0x93,
				(byte) 0x7C, (byte) 0x85, (byte) 0x9F, (byte) 0x42,
				(byte) 0x9C, (byte) 0x33, (byte) 0xA3, (byte) 0xDB,
				(byte) 0xEB, (byte) 0x45, (byte) 0xE3, (byte) 0x1E,
				(byte) 0x17, (byte) 0x5B, (byte) 0x8F, (byte) 0xD1 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// JCB 1024 bits Test Key 02,for JCB2.0 test

	// capk_jcb_t02={{(byte)0xF1,(byte)0x23,(byte)0x45,(byte)0x67,(byte)0x89},(byte)0x02,
	// (byte)0x01,(byte)0x01,128,
	// {(byte)0xBB,(byte)0x7F,(byte)0x51,(byte)0x98,(byte)0x3F,(byte)0xD8,(byte)0x70,(byte)0x7F,(byte)0xD6,(byte)0x22,(byte)0x7C,(byte)0x23,(byte)0xDE,(byte)0xF5,(byte)0xD5,(byte)0x37,
	// (byte)0x7A,(byte)0x5A,(byte)0x73,(byte)0x7C,(byte)0xEF,(byte)0x3C,(byte)0x52,(byte)0x52,(byte)0xE5,(byte)0x78,(byte)0xEF,(byte)0xE1,(byte)0x36,(byte)0xDF,(byte)0x87,(byte)0xB5,
	// (byte)0x04,(byte)0x73,(byte)0xF9,(byte)0x34,(byte)0x1F,(byte)0x16,(byte)0x40,(byte)0xC8,(byte)0xD2,(byte)0x58,(byte)0x03,(byte)0x4E,(byte)0x14,(byte)0xC1,(byte)0x69,(byte)0x93,
	// (byte)0xFC,(byte)0xE6,(byte)0xC6,(byte)0xB8,(byte)0xC3,(byte)0xCE,(byte)0xEB,(byte)0x65,(byte)0xFC,(byte)0x8F,(byte)0xBC,(byte)0xD8,(byte)0xEB,(byte)0x77,(byte)0xB3,(byte)0xB0,
	// (byte)0x5A,(byte)0xC7,(byte)0xC4,(byte)0xD0,(byte)0x9E,(byte)0x0F,(byte)0xA1,(byte)0xBA,(byte)0x2E,(byte)0xFE,(byte)0x87,(byte)0xD3,(byte)0x18,(byte)0x4D,(byte)0xB6,(byte)0x71,
	// (byte)0x8A,(byte)0xE4,(byte)0x1A,(byte)0x7C,(byte)0xAD,(byte)0x89,(byte)0xB8,(byte)0xDC,(byte)0xE0,(byte)0xFE,(byte)0x80,(byte)0xCE,(byte)0xB5,(byte)0x23,(byte)0xD5,(byte)0xD6,
	// (byte)0x47,(byte)0xF9,(byte)0xDB,(byte)0x58,(byte)0xA3,(byte)0x1D,(byte)0x2E,(byte)0x71,(byte)0xAC,(byte)0x67,(byte)0x7E,(byte)0x67,(byte)0xFA,(byte)0x6E,(byte)0x75,(byte)0x82,
	// (byte)0x07,(byte)0x36,(byte)0xC9,(byte)0x89,(byte)0x37,(byte)0x61,(byte)0xEE,(byte)0x4A,(byte)0xCD,(byte)0x11,(byte)0xF3,(byte)0x1D,(byte)0xBD,(byte)0xC3,(byte)0x49,(byte)0xEF},
	// 3,{(byte)0x01,(byte)0x00,(byte)0x01},{(byte)0x15,(byte)0x12,(byte)0x31},
	// {(byte)0x5A,(byte)0x52,(byte)0xA2,(byte)0x86,(byte)0x9A,(byte)0x93,(byte)0x8F,(byte)0x82,(byte)0xBE,(byte)0x41,(byte)0xA1,(byte)0x80,(byte)0xA3,(byte)0x98,(byte)0x09,(byte)0x55,
	// (byte)0x46,(byte)0xD4,(byte)0xF6,(byte)0xAA}
	//
	// public static EMVCAPK get_() {
	// JCB 1152 bits Test Key 03,for JCB2.0 test

	// capk_jcb_t03={{(byte)0xF1,(byte)0x23,(byte)0x45,(byte)0x67,(byte)0x89},(byte)0x03,
	// (byte)0x01,(byte)0x01,144,
	// {(byte)0xDE,(byte)0xDC,(byte)0xBB,(byte)0x39,(byte)0xC4,(byte)0xEB,(byte)0x19,(byte)0x12,(byte)0xB5,(byte)0x38,(byte)0x15,(byte)0xD3,(byte)0x84,(byte)0x1C,(byte)0xBE,(byte)0xE0,
	// (byte)0x85,(byte)0x75,(byte)0xD6,(byte)0x86,(byte)0x36,(byte)0x82,(byte)0x91,(byte)0x5B,(byte)0x8E,(byte)0x19,(byte)0x65,(byte)0x23,(byte)0xA5,(byte)0x2F,(byte)0xB3,(byte)0xDB,
	// (byte)0x3F,(byte)0xB7,(byte)0x17,(byte)0xDE,(byte)0xDC,(byte)0xB4,(byte)0xAA,(byte)0x3D,(byte)0x62,(byte)0x1D,(byte)0x1F,(byte)0x00,(byte)0x86,(byte)0x3B,(byte)0x22,(byte)0x1F,
	// (byte)0xF7,(byte)0x80,(byte)0x69,(byte)0x7B,(byte)0x4E,(byte)0xD8,(byte)0x22,(byte)0x54,(byte)0xEC,(byte)0x76,(byte)0xA9,(byte)0xCD,(byte)0x16,(byte)0xAE,(byte)0xA7,(byte)0x40,
	// (byte)0x53,(byte)0x3B,(byte)0x11,(byte)0x23,(byte)0xE4,(byte)0x01,(byte)0x58,(byte)0x44,(byte)0xA0,(byte)0x1A,(byte)0xFD,(byte)0xE0,(byte)0x1E,(byte)0xD3,(byte)0x4E,(byte)0x1B,
	// (byte)0x37,(byte)0xDD,(byte)0x72,(byte)0xFE,(byte)0xC2,(byte)0x84,(byte)0xD9,(byte)0x9B,(byte)0x51,(byte)0x52,(byte)0x2D,(byte)0x54,(byte)0xD8,(byte)0x9B,(byte)0xCE,(byte)0x73,
	// (byte)0x53,(byte)0x55,(byte)0x67,(byte)0xBD,(byte)0xFB,(byte)0x2C,(byte)0x8A,(byte)0xF2,(byte)0x00,(byte)0x31,(byte)0xB2,(byte)0x04,(byte)0x42,(byte)0x73,(byte)0x82,(byte)0x30,
	// (byte)0xB7,(byte)0x67,(byte)0xD5,(byte)0xD0,(byte)0xB4,(byte)0xD5,(byte)0x47,(byte)0x27,(byte)0x41,(byte)0x1D,(byte)0x28,(byte)0x29,(byte)0x99,(byte)0x5E,(byte)0xFB,(byte)0x75,
	// (byte)0x46,(byte)0xBD,(byte)0x81,(byte)0x3F,(byte)0xAB,(byte)0x96,(byte)0x51,(byte)0xFB,(byte)0xEC,(byte)0xFD,(byte)0x98,(byte)0x71,(byte)0x78,(byte)0xBC,(byte)0xE5,(byte)0x7D},
	// 1,{(byte)0x03},{(byte)0x15,(byte)0x12,(byte)0x31},
	// {(byte)0xE9,(byte)0x6C,(byte)0x1B,(byte)0x32,(byte)0xB4,(byte)0xBA,(byte)0xEE,(byte)0xDA,(byte)0x02,(byte)0x99,(byte)0x91,(byte)0x51,(byte)0x42,(byte)0x23,(byte)0x63,(byte)0x72,
	// (byte)0xFF,(byte)0xC6,(byte)0x8A,(byte)0x64}
	//
	// public static EMVCAPK get_() {
	// CUP 1024 bits Test Key 01 - online 2014/05/17

	public static EMVCAPK get_capk_cup_t01() {
		byte[] RID = { (byte) 0xD1, (byte) 0x56, (byte) 0x00, (byte) 0x00, (byte) 0x01 };
		byte KeyID = (byte) 0x01;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xAD, (byte) 0x34, (byte) 0x11, (byte) 0xF4,
				(byte) 0x3F, (byte) 0xF1, (byte) 0xC5, (byte) 0x98,
				(byte) 0x1C, (byte) 0xF6, (byte) 0xE7, (byte) 0x14,
				(byte) 0xBA, (byte) 0xBE, (byte) 0x26, (byte) 0xC5,
				(byte) 0x5F, (byte) 0x1E, (byte) 0xC6, (byte) 0x3A,
				(byte) 0xC5, (byte) 0x3E, (byte) 0xD9, (byte) 0x92,
				(byte) 0xAB, (byte) 0x55, (byte) 0x96, (byte) 0xB5,
				(byte) 0x61, (byte) 0x22, (byte) 0x9A, (byte) 0x20,
				(byte) 0x2F, (byte) 0xF7, (byte) 0x20, (byte) 0x49,
				(byte) 0xD9, (byte) 0x8C, (byte) 0xEA, (byte) 0x71,
				(byte) 0x5C, (byte) 0x90, (byte) 0x15, (byte) 0xAD,
				(byte) 0xFE, (byte) 0x1C, (byte) 0x00, (byte) 0xBC,
				(byte) 0x82, (byte) 0x28, (byte) 0x62, (byte) 0x7D,
				(byte) 0x51, (byte) 0x57, (byte) 0x1D, (byte) 0xCC,
				(byte) 0xF5, (byte) 0xFA, (byte) 0x59, (byte) 0x9D,
				(byte) 0x66, (byte) 0x61, (byte) 0xB6, (byte) 0xB9,
				(byte) 0x7C, (byte) 0x7F, (byte) 0x71, (byte) 0x5C,
				(byte) 0xA4, (byte) 0x17, (byte) 0xE3, (byte) 0x7D,
				(byte) 0x0E, (byte) 0x1B, (byte) 0x28, (byte) 0x6F,
				(byte) 0x6D, (byte) 0xE5, (byte) 0x76, (byte) 0xF2,
				(byte) 0x01, (byte) 0x81, (byte) 0xD8, (byte) 0x18,
				(byte) 0x55, (byte) 0x66, (byte) 0x1A, (byte) 0xC1,
				(byte) 0x4D, (byte) 0xCF, (byte) 0x23, (byte) 0xB2,
				(byte) 0x5A, (byte) 0xAC, (byte) 0x46, (byte) 0xA6,
				(byte) 0x8D, (byte) 0xC6, (byte) 0x42, (byte) 0x7F,
				(byte) 0xEE, (byte) 0x6B, (byte) 0x65, (byte) 0x63,
				(byte) 0x45, (byte) 0x05, (byte) 0x83, (byte) 0x29,
				(byte) 0xAB, (byte) 0xF9, (byte) 0xDD, (byte) 0x81,
				(byte) 0x8E, (byte) 0x90, (byte) 0xEF, (byte) 0xD9,
				(byte) 0x6A, (byte) 0xA4, (byte) 0xBA, (byte) 0xC0,
				(byte) 0xE3, (byte) 0xC0, (byte) 0xE0, (byte) 0x53,
				(byte) 0x2A, (byte) 0x19, (byte) 0xED, (byte) 0xB5 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x06, (byte) 0x10, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xD0, (byte) 0x1A, (byte) 0x0A, (byte) 0x7B,
				(byte) 0x30, (byte) 0x93, (byte) 0xC4, (byte) 0x6E,
				(byte) 0xE5, (byte) 0xF4, (byte) 0x43, (byte) 0x9F,
				(byte) 0x92, (byte) 0xB9, (byte) 0x7E, (byte) 0xED,
				(byte) 0x6B, (byte) 0xD0, (byte) 0x1E, (byte) 0x19 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// PBOC 1152 bits Test Key 08

	public static EMVCAPK get_capk_pboctest_t08() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x08;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xB6, (byte) 0x16, (byte) 0x45, (byte) 0xED,
				(byte) 0xFD, (byte) 0x54, (byte) 0x98, (byte) 0xFB,
				(byte) 0x24, (byte) 0x64, (byte) 0x44, (byte) 0x03,
				(byte) 0x7A, (byte) 0x0F, (byte) 0xA1, (byte) 0x8C,
				(byte) 0x0F, (byte) 0x10, (byte) 0x1E, (byte) 0xBD,
				(byte) 0x8E, (byte) 0xFA, (byte) 0x54, (byte) 0x57,
				(byte) 0x3C, (byte) 0xE6, (byte) 0xE6, (byte) 0xA7,
				(byte) 0xFB, (byte) 0xF6, (byte) 0x3E, (byte) 0xD2,
				(byte) 0x1D, (byte) 0x66, (byte) 0x34, (byte) 0x08,
				(byte) 0x52, (byte) 0xB0, (byte) 0x21, (byte) 0x1C,
				(byte) 0xF5, (byte) 0xEE, (byte) 0xF6, (byte) 0xA1,
				(byte) 0xCD, (byte) 0x98, (byte) 0x9F, (byte) 0x66,
				(byte) 0xAF, (byte) 0x21, (byte) 0xA8, (byte) 0xEB,
				(byte) 0x19, (byte) 0xDB, (byte) 0xD8, (byte) 0xDB,
				(byte) 0xC3, (byte) 0x70, (byte) 0x6D, (byte) 0x13,
				(byte) 0x53, (byte) 0x63, (byte) 0xA0, (byte) 0xD6,
				(byte) 0x83, (byte) 0xD0, (byte) 0x46, (byte) 0x30,
				(byte) 0x4F, (byte) 0x5A, (byte) 0x83, (byte) 0x6B,
				(byte) 0xC1, (byte) 0xBC, (byte) 0x63, (byte) 0x28,
				(byte) 0x21, (byte) 0xAF, (byte) 0xE7, (byte) 0xA2,
				(byte) 0xF7, (byte) 0x5D, (byte) 0xA3, (byte) 0xC5,
				(byte) 0x0A, (byte) 0xC7, (byte) 0x4C, (byte) 0x54,
				(byte) 0x5A, (byte) 0x75, (byte) 0x45, (byte) 0x62,
				(byte) 0x20, (byte) 0x41, (byte) 0x37, (byte) 0x16,
				(byte) 0x96, (byte) 0x63, (byte) 0xCF, (byte) 0xCC,
				(byte) 0x0B, (byte) 0x06, (byte) 0xE6, (byte) 0x7E,
				(byte) 0x21, (byte) 0x09, (byte) 0xEB, (byte) 0xA4,
				(byte) 0x1B, (byte) 0xC6, (byte) 0x7F, (byte) 0xF2,
				(byte) 0x0C, (byte) 0xC8, (byte) 0xAC, (byte) 0x80,
				(byte) 0xD7, (byte) 0xB6, (byte) 0xEE, (byte) 0x1A,
				(byte) 0x95, (byte) 0x46, (byte) 0x5B, (byte) 0x3B,
				(byte) 0x26, (byte) 0x57, (byte) 0x53, (byte) 0x3E,
				(byte) 0xA5, (byte) 0x6D, (byte) 0x92, (byte) 0xD5,
				(byte) 0x39, (byte) 0xE5, (byte) 0x06, (byte) 0x43,
				(byte) 0x60, (byte) 0xEA, (byte) 0x48, (byte) 0x50,
				(byte) 0xFE, (byte) 0xD2, (byte) 0xD1, (byte) 0xBF };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xEE, (byte) 0x23, (byte) 0xB6, (byte) 0x16,
				(byte) 0xC9, (byte) 0x5C, (byte) 0x02, (byte) 0x65,
				(byte) 0x2A, (byte) 0xD1, (byte) 0x88, (byte) 0x60,
				(byte) 0xE4, (byte) 0x87, (byte) 0x87, (byte) 0xC0,
				(byte) 0x79, (byte) 0xE8, (byte) 0xE8, (byte) 0x5A };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// PBOC 1024 bits Test Key 80

	public static EMVCAPK get_capk_pboctest_t80() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x80;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xCC, (byte) 0xDB, (byte) 0xA6, (byte) 0x86,
				(byte) 0xE2, (byte) 0xEF, (byte) 0xB8, (byte) 0x4C,
				(byte) 0xE2, (byte) 0xEA, (byte) 0x01, (byte) 0x20,
				(byte) 0x9E, (byte) 0xEB, (byte) 0x53, (byte) 0xBE,
				(byte) 0xF2, (byte) 0x1A, (byte) 0xB6, (byte) 0xD3,
				(byte) 0x53, (byte) 0x27, (byte) 0x4F, (byte) 0xF8,
				(byte) 0x39, (byte) 0x1D, (byte) 0x70, (byte) 0x35,
				(byte) 0xD7, (byte) 0x6E, (byte) 0x21, (byte) 0x56,
				(byte) 0xCA, (byte) 0xED, (byte) 0xD0, (byte) 0x75,
				(byte) 0x10, (byte) 0xE0, (byte) 0x7D, (byte) 0xAF,
				(byte) 0xCA, (byte) 0xCA, (byte) 0xBB, (byte) 0x7C,
				(byte) 0xCB, (byte) 0x09, (byte) 0x50, (byte) 0xBA,
				(byte) 0x2F, (byte) 0x0A, (byte) 0x3C, (byte) 0xEC,
				(byte) 0x31, (byte) 0x3C, (byte) 0x52, (byte) 0xEE,
				(byte) 0x6C, (byte) 0xD0, (byte) 0x9E, (byte) 0xF0,
				(byte) 0x04, (byte) 0x01, (byte) 0xA3, (byte) 0xD6,
				(byte) 0xCC, (byte) 0x5F, (byte) 0x68, (byte) 0xCA,
				(byte) 0x5F, (byte) 0xCD, (byte) 0x0A, (byte) 0xC6,
				(byte) 0x13, (byte) 0x21, (byte) 0x41, (byte) 0xFA,
				(byte) 0xFD, (byte) 0x1C, (byte) 0xFA, (byte) 0x36,
				(byte) 0xA2, (byte) 0x69, (byte) 0x2D, (byte) 0x02,
				(byte) 0xDD, (byte) 0xC2, (byte) 0x7E, (byte) 0xDA,
				(byte) 0x4C, (byte) 0xD5, (byte) 0xBE, (byte) 0xA6,
				(byte) 0xFF, (byte) 0x21, (byte) 0x91, (byte) 0x3B,
				(byte) 0x51, (byte) 0x3C, (byte) 0xE7, (byte) 0x8B,
				(byte) 0xF3, (byte) 0x3E, (byte) 0x68, (byte) 0x77,
				(byte) 0xAA, (byte) 0x5B, (byte) 0x60, (byte) 0x5B,
				(byte) 0xC6, (byte) 0x9A, (byte) 0x53, (byte) 0x4F,
				(byte) 0x37, (byte) 0x77, (byte) 0xCB, (byte) 0xED,
				(byte) 0x63, (byte) 0x76, (byte) 0xBA, (byte) 0x64,
				(byte) 0x9C, (byte) 0x72, (byte) 0x51, (byte) 0x6A,
				(byte) 0x7E, (byte) 0x16, (byte) 0xAF, (byte) 0x85 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xA5, (byte) 0xE4, (byte) 0x4B, (byte) 0xB0,
				(byte) 0xE1, (byte) 0xFA, (byte) 0x4F, (byte) 0x96,
				(byte) 0xA1, (byte) 0x17, (byte) 0x09, (byte) 0x18,
				(byte) 0x66, (byte) 0x70, (byte) 0xD0, (byte) 0x83,
				(byte) 0x50, (byte) 0x57, (byte) 0xD3, (byte) 0x5E };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// PBOC 1024 bits Live Key 01

	public static EMVCAPK get_capk_pboc_v01() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x01;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0x80;
		byte[] Modul = { (byte) 0xBB, (byte) 0xE9, (byte) 0x06, (byte) 0x6D,
				(byte) 0x25, (byte) 0x17, (byte) 0x51, (byte) 0x1D,
				(byte) 0x23, (byte) 0x9C, (byte) 0x7B, (byte) 0xFA,
				(byte) 0x77, (byte) 0x88, (byte) 0x41, (byte) 0x44,
				(byte) 0xAE, (byte) 0x20, (byte) 0xC7, (byte) 0x37,
				(byte) 0x2F, (byte) 0x51, (byte) 0x51, (byte) 0x47,
				(byte) 0xE8, (byte) 0xCE, (byte) 0x65, (byte) 0x37,
				(byte) 0xC5, (byte) 0x4C, (byte) 0x0A, (byte) 0x6A,
				(byte) 0x4D, (byte) 0x45, (byte) 0xF8, (byte) 0xCA,
				(byte) 0x4D, (byte) 0x29, (byte) 0x08, (byte) 0x70,
				(byte) 0xCD, (byte) 0xA5, (byte) 0x9F, (byte) 0x13,
				(byte) 0x44, (byte) 0xEF, (byte) 0x71, (byte) 0xD1,
				(byte) 0x7D, (byte) 0x3F, (byte) 0x35, (byte) 0xD9,
				(byte) 0x2F, (byte) 0x3F, (byte) 0x06, (byte) 0x77,
				(byte) 0x8D, (byte) 0x0D, (byte) 0x51, (byte) 0x1E,
				(byte) 0xC2, (byte) 0xA7, (byte) 0xDC, (byte) 0x4F,
				(byte) 0xFE, (byte) 0xAD, (byte) 0xF4, (byte) 0xFB,
				(byte) 0x12, (byte) 0x53, (byte) 0xCE, (byte) 0x37,
				(byte) 0xA7, (byte) 0xB2, (byte) 0xB5, (byte) 0xA3,
				(byte) 0x74, (byte) 0x12, (byte) 0x27, (byte) 0xBE,
				(byte) 0xF7, (byte) 0x25, (byte) 0x24, (byte) 0xDA,
				(byte) 0x7A, (byte) 0x2B, (byte) 0x7B, (byte) 0x1C,
				(byte) 0xB4, (byte) 0x26, (byte) 0xBE, (byte) 0xE2,
				(byte) 0x7B, (byte) 0xC5, (byte) 0x13, (byte) 0xB0,
				(byte) 0xCB, (byte) 0x11, (byte) 0xAB, (byte) 0x99,
				(byte) 0xBC, (byte) 0x1B, (byte) 0xC6, (byte) 0x1D,
				(byte) 0xF5, (byte) 0xAC, (byte) 0x6C, (byte) 0xC4,
				(byte) 0xD8, (byte) 0x31, (byte) 0xD0, (byte) 0x84,
				(byte) 0x87, (byte) 0x88, (byte) 0xCD, (byte) 0x74,
				(byte) 0xF6, (byte) 0xD5, (byte) 0x43, (byte) 0xAD,
				(byte) 0x37, (byte) 0xC5, (byte) 0xA2, (byte) 0xB4,
				(byte) 0xC5, (byte) 0xD5, (byte) 0xA9, (byte) 0x3B };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x09, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xE8, (byte) 0x81, (byte) 0xE3, (byte) 0x90,
				(byte) 0x67, (byte) 0x5D, (byte) 0x44, (byte) 0xC2,
				(byte) 0xDD, (byte) 0x81, (byte) 0x23, (byte) 0x4D,
				(byte) 0xCE, (byte) 0x29, (byte) 0xC3, (byte) 0xF5,
				(byte) 0xAB, (byte) 0x22, (byte) 0x97, (byte) 0xA0 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_pboc_v02() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x02;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0x90;
		byte[] Modul = { (byte) 0xA3, (byte) 0x76, (byte) 0x7A, (byte) 0xBD,
				(byte) 0x1B, (byte) 0x6A, (byte) 0xA6, (byte) 0x9D,
				(byte) 0x7F, (byte) 0x3F, (byte) 0xBF, (byte) 0x28,
				(byte) 0xC0, (byte) 0x92, (byte) 0xDE, (byte) 0x9E,
				(byte) 0xD1, (byte) 0xE6, (byte) 0x58, (byte) 0xBA,
				(byte) 0x5F, (byte) 0x09, (byte) 0x09, (byte) 0xAF,
				(byte) 0x7A, (byte) 0x1C, (byte) 0xCD, (byte) 0x90,
				(byte) 0x73, (byte) 0x73, (byte) 0xB7, (byte) 0x21,
				(byte) 0x0F, (byte) 0xDE, (byte) 0xB1, (byte) 0x62,
				(byte) 0x87, (byte) 0xBA, (byte) 0x8E, (byte) 0x78,
				(byte) 0xE1, (byte) 0x52, (byte) 0x9F, (byte) 0x44,
				(byte) 0x39, (byte) 0x76, (byte) 0xFD, (byte) 0x27,
				(byte) 0xF9, (byte) 0x91, (byte) 0xEC, (byte) 0x67,
				(byte) 0xD9, (byte) 0x5E, (byte) 0x5F, (byte) 0x4E,
				(byte) 0x96, (byte) 0xB1, (byte) 0x27, (byte) 0xCA,
				(byte) 0xB2, (byte) 0x39, (byte) 0x6A, (byte) 0x94,
				(byte) 0xD6, (byte) 0xE4, (byte) 0x5C, (byte) 0xDA,
				(byte) 0x44, (byte) 0xCA, (byte) 0x4C, (byte) 0x48,
				(byte) 0x67, (byte) 0x57, (byte) 0x0D, (byte) 0x6B,
				(byte) 0x07, (byte) 0x54, (byte) 0x2F, (byte) 0x8D,
				(byte) 0x4B, (byte) 0xF9, (byte) 0xFF, (byte) 0x97,
				(byte) 0x97, (byte) 0x5D, (byte) 0xB9, (byte) 0x89,
				(byte) 0x15, (byte) 0x15, (byte) 0xE6, (byte) 0x6F,
				(byte) 0x52, (byte) 0x5D, (byte) 0x2B, (byte) 0x3C,
				(byte) 0xBE, (byte) 0xB6, (byte) 0xD6, (byte) 0x62,
				(byte) 0xBF, (byte) 0xB6, (byte) 0xC3, (byte) 0xF3,
				(byte) 0x38, (byte) 0xE9, (byte) 0x3B, (byte) 0x02,
				(byte) 0x14, (byte) 0x2B, (byte) 0xFC, (byte) 0x44,
				(byte) 0x17, (byte) 0x3A, (byte) 0x37, (byte) 0x64,
				(byte) 0xC5, (byte) 0x6A, (byte) 0xAD, (byte) 0xD2,
				(byte) 0x02, (byte) 0x07, (byte) 0x5B, (byte) 0x26,
				(byte) 0xDC, (byte) 0x2F, (byte) 0x9F, (byte) 0x7D,
				(byte) 0x7A, (byte) 0xE7, (byte) 0x4B, (byte) 0xD7,
				(byte) 0xD0, (byte) 0x0F, (byte) 0xD0, (byte) 0x5E,
				(byte) 0xE4, (byte) 0x30, (byte) 0x03, (byte) 0x26,
				(byte) 0x63, (byte) 0xD2, (byte) 0x7A, (byte) 0x57 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x14, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x03, (byte) 0xBB, (byte) 0x33, (byte) 0x5A,
				(byte) 0x85, (byte) 0x49, (byte) 0xA0, (byte) 0x3B,
				(byte) 0x87, (byte) 0xAB, (byte) 0x08, (byte) 0x9D,
				(byte) 0x00, (byte) 0x6F, (byte) 0x60, (byte) 0x85,
				(byte) 0x2E, (byte) 0x4B, (byte) 0x80, (byte) 0x60 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_pboc_v03() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x03;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0xB0;
		byte[] Modul = { (byte) 0xB0, (byte) 0x62, (byte) 0x7D, (byte) 0xEE,
				(byte) 0x87, (byte) 0x86, (byte) 0x4F, (byte) 0x9C,
				(byte) 0x18, (byte) 0xC1, (byte) 0x3B, (byte) 0x9A,
				(byte) 0x1F, (byte) 0x02, (byte) 0x54, (byte) 0x48,
				(byte) 0xBF, (byte) 0x13, (byte) 0xC5, (byte) 0x83,
				(byte) 0x80, (byte) 0xC9, (byte) 0x1F, (byte) 0x4C,
				(byte) 0xEB, (byte) 0xA9, (byte) 0xF9, (byte) 0xBC,
				(byte) 0xB2, (byte) 0x14, (byte) 0xFF, (byte) 0x84,
				(byte) 0x14, (byte) 0xE9, (byte) 0xB5, (byte) 0x9D,
				(byte) 0x6A, (byte) 0xBA, (byte) 0x10, (byte) 0xF9,
				(byte) 0x41, (byte) 0xC7, (byte) 0x33, (byte) 0x17,
				(byte) 0x68, (byte) 0xF4, (byte) 0x7B, (byte) 0x21,
				(byte) 0x27, (byte) 0x90, (byte) 0x7D, (byte) 0x85,
				(byte) 0x7F, (byte) 0xA3, (byte) 0x9A, (byte) 0xAF,
				(byte) 0x8C, (byte) 0xE0, (byte) 0x20, (byte) 0x45,
				(byte) 0xDD, (byte) 0x01, (byte) 0x61, (byte) 0x9D,
				(byte) 0x68, (byte) 0x9E, (byte) 0xE7, (byte) 0x31,
				(byte) 0xC5, (byte) 0x51, (byte) 0x15, (byte) 0x9B,
				(byte) 0xE7, (byte) 0xEB, (byte) 0x2D, (byte) 0x51,
				(byte) 0xA3, (byte) 0x72, (byte) 0xFF, (byte) 0x56,
				(byte) 0xB5, (byte) 0x56, (byte) 0xE5, (byte) 0xCB,
				(byte) 0x2F, (byte) 0xDE, (byte) 0x36, (byte) 0xE2,
				(byte) 0x30, (byte) 0x73, (byte) 0xA4, (byte) 0x4C,
				(byte) 0xA2, (byte) 0x15, (byte) 0xD6, (byte) 0xC2,
				(byte) 0x6C, (byte) 0xA6, (byte) 0x88, (byte) 0x47,
				(byte) 0xB3, (byte) 0x88, (byte) 0xE3, (byte) 0x95,
				(byte) 0x20, (byte) 0xE0, (byte) 0x02, (byte) 0x6E,
				(byte) 0x62, (byte) 0x29, (byte) 0x4B, (byte) 0x55,
				(byte) 0x7D, (byte) 0x64, (byte) 0x70, (byte) 0x44,
				(byte) 0x0C, (byte) 0xA0, (byte) 0xAE, (byte) 0xFC,
				(byte) 0x94, (byte) 0x38, (byte) 0xC9, (byte) 0x23,
				(byte) 0xAE, (byte) 0xC9, (byte) 0xB2, (byte) 0x09,
				(byte) 0x8D, (byte) 0x6D, (byte) 0x3A, (byte) 0x1A,
				(byte) 0xF5, (byte) 0xE8, (byte) 0xB1, (byte) 0xDE,
				(byte) 0x36, (byte) 0xF4, (byte) 0xB5, (byte) 0x30,
				(byte) 0x40, (byte) 0x10, (byte) 0x9D, (byte) 0x89,
				(byte) 0xB7, (byte) 0x7C, (byte) 0xAF, (byte) 0xAF,
				(byte) 0x70, (byte) 0xC2, (byte) 0x6C, (byte) 0x60,
				(byte) 0x1A, (byte) 0xBD, (byte) 0xF5, (byte) 0x9E,
				(byte) 0xEC, (byte) 0x0F, (byte) 0xDC, (byte) 0x8A,
				(byte) 0x99, (byte) 0x08, (byte) 0x91, (byte) 0x40,
				(byte) 0xCD, (byte) 0x2E, (byte) 0x81, (byte) 0x7E,
				(byte) 0x33, (byte) 0x51, (byte) 0x75, (byte) 0xB0,
				(byte) 0x3B, (byte) 0x7A, (byte) 0xA3, (byte) 0x3D };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x17, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x87, (byte) 0xF0, (byte) 0xCD, (byte) 0x7C,
				(byte) 0x0E, (byte) 0x86, (byte) 0xF3, (byte) 0x8F,
				(byte) 0x89, (byte) 0xA6, (byte) 0x6F, (byte) 0x8C,
				(byte) 0x47, (byte) 0x07, (byte) 0x1A, (byte) 0x8B,
				(byte) 0x88, (byte) 0x58, (byte) 0x6F, (byte) 0x26 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_pboc_v04() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x04;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0xF8;
		byte[] Modul = { (byte) 0xBC, (byte) 0x85, (byte) 0x3E, (byte) 0x6B,
				(byte) 0x53, (byte) 0x65, (byte) 0xE8, (byte) 0x9E,
				(byte) 0x7E, (byte) 0xE9, (byte) 0x31, (byte) 0x7C,
				(byte) 0x94, (byte) 0xB0, (byte) 0x2D, (byte) 0x0A,
				(byte) 0xBB, (byte) 0x0D, (byte) 0xBD, (byte) 0x91,
				(byte) 0xC0, (byte) 0x5A, (byte) 0x22, (byte) 0x4A,
				(byte) 0x25, (byte) 0x54, (byte) 0xAA, (byte) 0x29,
				(byte) 0xED, (byte) 0x9F, (byte) 0xCB, (byte) 0x9D,
				(byte) 0x86, (byte) 0xEB, (byte) 0x9C, (byte) 0xCB,
				(byte) 0xB3, (byte) 0x22, (byte) 0xA5, (byte) 0x78,
				(byte) 0x11, (byte) 0xF8, (byte) 0x61, (byte) 0x88,
				(byte) 0xAA, (byte) 0xC7, (byte) 0x35, (byte) 0x1C,
				(byte) 0x72, (byte) 0xBD, (byte) 0x9E, (byte) 0xF1,
				(byte) 0x96, (byte) 0xC5, (byte) 0xA0, (byte) 0x1A,
				(byte) 0xCE, (byte) 0xF7, (byte) 0xA4, (byte) 0xEB,
				(byte) 0x0D, (byte) 0x2A, (byte) 0xD6, (byte) 0x3D,
				(byte) 0x9E, (byte) 0x6A, (byte) 0xC2, (byte) 0xE7,
				(byte) 0x83, (byte) 0x65, (byte) 0x47, (byte) 0xCB,
				(byte) 0x15, (byte) 0x95, (byte) 0xC6, (byte) 0x8B,
				(byte) 0xCB, (byte) 0xAF, (byte) 0xD0, (byte) 0xF6,
				(byte) 0x72, (byte) 0x87, (byte) 0x60, (byte) 0xF3,
				(byte) 0xA7, (byte) 0xCA, (byte) 0x7B, (byte) 0x97,
				(byte) 0x30, (byte) 0x1B, (byte) 0x7E, (byte) 0x02,
				(byte) 0x20, (byte) 0x18, (byte) 0x4E, (byte) 0xFC,
				(byte) 0x4F, (byte) 0x65, (byte) 0x30, (byte) 0x08,
				(byte) 0xD9, (byte) 0x3C, (byte) 0xE0, (byte) 0x98,
				(byte) 0xC0, (byte) 0xD9, (byte) 0x3B, (byte) 0x45,
				(byte) 0x20, (byte) 0x10, (byte) 0x96, (byte) 0xD1,
				(byte) 0xAD, (byte) 0xFF, (byte) 0x4C, (byte) 0xF1,
				(byte) 0xF9, (byte) 0xFC, (byte) 0x02, (byte) 0xAF,
				(byte) 0x75, (byte) 0x9D, (byte) 0xA2, (byte) 0x7C,
				(byte) 0xD6, (byte) 0xDF, (byte) 0xD6, (byte) 0xD7,
				(byte) 0x89, (byte) 0xB0, (byte) 0x99, (byte) 0xF1,
				(byte) 0x6F, (byte) 0x37, (byte) 0x8B, (byte) 0x61,
				(byte) 0x00, (byte) 0x33, (byte) 0x4E, (byte) 0x63,
				(byte) 0xF3, (byte) 0xD3, (byte) 0x5F, (byte) 0x32,
				(byte) 0x51, (byte) 0xA5, (byte) 0xEC, (byte) 0x78,
				(byte) 0x69, (byte) 0x37, (byte) 0x31, (byte) 0xF5,
				(byte) 0x23, (byte) 0x35, (byte) 0x19, (byte) 0xCD,
				(byte) 0xB3, (byte) 0x80, (byte) 0xF5, (byte) 0xAB,
				(byte) 0x8C, (byte) 0x0F, (byte) 0x02, (byte) 0x72,
				(byte) 0x8E, (byte) 0x91, (byte) 0xD4, (byte) 0x69,
				(byte) 0xAB, (byte) 0xD0, (byte) 0xEA, (byte) 0xE0,
				(byte) 0xD9, (byte) 0x3B, (byte) 0x1C, (byte) 0xC6,
				(byte) 0x6C, (byte) 0xE1, (byte) 0x27, (byte) 0xB2,
				(byte) 0x9C, (byte) 0x7D, (byte) 0x77, (byte) 0x44,
				(byte) 0x1A, (byte) 0x49, (byte) 0xD0, (byte) 0x9F,
				(byte) 0xCA, (byte) 0x5D, (byte) 0x6D, (byte) 0x97,
				(byte) 0x62, (byte) 0xFC, (byte) 0x74, (byte) 0xC3,
				(byte) 0x1B, (byte) 0xB5, (byte) 0x06, (byte) 0xC8,
				(byte) 0xBA, (byte) 0xE3, (byte) 0xC7, (byte) 0x9A,
				(byte) 0xD6, (byte) 0xC2, (byte) 0x57, (byte) 0x87,
				(byte) 0x75, (byte) 0xB9, (byte) 0x59, (byte) 0x56,
				(byte) 0xB5, (byte) 0x37, (byte) 0x0D, (byte) 0x1D,
				(byte) 0x05, (byte) 0x19, (byte) 0xE3, (byte) 0x79,
				(byte) 0x06, (byte) 0xB3, (byte) 0x84, (byte) 0x73,
				(byte) 0x62, (byte) 0x33, (byte) 0x25, (byte) 0x1E,
				(byte) 0x8F, (byte) 0x09, (byte) 0xAD, (byte) 0x79,
				(byte) 0xDF, (byte) 0xBE, (byte) 0x2C, (byte) 0x6A,
				(byte) 0xBF, (byte) 0xAD, (byte) 0xAC, (byte) 0x8E,
				(byte) 0x4D, (byte) 0x86, (byte) 0x24, (byte) 0x31,
				(byte) 0x8C, (byte) 0x27, (byte) 0xDA, (byte) 0xF1 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x17, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xF5, (byte) 0x27, (byte) 0x08, (byte) 0x1C,
				(byte) 0xF3, (byte) 0x71, (byte) 0xDD, (byte) 0x7E,
				(byte) 0x1F, (byte) 0xD4, (byte) 0xFA, (byte) 0x41,
				(byte) 0x4A, (byte) 0x66, (byte) 0x50, (byte) 0x36,
				(byte) 0xE0, (byte) 0xF5, (byte) 0xE6, (byte) 0xE5 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// HK CUP CAPK

	public static EMVCAPK get_capk_pboc_v08() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x08;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0x90;
		byte[] Modul = { (byte) 0xB6, (byte) 0x16, (byte) 0x45, (byte) 0xED,
				(byte) 0xFD, (byte) 0x54, (byte) 0x98, (byte) 0xFB,
				(byte) 0x24, (byte) 0x64, (byte) 0x44, (byte) 0x03,
				(byte) 0x7A, (byte) 0x0F, (byte) 0xA1, (byte) 0x8C,
				(byte) 0x0F, (byte) 0x10, (byte) 0x1E, (byte) 0xBD,
				(byte) 0x8E, (byte) 0xFA, (byte) 0x54, (byte) 0x57,
				(byte) 0x3C, (byte) 0xE6, (byte) 0xE6, (byte) 0xA7,
				(byte) 0xFB, (byte) 0xF6, (byte) 0x3E, (byte) 0xD2,
				(byte) 0x1D, (byte) 0x66, (byte) 0x34, (byte) 0x08,
				(byte) 0x52, (byte) 0xB0, (byte) 0x21, (byte) 0x1C,
				(byte) 0xF5, (byte) 0xEE, (byte) 0xF6, (byte) 0xA1,
				(byte) 0xCD, (byte) 0x98, (byte) 0x9F, (byte) 0x66,
				(byte) 0xAF, (byte) 0x21, (byte) 0xA8, (byte) 0xEB,
				(byte) 0x19, (byte) 0xDB, (byte) 0xD8, (byte) 0xDB,
				(byte) 0xC3, (byte) 0x70, (byte) 0x6D, (byte) 0x13,
				(byte) 0x53, (byte) 0x63, (byte) 0xA0, (byte) 0xD6,
				(byte) 0x83, (byte) 0xD0, (byte) 0x46, (byte) 0x30,
				(byte) 0x4F, (byte) 0x5A, (byte) 0x83, (byte) 0x6B,
				(byte) 0xC1, (byte) 0xBC, (byte) 0x63, (byte) 0x28,
				(byte) 0x21, (byte) 0xAF, (byte) 0xE7, (byte) 0xA2,
				(byte) 0xF7, (byte) 0x5D, (byte) 0xA3, (byte) 0xC5,
				(byte) 0x0A, (byte) 0xC7, (byte) 0x4C, (byte) 0x54,
				(byte) 0x5A, (byte) 0x75, (byte) 0x45, (byte) 0x62,
				(byte) 0x20, (byte) 0x41, (byte) 0x37, (byte) 0x16,
				(byte) 0x96, (byte) 0x63, (byte) 0xCF, (byte) 0xCC,
				(byte) 0x0B, (byte) 0x06, (byte) 0xE6, (byte) 0x7E,
				(byte) 0x21, (byte) 0x09, (byte) 0xEB, (byte) 0xA4,
				(byte) 0x1B, (byte) 0xC6, (byte) 0x7F, (byte) 0xF2,
				(byte) 0x0C, (byte) 0xC8, (byte) 0xAC, (byte) 0x80,
				(byte) 0xD7, (byte) 0xB6, (byte) 0xEE, (byte) 0x1A,
				(byte) 0x95, (byte) 0x46, (byte) 0x5B, (byte) 0x3B,
				(byte) 0x26, (byte) 0x57, (byte) 0x53, (byte) 0x3E,
				(byte) 0xA5, (byte) 0x6D, (byte) 0x92, (byte) 0xD5,
				(byte) 0x39, (byte) 0xE5, (byte) 0x06, (byte) 0x43,
				(byte) 0x60, (byte) 0xEA, (byte) 0x48, (byte) 0x50,
				(byte) 0xFE, (byte) 0xD2, (byte) 0xD1, (byte) 0xBF };
		byte ExponentLen = (byte) 0x01;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x30, (byte) 0x12, (byte) 0x30 };
		byte[] CheckSum = { (byte) 0xEE, (byte) 0x23, (byte) 0xB6, (byte) 0x16,
				(byte) 0xC9, (byte) 0x5C, (byte) 0x02, (byte) 0x65,
				(byte) 0x2A, (byte) 0xD1, (byte) 0x88, (byte) 0x60,
				(byte) 0xE4, (byte) 0x87, (byte) 0x87, (byte) 0xC0,
				(byte) 0x79, (byte) 0xE8, (byte) 0xE8, (byte) 0x5A };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// HK CUP CAPK

	public static EMVCAPK get_capk_pboc_v09() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x09;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0xB0;
		byte[] Modul = { (byte) 0xEB, (byte) 0x37, (byte) 0x4D, (byte) 0xFC,
				(byte) 0x5A, (byte) 0x96, (byte) 0xB7, (byte) 0x1D,
				(byte) 0x28, (byte) 0x63, (byte) 0x87, (byte) 0x5E,
				(byte) 0xDA, (byte) 0x2E, (byte) 0xAF, (byte) 0xB9,
				(byte) 0x6B, (byte) 0x1B, (byte) 0x43, (byte) 0x9D,
				(byte) 0x3E, (byte) 0xCE, (byte) 0x0B, (byte) 0x18,
				(byte) 0x26, (byte) 0xA2, (byte) 0x67, (byte) 0x2E,
				(byte) 0xEE, (byte) 0xFA, (byte) 0x79, (byte) 0x90,
				(byte) 0x28, (byte) 0x67, (byte) 0x76, (byte) 0xF8,
				(byte) 0xBD, (byte) 0x98, (byte) 0x9A, (byte) 0x15,
				(byte) 0x14, (byte) 0x1A, (byte) 0x75, (byte) 0xC3,
				(byte) 0x84, (byte) 0xDF, (byte) 0xC1, (byte) 0x4F,
				(byte) 0xEF, (byte) 0x92, (byte) 0x43, (byte) 0xAA,
				(byte) 0xB3, (byte) 0x27, (byte) 0x07, (byte) 0x65,
				(byte) 0x9B, (byte) 0xE9, (byte) 0xE4, (byte) 0x79,
				(byte) 0x7A, (byte) 0x24, (byte) 0x7C, (byte) 0x2F,
				(byte) 0x0B, (byte) 0x6D, (byte) 0x99, (byte) 0x37,
				(byte) 0x2F, (byte) 0x38, (byte) 0x4A, (byte) 0xF6,
				(byte) 0x2F, (byte) 0xE2, (byte) 0x3B, (byte) 0xC5,
				(byte) 0x4B, (byte) 0xCD, (byte) 0xC5, (byte) 0x7A,
				(byte) 0x9A, (byte) 0xCD, (byte) 0x1D, (byte) 0x55,
				(byte) 0x85, (byte) 0xC3, (byte) 0x03, (byte) 0xF2,
				(byte) 0x01, (byte) 0xEF, (byte) 0x4E, (byte) 0x8B,
				(byte) 0x80, (byte) 0x6A, (byte) 0xFB, (byte) 0x80,
				(byte) 0x9D, (byte) 0xB1, (byte) 0xA3, (byte) 0xDB,
				(byte) 0x1C, (byte) 0xD1, (byte) 0x12, (byte) 0xAC,
				(byte) 0x88, (byte) 0x4F, (byte) 0x16, (byte) 0x4A,
				(byte) 0x67, (byte) 0xB9, (byte) 0x9C, (byte) 0x7D,
				(byte) 0x6E, (byte) 0x5A, (byte) 0x8A, (byte) 0x6D,
				(byte) 0xF1, (byte) 0xD3, (byte) 0xCA, (byte) 0xE6,
				(byte) 0xD7, (byte) 0xED, (byte) 0x3D, (byte) 0x5B,
				(byte) 0xE7, (byte) 0x25, (byte) 0xB2, (byte) 0xDE,
				(byte) 0x4A, (byte) 0xDE, (byte) 0x23, (byte) 0xFA,
				(byte) 0x67, (byte) 0x9B, (byte) 0xF4, (byte) 0xEB,
				(byte) 0x15, (byte) 0xA9, (byte) 0x3D, (byte) 0x8A,
				(byte) 0x6E, (byte) 0x29, (byte) 0xC7, (byte) 0xFF,
				(byte) 0xA1, (byte) 0xA7, (byte) 0x0D, (byte) 0xE2,
				(byte) 0xE5, (byte) 0x4F, (byte) 0x59, (byte) 0x3D,
				(byte) 0x90, (byte) 0x8A, (byte) 0x3B, (byte) 0xF9,
				(byte) 0xEB, (byte) 0xBD, (byte) 0x76, (byte) 0x0B,
				(byte) 0xBF, (byte) 0xDC, (byte) 0x8D, (byte) 0xB8,
				(byte) 0xB5, (byte) 0x44, (byte) 0x97, (byte) 0xE6,
				(byte) 0xC5, (byte) 0xBE, (byte) 0x0E, (byte) 0x4A,
				(byte) 0x4D, (byte) 0xAC, (byte) 0x29, (byte) 0xE5 };
		byte ExponentLen = (byte) 0x01;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x30, (byte) 0x12, (byte) 0x30 };
		byte[] CheckSum = { (byte) 0xA0, (byte) 0x75, (byte) 0x30, (byte) 0x6E,
				(byte) 0xAB, (byte) 0x00, (byte) 0x45, (byte) 0xBA,
				(byte) 0xF7, (byte) 0x2C, (byte) 0xDD, (byte) 0x33,
				(byte) 0xB3, (byte) 0xB6, (byte) 0x78, (byte) 0x77,
				(byte) 0x9D, (byte) 0xE1, (byte) 0xF5, (byte) 0x27 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// HK CUP CAPK

	public static EMVCAPK get_capk_pboc_v0A() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x0A;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0x80;
		byte[] Modul = { (byte) 0xB2, (byte) 0xAB, (byte) 0x1B, (byte) 0x6E,
				(byte) 0x9A, (byte) 0xC5, (byte) 0x5A, (byte) 0x75,
				(byte) 0xAD, (byte) 0xFD, (byte) 0x5B, (byte) 0xBC,
				(byte) 0x34, (byte) 0x49, (byte) 0x0E, (byte) 0x53,
				(byte) 0xC4, (byte) 0xC3, (byte) 0x38, (byte) 0x1F,
				(byte) 0x34, (byte) 0xE6, (byte) 0x0E, (byte) 0x7F,
				(byte) 0xAC, (byte) 0x21, (byte) 0xCC, (byte) 0x2B,
				(byte) 0x26, (byte) 0xDD, (byte) 0x34, (byte) 0x46,
				(byte) 0x2B, (byte) 0x64, (byte) 0xA6, (byte) 0xFA,
				(byte) 0xE2, (byte) 0x49, (byte) 0x5E, (byte) 0xD1,
				(byte) 0xDD, (byte) 0x38, (byte) 0x3B, (byte) 0x81,
				(byte) 0x38, (byte) 0xBE, (byte) 0xA1, (byte) 0x00,
				(byte) 0xFF, (byte) 0x9B, (byte) 0x7A, (byte) 0x11,
				(byte) 0x18, (byte) 0x17, (byte) 0xE7, (byte) 0xB9,
				(byte) 0x86, (byte) 0x9A, (byte) 0x97, (byte) 0x42,
				(byte) 0xB1, (byte) 0x9E, (byte) 0x5C, (byte) 0x9D,
				(byte) 0xAC, (byte) 0x56, (byte) 0xF8, (byte) 0xB8,
				(byte) 0x82, (byte) 0x7F, (byte) 0x11, (byte) 0xB0,
				(byte) 0x5A, (byte) 0x08, (byte) 0xEC, (byte) 0xCF,
				(byte) 0x9E, (byte) 0x8D, (byte) 0x5E, (byte) 0x85,
				(byte) 0xB0, (byte) 0xF7, (byte) 0xCF, (byte) 0xA6,
				(byte) 0x44, (byte) 0xEF, (byte) 0xF3, (byte) 0xE9,
				(byte) 0xB7, (byte) 0x96, (byte) 0x68, (byte) 0x8F,
				(byte) 0x38, (byte) 0xE0, (byte) 0x06, (byte) 0xDE,
				(byte) 0xB2, (byte) 0x1E, (byte) 0x10, (byte) 0x1C,
				(byte) 0x01, (byte) 0x02, (byte) 0x89, (byte) 0x03,
				(byte) 0xA0, (byte) 0x60, (byte) 0x23, (byte) 0xAC,
				(byte) 0x5A, (byte) 0xAB, (byte) 0x86, (byte) 0x35,
				(byte) 0xF8, (byte) 0xE3, (byte) 0x07, (byte) 0xA5,
				(byte) 0x3A, (byte) 0xC7, (byte) 0x42, (byte) 0xBD,
				(byte) 0xCE, (byte) 0x6A, (byte) 0x28, (byte) 0x3F,
				(byte) 0x58, (byte) 0x5F, (byte) 0x48, (byte) 0xEF };
		byte ExponentLen = (byte) 0x01;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x30, (byte) 0x12, (byte) 0x30 };
		byte[] CheckSum = { (byte) 0xC8, (byte) 0x8B, (byte) 0xE6, (byte) 0xB2,
				(byte) 0x41, (byte) 0x7C, (byte) 0x4F, (byte) 0x94,
				(byte) 0x1C, (byte) 0x93, (byte) 0x71, (byte) 0xEA,
				(byte) 0x35, (byte) 0xA3, (byte) 0x77, (byte) 0x15,
				(byte) 0x87, (byte) 0x67, (byte) 0xE4, (byte) 0xE3 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// HK CUP CAPK

	public static EMVCAPK get_capk_pboc_v0B() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x0B;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0xF8;
		byte[] Modul = { (byte) 0xCF, (byte) 0x9F, (byte) 0xDF, (byte) 0x46,
				(byte) 0xB3, (byte) 0x56, (byte) 0x37, (byte) 0x8E,
				(byte) 0x9A, (byte) 0xF3, (byte) 0x11, (byte) 0xB0,
				(byte) 0xF9, (byte) 0x81, (byte) 0xB2, (byte) 0x1A,
				(byte) 0x1F, (byte) 0x22, (byte) 0xF2, (byte) 0x50,
				(byte) 0xFB, (byte) 0x11, (byte) 0xF5, (byte) 0x5C,
				(byte) 0x95, (byte) 0x87, (byte) 0x09, (byte) 0xE3,
				(byte) 0xC7, (byte) 0x24, (byte) 0x19, (byte) 0x18,
				(byte) 0x29, (byte) 0x34, (byte) 0x83, (byte) 0x28,
				(byte) 0x9E, (byte) 0xAE, (byte) 0x68, (byte) 0x8A,
				(byte) 0x09, (byte) 0x4C, (byte) 0x02, (byte) 0xC3,
				(byte) 0x44, (byte) 0xE2, (byte) 0x99, (byte) 0x9F,
				(byte) 0x31, (byte) 0x5A, (byte) 0x72, (byte) 0x84,
				(byte) 0x1F, (byte) 0x48, (byte) 0x9E, (byte) 0x24,
				(byte) 0xB1, (byte) 0xBA, (byte) 0x00, (byte) 0x56,
				(byte) 0xCF, (byte) 0xAB, (byte) 0x3B, (byte) 0x47,
				(byte) 0x9D, (byte) 0x0E, (byte) 0x82, (byte) 0x64,
				(byte) 0x52, (byte) 0x37, (byte) 0x5D, (byte) 0xCD,
				(byte) 0xBB, (byte) 0x67, (byte) 0xE9, (byte) 0x7E,
				(byte) 0xC2, (byte) 0xAA, (byte) 0x66, (byte) 0xF4,
				(byte) 0x60, (byte) 0x1D, (byte) 0x77, (byte) 0x4F,
				(byte) 0xEA, (byte) 0xEF, (byte) 0x77, (byte) 0x5A,
				(byte) 0xCC, (byte) 0xC6, (byte) 0x21, (byte) 0xBF,
				(byte) 0xEB, (byte) 0x65, (byte) 0xFB, (byte) 0x00,
				(byte) 0x53, (byte) 0xFC, (byte) 0x5F, (byte) 0x39,
				(byte) 0x2A, (byte) 0xA5, (byte) 0xE1, (byte) 0xD4,
				(byte) 0xC4, (byte) 0x1A, (byte) 0x4D, (byte) 0xE9,
				(byte) 0xFF, (byte) 0xDF, (byte) 0xDF, (byte) 0x13,
				(byte) 0x27, (byte) 0xC4, (byte) 0xBB, (byte) 0x87,
				(byte) 0x4F, (byte) 0x1F, (byte) 0x63, (byte) 0xA5,
				(byte) 0x99, (byte) 0xEE, (byte) 0x39, (byte) 0x02,
				(byte) 0xFE, (byte) 0x95, (byte) 0xE7, (byte) 0x29,
				(byte) 0xFD, (byte) 0x78, (byte) 0xD4, (byte) 0x23,
				(byte) 0x4D, (byte) 0xC7, (byte) 0xE6, (byte) 0xCF,
				(byte) 0x1A, (byte) 0xBA, (byte) 0xBA, (byte) 0xA3,
				(byte) 0xF6, (byte) 0xDB, (byte) 0x29, (byte) 0xB7,
				(byte) 0xF0, (byte) 0x5D, (byte) 0x1D, (byte) 0x90,
				(byte) 0x1D, (byte) 0x2E, (byte) 0x76, (byte) 0xA6,
				(byte) 0x06, (byte) 0xA8, (byte) 0xCB, (byte) 0xFF,
				(byte) 0xFF, (byte) 0xEC, (byte) 0xBD, (byte) 0x91,
				(byte) 0x8F, (byte) 0xA2, (byte) 0xD2, (byte) 0x78,
				(byte) 0xBD, (byte) 0xB4, (byte) 0x3B, (byte) 0x04,
				(byte) 0x34, (byte) 0xF5, (byte) 0xD4, (byte) 0x51,
				(byte) 0x34, (byte) 0xBE, (byte) 0x1C, (byte) 0x27,
				(byte) 0x81, (byte) 0xD1, (byte) 0x57, (byte) 0xD5,
				(byte) 0x01, (byte) 0xFF, (byte) 0x43, (byte) 0xE5,
				(byte) 0xF1, (byte) 0xC4, (byte) 0x70, (byte) 0x96,
				(byte) 0x7C, (byte) 0xD5, (byte) 0x7C, (byte) 0xE5,
				(byte) 0x3B, (byte) 0x64, (byte) 0xD8, (byte) 0x29,
				(byte) 0x74, (byte) 0xC8, (byte) 0x27, (byte) 0x59,
				(byte) 0x37, (byte) 0xC5, (byte) 0xD8, (byte) 0x50,
				(byte) 0x2A, (byte) 0x12, (byte) 0x52, (byte) 0xA8,
				(byte) 0xA5, (byte) 0xD6, (byte) 0x08, (byte) 0x8A,
				(byte) 0x25, (byte) 0x9B, (byte) 0x69, (byte) 0x4F,
				(byte) 0x98, (byte) 0x64, (byte) 0x8D, (byte) 0x9A,
				(byte) 0xF2, (byte) 0xCB, (byte) 0x0E, (byte) 0xFD,
				(byte) 0x9D, (byte) 0x94, (byte) 0x3C, (byte) 0x69,
				(byte) 0xF8, (byte) 0x96, (byte) 0xD4, (byte) 0x9F,
				(byte) 0xA3, (byte) 0x97, (byte) 0x02, (byte) 0x16,
				(byte) 0x2A, (byte) 0xCB, (byte) 0x5A, (byte) 0xF2,
				(byte) 0x9B, (byte) 0x90, (byte) 0xBA, (byte) 0xDE,
				(byte) 0x00, (byte) 0x5B, (byte) 0xC1, (byte) 0x57 };
		byte ExponentLen = (byte) 0x01;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x30, (byte) 0x12, (byte) 0x30 };
		byte[] CheckSum = { (byte) 0xBD, (byte) 0x33, (byte) 0x1F, (byte) 0x99,
				(byte) 0x96, (byte) 0xA4, (byte) 0x90, (byte) 0xB3,
				(byte) 0x3C, (byte) 0x13, (byte) 0x44, (byte) 0x10,
				(byte) 0x66, (byte) 0xA0, (byte) 0x9A, (byte) 0xD3,
				(byte) 0xFE, (byte) 0xB5, (byte) 0xF6, (byte) 0x6C };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// HK CUP CAPK

	public static EMVCAPK get_capk_pboc_v0C() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0x0C;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) (byte) 0x90;
		byte[] Modul = { (byte) 0xDE, (byte) 0xD9, (byte) 0xE1, (byte) 0xBC,
				(byte) 0x8E, (byte) 0x74, (byte) 0x9C, (byte) 0xAD,
				(byte) 0x74, (byte) 0x94, (byte) 0x84, (byte) 0xBF,
				(byte) 0xB4, (byte) 0x72, (byte) 0x44, (byte) 0x5B,
				(byte) 0xC8, (byte) 0x1F, (byte) 0xFA, (byte) 0xA8,
				(byte) 0x97, (byte) 0x07, (byte) 0x64, (byte) 0x8C,
				(byte) 0x34, (byte) 0x2A, (byte) 0xA3, (byte) 0x0D,
				(byte) 0x1B, (byte) 0xE6, (byte) 0x0D, (byte) 0x5E,
				(byte) 0xD0, (byte) 0xF6, (byte) 0xCE, (byte) 0xAB,
				(byte) 0xA2, (byte) 0x5C, (byte) 0x68, (byte) 0x3D,
				(byte) 0x45, (byte) 0x03, (byte) 0xCB, (byte) 0x11,
				(byte) 0xCA, (byte) 0xF9, (byte) 0x1A, (byte) 0x39,
				(byte) 0x72, (byte) 0x75, (byte) 0x93, (byte) 0xCF,
				(byte) 0x2B, (byte) 0xEE, (byte) 0xAE, (byte) 0x80,
				(byte) 0x32, (byte) 0xEF, (byte) 0xAC, (byte) 0xC4,
				(byte) 0x4F, (byte) 0xDF, (byte) 0x8D, (byte) 0xA3,
				(byte) 0x1D, (byte) 0x60, (byte) 0x07, (byte) 0x13,
				(byte) 0x9D, (byte) 0x45, (byte) 0x95, (byte) 0xE8,
				(byte) 0x65, (byte) 0x5C, (byte) 0x74, (byte) 0x95,
				(byte) 0xCF, (byte) 0x46, (byte) 0xA9, (byte) 0xD5,
				(byte) 0x93, (byte) 0xA8, (byte) 0x3E, (byte) 0x3C,
				(byte) 0x65, (byte) 0xB2, (byte) 0xCB, (byte) 0xF2,
				(byte) 0xAF, (byte) 0x1E, (byte) 0xEA, (byte) 0x02,
				(byte) 0xD1, (byte) 0xF9, (byte) 0x69, (byte) 0x51,
				(byte) 0xA9, (byte) 0x46, (byte) 0x61, (byte) 0x6B,
				(byte) 0x5A, (byte) 0xB2, (byte) 0x1C, (byte) 0xA0,
				(byte) 0xBF, (byte) 0x34, (byte) 0xD1, (byte) 0x2D,
				(byte) 0x05, (byte) 0xF6, (byte) 0xAE, (byte) 0x18,
				(byte) 0x35, (byte) 0x08, (byte) 0xA7, (byte) 0xAC,
				(byte) 0x7A, (byte) 0x46, (byte) 0x91, (byte) 0x3B,
				(byte) 0xDC, (byte) 0xE5, (byte) 0xFD, (byte) 0xC3,
				(byte) 0x91, (byte) 0x4C, (byte) 0xA7, (byte) 0x50,
				(byte) 0x01, (byte) 0x8B, (byte) 0x13, (byte) 0x0C,
				(byte) 0xA5, (byte) 0xBA, (byte) 0xD4, (byte) 0x9A,
				(byte) 0xD8, (byte) 0xC0, (byte) 0x22, (byte) 0x91,
				(byte) 0xAC, (byte) 0xA5, (byte) 0xCF, (byte) 0xFD };
		byte ExponentLen = (byte) 0x01;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x30, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xD7, (byte) 0xDD, (byte) 0x7A, (byte) 0xAC,
				(byte) 0x8B, (byte) 0x67, (byte) 0xA9, (byte) 0xA3,
				(byte) 0xCC, (byte) 0x72, (byte) 0xF3, (byte) 0x5F,
				(byte) 0x5D, (byte) 0x96, (byte) 0xF2, (byte) 0x65,
				(byte) 0xE1, (byte) 0x6E, (byte) 0xB3, (byte) 0xFE };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1024 bits Test Key 50

	public static EMVCAPK get_capk_visatest_t50() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x50;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xD1, (byte) 0x11, (byte) 0x97, (byte) 0x59,
				(byte) 0x00, (byte) 0x57, (byte) 0xB8, (byte) 0x41,
				(byte) 0x96, (byte) 0xC2, (byte) 0xF4, (byte) 0xD1,
				(byte) 0x1A, (byte) 0x8F, (byte) 0x3C, (byte) 0x05,
				(byte) 0x40, (byte) 0x8F, (byte) 0x42, (byte) 0x2A,
				(byte) 0x35, (byte) 0xD7, (byte) 0x02, (byte) 0xF9,
				(byte) 0x01, (byte) 0x06, (byte) 0xEA, (byte) 0x5B,
				(byte) 0x01, (byte) 0x9B, (byte) 0xB2, (byte) 0x8A,
				(byte) 0xE6, (byte) 0x07, (byte) 0xAA, (byte) 0x9C,
				(byte) 0xDE, (byte) 0xBC, (byte) 0xD0, (byte) 0xD8,
				(byte) 0x1A, (byte) 0x38, (byte) 0xD4, (byte) 0x8C,
				(byte) 0x7E, (byte) 0xBB, (byte) 0x00, (byte) 0x62,
				(byte) 0xD2, (byte) 0x87, (byte) 0x36, (byte) 0x9E,
				(byte) 0xC0, (byte) 0xC4, (byte) 0x21, (byte) 0x24,
				(byte) 0x24, (byte) 0x6A, (byte) 0xC3, (byte) 0x0D,
				(byte) 0x80, (byte) 0xCD, (byte) 0x60, (byte) 0x2A,
				(byte) 0xB7, (byte) 0x23, (byte) 0x8D, (byte) 0x51,
				(byte) 0x08, (byte) 0x4D, (byte) 0xED, (byte) 0x46,
				(byte) 0x98, (byte) 0x16, (byte) 0x2C, (byte) 0x59,
				(byte) 0xD2, (byte) 0x5E, (byte) 0xAC, (byte) 0x1E,
				(byte) 0x66, (byte) 0x25, (byte) 0x5B, (byte) 0x4D,
				(byte) 0xB2, (byte) 0x35, (byte) 0x25, (byte) 0x26,
				(byte) 0xEF, (byte) 0x09, (byte) 0x82, (byte) 0xC3,
				(byte) 0xB8, (byte) 0xAD, (byte) 0x3D, (byte) 0x1C,
				(byte) 0xCE, (byte) 0x85, (byte) 0xB0, (byte) 0x1D,
				(byte) 0xB5, (byte) 0x78, (byte) 0x8E, (byte) 0x75,
				(byte) 0xE0, (byte) 0x9F, (byte) 0x44, (byte) 0xBE,
				(byte) 0x73, (byte) 0x61, (byte) 0x36, (byte) 0x6D,
				(byte) 0xEF, (byte) 0x9D, (byte) 0x1E, (byte) 0x13,
				(byte) 0x17, (byte) 0xB0, (byte) 0x5E, (byte) 0x5D,
				(byte) 0x0F, (byte) 0xF5, (byte) 0x29, (byte) 0x0F,
				(byte) 0x88, (byte) 0xA0, (byte) 0xDB, (byte) 0x47 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB7, (byte) 0x69, (byte) 0x77, (byte) 0x56,
				(byte) 0x68, (byte) 0xCA, (byte) 0xCB, (byte) 0x5D,
				(byte) 0x22, (byte) 0xA6, (byte) 0x47, (byte) 0xD1,
				(byte) 0xD9, (byte) 0x93, (byte) 0x14, (byte) 0x1E,
				(byte) 0xDA, (byte) 0xB7, (byte) 0x23, (byte) 0x7B };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1152 bits Test Key 51

	public static EMVCAPK get_capk_visatest_t51() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x51;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xDB, (byte) 0x5F, (byte) 0xA2, (byte) 0x9D,
				(byte) 0x1F, (byte) 0xDA, (byte) 0x8C, (byte) 0x16,
				(byte) 0x34, (byte) 0xB0, (byte) 0x4D, (byte) 0xCC,
				(byte) 0xFF, (byte) 0x14, (byte) 0x8A, (byte) 0xBE,
				(byte) 0xE6, (byte) 0x3C, (byte) 0x77, (byte) 0x20,
				(byte) 0x35, (byte) 0xC7, (byte) 0x98, (byte) 0x51,
				(byte) 0xD3, (byte) 0x51, (byte) 0x21, (byte) 0x07,
				(byte) 0x58, (byte) 0x6E, (byte) 0x02, (byte) 0xA9,
				(byte) 0x17, (byte) 0xF7, (byte) 0xC7, (byte) 0xE8,
				(byte) 0x85, (byte) 0xE7, (byte) 0xC4, (byte) 0xA7,
				(byte) 0xD5, (byte) 0x29, (byte) 0x71, (byte) 0x0A,
				(byte) 0x14, (byte) 0x53, (byte) 0x34, (byte) 0xCE,
				(byte) 0x67, (byte) 0xDC, (byte) 0x41, (byte) 0x2C,
				(byte) 0xB1, (byte) 0x59, (byte) 0x7B, (byte) 0x77,
				(byte) 0xAA, (byte) 0x25, (byte) 0x43, (byte) 0xB9,
				(byte) 0x8D, (byte) 0x19, (byte) 0xCF, (byte) 0x2C,
				(byte) 0xB8, (byte) 0x0C, (byte) 0x52, (byte) 0x2B,
				(byte) 0xDB, (byte) 0xEA, (byte) 0x0F, (byte) 0x1B,
				(byte) 0x11, (byte) 0x3F, (byte) 0xA2, (byte) 0xC8,
				(byte) 0x62, (byte) 0x16, (byte) 0xC8, (byte) 0xC6,
				(byte) 0x10, (byte) 0xA2, (byte) 0xD5, (byte) 0x8F,
				(byte) 0x29, (byte) 0xCF, (byte) 0x33, (byte) 0x55,
				(byte) 0xCE, (byte) 0xB1, (byte) 0xBD, (byte) 0x3E,
				(byte) 0xF4, (byte) 0x10, (byte) 0xD1, (byte) 0xED,
				(byte) 0xD1, (byte) 0xF7, (byte) 0xAE, (byte) 0x0F,
				(byte) 0x16, (byte) 0x89, (byte) 0x79, (byte) 0x79,
				(byte) 0xDE, (byte) 0x28, (byte) 0xC6, (byte) 0xEF,
				(byte) 0x29, (byte) 0x3E, (byte) 0x0A, (byte) 0x19,
				(byte) 0x28, (byte) 0x2B, (byte) 0xD1, (byte) 0xD7,
				(byte) 0x93, (byte) 0xF1, (byte) 0x33, (byte) 0x15,
				(byte) 0x23, (byte) 0xFC, (byte) 0x71, (byte) 0xA2,
				(byte) 0x28, (byte) 0x80, (byte) 0x04, (byte) 0x68,
				(byte) 0xC0, (byte) 0x1A, (byte) 0x36, (byte) 0x53,
				(byte) 0xD1, (byte) 0x4C, (byte) 0x6B, (byte) 0x48,
				(byte) 0x51, (byte) 0xA5, (byte) 0xC0, (byte) 0x29,
				(byte) 0x47, (byte) 0x8E, (byte) 0x75, (byte) 0x7F };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB9, (byte) 0xD2, (byte) 0x48, (byte) 0x07,
				(byte) 0x5A, (byte) 0x3F, (byte) 0x23, (byte) 0xB5,
				(byte) 0x22, (byte) 0xFE, (byte) 0x45, (byte) 0x57,
				(byte) 0x3E, (byte) 0x04, (byte) 0x37, (byte) 0x4D,
				(byte) 0xC4, (byte) 0x99, (byte) 0x5D, (byte) 0x71 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// VISA 1984 bits Test Key 53

	public static EMVCAPK get_capk_visatest_t53() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03 };
		byte KeyID = (byte) 0x53;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xBC, (byte) 0xD8, (byte) 0x37, (byte) 0x21,
				(byte) 0xBE, (byte) 0x52, (byte) 0xCC, (byte) 0xCC,
				(byte) 0x4B, (byte) 0x64, (byte) 0x57, (byte) 0x32,
				(byte) 0x1F, (byte) 0x22, (byte) 0xA7, (byte) 0xDC,
				(byte) 0x76, (byte) 0x9F, (byte) 0x54, (byte) 0xEB,
				(byte) 0x80, (byte) 0x25, (byte) 0x91, (byte) 0x3B,
				(byte) 0xE8, (byte) 0x04, (byte) 0xD9, (byte) 0xEA,
				(byte) 0xBB, (byte) 0xFA, (byte) 0x19, (byte) 0xB3,
				(byte) 0xD7, (byte) 0xC5, (byte) 0xD3, (byte) 0xCA,
				(byte) 0x65, (byte) 0x8D, (byte) 0x76, (byte) 0x8C,
				(byte) 0xAF, (byte) 0x57, (byte) 0x06, (byte) 0x7E,
				(byte) 0xEC, (byte) 0x83, (byte) 0xC7, (byte) 0xE6,
				(byte) 0xE9, (byte) 0xF8, (byte) 0x1D, (byte) 0x05,
				(byte) 0x86, (byte) 0x70, (byte) 0x3E, (byte) 0xD9,
				(byte) 0xDD, (byte) 0xDA, (byte) 0xDD, (byte) 0x20,
				(byte) 0x67, (byte) 0x5D, (byte) 0x63, (byte) 0x42,
				(byte) 0x49, (byte) 0x80, (byte) 0xB1, (byte) 0x0E,
				(byte) 0xB3, (byte) 0x64, (byte) 0xE8, (byte) 0x1E,
				(byte) 0xB3, (byte) 0x7D, (byte) 0xB4, (byte) 0x0E,
				(byte) 0xD1, (byte) 0x00, (byte) 0x34, (byte) 0x4C,
				(byte) 0x92, (byte) 0x88, (byte) 0x86, (byte) 0xFF,
				(byte) 0x4C, (byte) 0xCC, (byte) 0x37, (byte) 0x20,
				(byte) 0x3E, (byte) 0xE6, (byte) 0x10, (byte) 0x6D,
				(byte) 0x5B, (byte) 0x59, (byte) 0xD1, (byte) 0xAC,
				(byte) 0x10, (byte) 0x2E, (byte) 0x2C, (byte) 0xD2,
				(byte) 0xD7, (byte) 0xAC, (byte) 0x17, (byte) 0xF4,
				(byte) 0xD9, (byte) 0x6C, (byte) 0x39, (byte) 0x8E,
				(byte) 0x5F, (byte) 0xD9, (byte) 0x93, (byte) 0xEC,
				(byte) 0xB4, (byte) 0xFF, (byte) 0xDF, (byte) 0x79,
				(byte) 0xB1, (byte) 0x75, (byte) 0x47, (byte) 0xFF,
				(byte) 0x9F, (byte) 0xA2, (byte) 0xAA, (byte) 0x8E,
				(byte) 0xEF, (byte) 0xD6, (byte) 0xCB, (byte) 0xDA,
				(byte) 0x12, (byte) 0x4C, (byte) 0xBB, (byte) 0x17,
				(byte) 0xA0, (byte) 0xF8, (byte) 0x52, (byte) 0x81,
				(byte) 0x46, (byte) 0x38, (byte) 0x71, (byte) 0x35,
				(byte) 0xE2, (byte) 0x26, (byte) 0xB0, (byte) 0x05,
				(byte) 0xA4, (byte) 0x74, (byte) 0xB9, (byte) 0x06,
				(byte) 0x2F, (byte) 0xF2, (byte) 0x64, (byte) 0xD2,
				(byte) 0xFF, (byte) 0x8E, (byte) 0xFA, (byte) 0x36,
				(byte) 0x81, (byte) 0x4A, (byte) 0xA2, (byte) 0x95,
				(byte) 0x00, (byte) 0x65, (byte) 0xB1, (byte) 0xB0,
				(byte) 0x4C, (byte) 0x0A, (byte) 0x1A, (byte) 0xE9,
				(byte) 0xB2, (byte) 0xF6, (byte) 0x9D, (byte) 0x4A,
				(byte) 0x4A, (byte) 0xA9, (byte) 0x79, (byte) 0xD6,
				(byte) 0xCE, (byte) 0x95, (byte) 0xFE, (byte) 0xE9,
				(byte) 0x48, (byte) 0x5E, (byte) 0xD0, (byte) 0xA0,
				(byte) 0x3A, (byte) 0xEE, (byte) 0x9B, (byte) 0xD9,
				(byte) 0x53, (byte) 0xE8, (byte) 0x1C, (byte) 0xFD,
				(byte) 0x1E, (byte) 0xF6, (byte) 0xE8, (byte) 0x14,
				(byte) 0xDF, (byte) 0xD3, (byte) 0xC2, (byte) 0xCE,
				(byte) 0x37, (byte) 0xAE, (byte) 0xFA, (byte) 0x38,
				(byte) 0xC1, (byte) 0xF9, (byte) 0x87, (byte) 0x73,
				(byte) 0x71, (byte) 0xE9, (byte) 0x1D, (byte) 0x6A,
				(byte) 0x5E, (byte) 0xB5, (byte) 0x9F, (byte) 0xDE,
				(byte) 0xDF, (byte) 0x75, (byte) 0xD3, (byte) 0x32,
				(byte) 0x5F, (byte) 0xA3, (byte) 0xCA, (byte) 0x66,
				(byte) 0xCD, (byte) 0xFB, (byte) 0xA0, (byte) 0xE5,
				(byte) 0x71, (byte) 0x46, (byte) 0xCC, (byte) 0x78,
				(byte) 0x98, (byte) 0x18, (byte) 0xFF, (byte) 0x06,
				(byte) 0xBE, (byte) 0x5F, (byte) 0xCC, (byte) 0x50,
				(byte) 0xAB, (byte) 0xD3, (byte) 0x62, (byte) 0xAE,
				(byte) 0x4B, (byte) 0x80, (byte) 0x99, (byte) 0x6D };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xAC, (byte) 0x21, (byte) 0x3A, (byte) 0x2E,
				(byte) 0x0D, (byte) 0x2C, (byte) 0x0C, (byte) 0xA3,
				(byte) 0x5A, (byte) 0xD0, (byte) 0x20, (byte) 0x13,
				(byte) 0x23, (byte) 0x53, (byte) 0x6D, (byte) 0x58,
				(byte) 0x09, (byte) 0x7E, (byte) 0x4E, (byte) 0x57 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Test 896 bits Test Key E1

	public static EMVCAPK get_capk_emvtest_tE1() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99, (byte) 0x99 };
		byte KeyID = (byte) 0xE1;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 112;
		byte[] Modul = { (byte) 0x99, (byte) 0xC5, (byte) 0xB7, (byte) 0x0A,
				(byte) 0xA6, (byte) 0x1B, (byte) 0x4F, (byte) 0x4C,
				(byte) 0x51, (byte) 0xB6, (byte) 0xF9, (byte) 0x0B,
				(byte) 0x0E, (byte) 0x3B, (byte) 0xFB, (byte) 0x7A,
				(byte) 0x3E, (byte) 0xE0, (byte) 0xE7, (byte) 0xDB,
				(byte) 0x41, (byte) 0xBC, (byte) 0x46, (byte) 0x68,
				(byte) 0x88, (byte) 0xB3, (byte) 0xEC, (byte) 0x8E,
				(byte) 0x99, (byte) 0x77, (byte) 0xC7, (byte) 0x62,
				(byte) 0x40, (byte) 0x7E, (byte) 0xF1, (byte) 0xD7,
				(byte) 0x9E, (byte) 0x0A, (byte) 0xFB, (byte) 0x28,
				(byte) 0x23, (byte) 0x10, (byte) 0x0A, (byte) 0x02,
				(byte) 0x0C, (byte) 0x3E, (byte) 0x80, (byte) 0x20,
				(byte) 0x59, (byte) 0x3D, (byte) 0xB5, (byte) 0x0E,
				(byte) 0x90, (byte) 0xDB, (byte) 0xEA, (byte) 0xC1,
				(byte) 0x8B, (byte) 0x78, (byte) 0xD1, (byte) 0x3F,
				(byte) 0x96, (byte) 0xBB, (byte) 0x2F, (byte) 0x57,
				(byte) 0xEE, (byte) 0xDD, (byte) 0xC3, (byte) 0x0F,
				(byte) 0x25, (byte) 0x65, (byte) 0x92, (byte) 0x41,
				(byte) 0x7C, (byte) 0xDF, (byte) 0x73, (byte) 0x9C,
				(byte) 0xA6, (byte) 0x80, (byte) 0x4A, (byte) 0x10,
				(byte) 0xA2, (byte) 0x9D, (byte) 0x28, (byte) 0x06,
				(byte) 0xE7, (byte) 0x74, (byte) 0xBF, (byte) 0xA7,
				(byte) 0x51, (byte) 0xF2, (byte) 0x2C, (byte) 0xF3,
				(byte) 0xB6, (byte) 0x5B, (byte) 0x38, (byte) 0xF3,
				(byte) 0x7F, (byte) 0x91, (byte) 0xB4, (byte) 0xDA,
				(byte) 0xF8, (byte) 0xAE, (byte) 0xC9, (byte) 0xB8,
				(byte) 0x03, (byte) 0xF7, (byte) 0x61, (byte) 0x0E,
				(byte) 0x06, (byte) 0xAC, (byte) 0x9E, (byte) 0x6B };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xF8, (byte) 0x70, (byte) 0x7B, (byte) 0x9B,
				(byte) 0xED, (byte) 0xF0, (byte) 0x31, (byte) 0xE5,
				(byte) 0x8A, (byte) 0x9F, (byte) 0x84, (byte) 0x36,
				(byte) 0x31, (byte) 0xB9, (byte) 0x0C, (byte) 0x90,
				(byte) 0xD8, (byte) 0x0E, (byte) 0xD6, (byte) 0x95 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Test 896 bits Test Key E2

	public static EMVCAPK get_capk_emvtest_tE2() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99, (byte) 0x99 };
		byte KeyID = (byte) 0xE2;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 112;
		byte[] Modul = { (byte) 0xBD, (byte) 0x23, (byte) 0x2E, (byte) 0x34,
				(byte) 0x8B, (byte) 0x11, (byte) 0x8E, (byte) 0xB3,
				(byte) 0xF6, (byte) 0x44, (byte) 0x6E, (byte) 0xF4,
				(byte) 0xDA, (byte) 0x6C, (byte) 0x3B, (byte) 0xAC,
				(byte) 0x9B, (byte) 0x2A, (byte) 0xE5, (byte) 0x10,
				(byte) 0xC5, (byte) 0xAD, (byte) 0x10, (byte) 0x7D,
				(byte) 0x38, (byte) 0x34, (byte) 0x32, (byte) 0x55,
				(byte) 0xD2, (byte) 0x1C, (byte) 0x4B, (byte) 0xDF,
				(byte) 0x49, (byte) 0x52, (byte) 0xA4, (byte) 0x2E,
				(byte) 0x92, (byte) 0xC6, (byte) 0x33, (byte) 0xB1,
				(byte) 0xCE, (byte) 0x4B, (byte) 0xFE, (byte) 0xC3,
				(byte) 0x9A, (byte) 0xFB, (byte) 0x6D, (byte) 0xFE,
				(byte) 0x14, (byte) 0x7E, (byte) 0xCB, (byte) 0xB9,
				(byte) 0x1D, (byte) 0x68, (byte) 0x1D, (byte) 0xAC,
				(byte) 0x15, (byte) 0xFB, (byte) 0x0E, (byte) 0x19,
				(byte) 0x8E, (byte) 0x9A, (byte) 0x7E, (byte) 0x46,
				(byte) 0x36, (byte) 0xBD, (byte) 0xCA, (byte) 0x10,
				(byte) 0x7B, (byte) 0xCD, (byte) 0xA3, (byte) 0x38,
				(byte) 0x4F, (byte) 0xCB, (byte) 0x28, (byte) 0xB0,
				(byte) 0x6A, (byte) 0xFE, (byte) 0xF9, (byte) 0x0F,
				(byte) 0x09, (byte) 0x9E, (byte) 0x70, (byte) 0x84,
				(byte) 0x51, (byte) 0x1F, (byte) 0x3C, (byte) 0xC0,
				(byte) 0x10, (byte) 0xD4, (byte) 0x34, (byte) 0x35,
				(byte) 0x03, (byte) 0xE1, (byte) 0xE5, (byte) 0xA6,
				(byte) 0x72, (byte) 0x64, (byte) 0xB4, (byte) 0x36,
				(byte) 0x7D, (byte) 0xAA, (byte) 0x9A, (byte) 0x39,
				(byte) 0x49, (byte) 0x49, (byte) 0x92, (byte) 0x72,
				(byte) 0xE9, (byte) 0xB5, (byte) 0x02, (byte) 0x2F };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xC1, (byte) 0x05, (byte) 0x6A, (byte) 0xDC,
				(byte) 0xE9, (byte) 0xE6, (byte) 0xF7, (byte) 0x6E,
				(byte) 0xA7, (byte) 0x7C, (byte) 0x89, (byte) 0xCB,
				(byte) 0x83, (byte) 0x2F, (byte) 0x5A, (byte) 0x48,
				(byte) 0x17, (byte) 0x90, (byte) 0x7A, (byte) 0x1A };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Test 896 bits Test Key E3

	public static EMVCAPK get_capk_emvtest_tE3() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99, (byte) 0x99 };
		byte KeyID = (byte) 0xE3;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 112;
		byte[] Modul = { (byte) 0xBC, (byte) 0x01, (byte) 0xE1, (byte) 0x22,
				(byte) 0x23, (byte) 0xE1, (byte) 0xA4, (byte) 0x1E,
				(byte) 0x88, (byte) 0xBF, (byte) 0xFA, (byte) 0x80,
				(byte) 0x10, (byte) 0x93, (byte) 0xC5, (byte) 0xF8,
				(byte) 0xCE, (byte) 0xC5, (byte) 0xCD, (byte) 0x05,
				(byte) 0xDB, (byte) 0xBD, (byte) 0xBB, (byte) 0x78,
				(byte) 0x7C, (byte) 0xE8, (byte) 0x72, (byte) 0x49,
				(byte) 0xE8, (byte) 0x80, (byte) 0x83, (byte) 0x27,
				(byte) 0xC2, (byte) 0xD2, (byte) 0x18, (byte) 0x99,
				(byte) 0x1F, (byte) 0x97, (byte) 0xA1, (byte) 0x13,
				(byte) 0x1E, (byte) 0x8A, (byte) 0x25, (byte) 0xB0,
				(byte) 0x12, (byte) 0x2E, (byte) 0xD1, (byte) 0x1E,
				(byte) 0x70, (byte) 0x9C, (byte) 0x53, (byte) 0x3E,
				(byte) 0x88, (byte) 0x86, (byte) 0xA1, (byte) 0x25,
				(byte) 0x9A, (byte) 0xDD, (byte) 0xFD, (byte) 0xCB,
				(byte) 0xB3, (byte) 0x96, (byte) 0x60, (byte) 0x4D,
				(byte) 0x24, (byte) 0xE5, (byte) 0x05, (byte) 0xA2,
				(byte) 0xD0, (byte) 0xB5, (byte) 0xDD, (byte) 0x03,
				(byte) 0x84, (byte) 0xFB, (byte) 0x00, (byte) 0x02,
				(byte) 0xA7, (byte) 0xA1, (byte) 0xEB, (byte) 0x39,
				(byte) 0xBC, (byte) 0x8A, (byte) 0x11, (byte) 0x33,
				(byte) 0x9C, (byte) 0x7A, (byte) 0x94, (byte) 0x33,
				(byte) 0xA9, (byte) 0x48, (byte) 0x33, (byte) 0x77,
				(byte) 0x61, (byte) 0xBE, (byte) 0x73, (byte) 0xBC,
				(byte) 0x49, (byte) 0x7B, (byte) 0x8E, (byte) 0x58,
				(byte) 0x73, (byte) 0x6D, (byte) 0xA4, (byte) 0x63,
				(byte) 0x65, (byte) 0x38, (byte) 0xAD, (byte) 0x28,
				(byte) 0x2D, (byte) 0x3C, (byte) 0xD3, (byte) 0xDB };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x1B, (byte) 0x79, (byte) 0x5C, (byte) 0xBB,
				(byte) 0x08, (byte) 0x30, (byte) 0xE2, (byte) 0xC5,
				(byte) 0x23, (byte) 0x17, (byte) 0x04, (byte) 0xFA,
				(byte) 0x57, (byte) 0x42, (byte) 0x4D, (byte) 0x1C,
				(byte) 0x4E, (byte) 0x50, (byte) 0xF3, (byte) 0xE4 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Test 1024 bits Test Key E4

	public static EMVCAPK get_capk_emvtest_tE4() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99, (byte) 0x99 };
		byte KeyID = (byte) 0xE4;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xCB, (byte) 0xF2, (byte) 0xE4, (byte) 0x0F,
				(byte) 0x08, (byte) 0x36, (byte) 0xC9, (byte) 0xA5,
				(byte) 0xE3, (byte) 0x90, (byte) 0xA3, (byte) 0x7B,
				(byte) 0xE3, (byte) 0xB8, (byte) 0x09, (byte) 0xBD,
				(byte) 0xF5, (byte) 0xD7, (byte) 0x40, (byte) 0xCB,
				(byte) 0x1D, (byte) 0xA3, (byte) 0x8C, (byte) 0xFC,
				(byte) 0x05, (byte) 0xD5, (byte) 0xF8, (byte) 0xD6,
				(byte) 0xB7, (byte) 0x74, (byte) 0x5B, (byte) 0x5E,
				(byte) 0x9A, (byte) 0x3F, (byte) 0xA6, (byte) 0x96,
				(byte) 0x1E, (byte) 0x55, (byte) 0xFF, (byte) 0x20,
				(byte) 0x41, (byte) 0x21, (byte) 0x08, (byte) 0x52,
				(byte) 0x5E, (byte) 0x66, (byte) 0xB9, (byte) 0x70,
				(byte) 0xF9, (byte) 0x02, (byte) 0xF7, (byte) 0xFF,
				(byte) 0x43, (byte) 0x05, (byte) 0xDD, (byte) 0x83,
				(byte) 0x2C, (byte) 0xD0, (byte) 0x76, (byte) 0x3E,
				(byte) 0x3A, (byte) 0xA8, (byte) 0xB8, (byte) 0x17,
				(byte) 0x3F, (byte) 0x84, (byte) 0x77, (byte) 0x71,
				(byte) 0x00, (byte) 0xB1, (byte) 0x04, (byte) 0x7B,
				(byte) 0xD1, (byte) 0xD7, (byte) 0x44, (byte) 0x50,
				(byte) 0x93, (byte) 0x12, (byte) 0xA0, (byte) 0x93,
				(byte) 0x2E, (byte) 0xD2, (byte) 0x5F, (byte) 0xED,
				(byte) 0x52, (byte) 0xA9, (byte) 0x59, (byte) 0x43,
				(byte) 0x07, (byte) 0x68, (byte) 0xCC, (byte) 0xD9,
				(byte) 0x02, (byte) 0xFD, (byte) 0x8C, (byte) 0x8A,
				(byte) 0xD9, (byte) 0x12, (byte) 0x3E, (byte) 0x6A,
				(byte) 0xDD, (byte) 0xB3, (byte) 0xF3, (byte) 0x4B,
				(byte) 0x92, (byte) 0xE7, (byte) 0x92, (byte) 0x4D,
				(byte) 0x72, (byte) 0x9C, (byte) 0xB6, (byte) 0x47,
				(byte) 0x35, (byte) 0x33, (byte) 0xAE, (byte) 0x2B,
				(byte) 0x2B, (byte) 0x55, (byte) 0xBF, (byte) 0x0E,
				(byte) 0x44, (byte) 0x96, (byte) 0x4F, (byte) 0xDE,
				(byte) 0xA8, (byte) 0x44, (byte) 0x01, (byte) 0x17 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xAC, (byte) 0x8D, (byte) 0xA3, (byte) 0xE1,
				(byte) 0x23, (byte) 0x24, (byte) 0xD7, (byte) 0x19,
				(byte) 0xC1, (byte) 0xD5, (byte) 0xC9, (byte) 0xE6,
				(byte) 0xE8, (byte) 0x58, (byte) 0x01, (byte) 0x57,
				(byte) 0x19, (byte) 0x6E, (byte) 0xFE, (byte) 0xB9 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Test 1024 bits Test Key E5

	public static EMVCAPK get_capk_emvtest_tE5() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99, (byte) 0x99 };
		byte KeyID = (byte) 0xE5;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xD4, (byte) 0xFD, (byte) 0xAE, (byte) 0x94,
				(byte) 0xDE, (byte) 0xDB, (byte) 0xEC, (byte) 0xC6,
				(byte) 0xD2, (byte) 0x0D, (byte) 0x38, (byte) 0xB0,
				(byte) 0x1E, (byte) 0x91, (byte) 0x82, (byte) 0x6D,
				(byte) 0xC6, (byte) 0x95, (byte) 0x43, (byte) 0x38,
				(byte) 0x37, (byte) 0x99, (byte) 0x17, (byte) 0xB2,
				(byte) 0xBB, (byte) 0x8A, (byte) 0x6B, (byte) 0x36,
				(byte) 0xB5, (byte) 0xD3, (byte) 0xB0, (byte) 0xC5,
				(byte) 0xED, (byte) 0xA6, (byte) 0x0B, (byte) 0x33,
				(byte) 0x74, (byte) 0x48, (byte) 0xBA, (byte) 0xFF,
				(byte) 0xEB, (byte) 0xCC, (byte) 0x3A, (byte) 0xBD,
				(byte) 0xBA, (byte) 0x86, (byte) 0x9E, (byte) 0x8D,
				(byte) 0xAD, (byte) 0xEC, (byte) 0x6C, (byte) 0x87,
				(byte) 0x01, (byte) 0x10, (byte) 0xC4, (byte) 0x2F,
				(byte) 0x5A, (byte) 0xAB, (byte) 0x90, (byte) 0xA1,
				(byte) 0x8F, (byte) 0x4F, (byte) 0x86, (byte) 0x7F,
				(byte) 0x72, (byte) 0xE3, (byte) 0x38, (byte) 0x6F,
				(byte) 0xFC, (byte) 0x7E, (byte) 0x67, (byte) 0xE7,
				(byte) 0xFF, (byte) 0x94, (byte) 0xEB, (byte) 0xA0,
				(byte) 0x79, (byte) 0xE5, (byte) 0x31, (byte) 0xB3,
				(byte) 0xCF, (byte) 0x32, (byte) 0x95, (byte) 0x17,
				(byte) 0xE8, (byte) 0x1C, (byte) 0x5D, (byte) 0xD9,
				(byte) 0xB3, (byte) 0xDC, (byte) 0x65, (byte) 0xDB,
				(byte) 0x5F, (byte) 0x90, (byte) 0x43, (byte) 0x19,
				(byte) 0x0B, (byte) 0xE0, (byte) 0xBE, (byte) 0x89,
				(byte) 0x7E, (byte) 0x5F, (byte) 0xE4, (byte) 0x8A,
				(byte) 0xDF, (byte) 0x5D, (byte) 0x3B, (byte) 0xFA,
				(byte) 0x05, (byte) 0x85, (byte) 0xE0, (byte) 0x76,
				(byte) 0xE5, (byte) 0x54, (byte) 0xF2, (byte) 0x6E,
				(byte) 0xC6, (byte) 0x98, (byte) 0x14, (byte) 0x79,
				(byte) 0x7F, (byte) 0x15, (byte) 0x66, (byte) 0x9F,
				(byte) 0x4A, (byte) 0x25, (byte) 0x5C, (byte) 0x13 };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xAD, (byte) 0xA2, (byte) 0x34, (byte) 0x9A,
				(byte) 0xFD, (byte) 0x11, (byte) 0x8D, (byte) 0x55,
				(byte) 0xAF, (byte) 0x78, (byte) 0x2D, (byte) 0x37,
				(byte) 0xB6, (byte) 0x46, (byte) 0x51, (byte) 0xAF,
				(byte) 0x1C, (byte) 0xA6, (byte) 0x1E, (byte) 0xE5 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Test 1024 bits Test Key E6

	public static EMVCAPK get_capk_emvtest_tE6() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x99, (byte) 0x99 };
		byte KeyID = (byte) 0xE6;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xEB, (byte) 0xF9, (byte) 0xFA, (byte) 0xEC,
				(byte) 0xC3, (byte) 0xE5, (byte) 0xC3, (byte) 0x15,
				(byte) 0x70, (byte) 0x96, (byte) 0x94, (byte) 0x66,
				(byte) 0x47, (byte) 0x75, (byte) 0xD3, (byte) 0xFB,
				(byte) 0xDA, (byte) 0x5A, (byte) 0x50, (byte) 0x4D,
				(byte) 0x89, (byte) 0x34, (byte) 0x4D, (byte) 0xD9,
				(byte) 0x20, (byte) 0xC5, (byte) 0x56, (byte) 0x96,
				(byte) 0xE8, (byte) 0x91, (byte) 0xD9, (byte) 0xAB,
				(byte) 0x62, (byte) 0x25, (byte) 0x98, (byte) 0xA9,
				(byte) 0xD6, (byte) 0xAB, (byte) 0x8F, (byte) 0xBF,
				(byte) 0x35, (byte) 0xE4, (byte) 0x59, (byte) 0x9C,
				(byte) 0xAB, (byte) 0x7E, (byte) 0xB2, (byte) 0x2F,
				(byte) 0x95, (byte) 0x69, (byte) 0x92, (byte) 0xF8,
				(byte) 0xAB, (byte) 0x2E, (byte) 0x65, (byte) 0x35,
				(byte) 0xDE, (byte) 0xCB, (byte) 0x6B, (byte) 0x57,
				(byte) 0x6F, (byte) 0xA0, (byte) 0x67, (byte) 0x5F,
				(byte) 0x97, (byte) 0xC2, (byte) 0x3D, (byte) 0xD4,
				(byte) 0xC3, (byte) 0x74, (byte) 0xA6, (byte) 0x6E,
				(byte) 0x6A, (byte) 0xF4, (byte) 0x19, (byte) 0xC9,
				(byte) 0xD2, (byte) 0x04, (byte) 0xD0, (byte) 0xB9,
				(byte) 0xF9, (byte) 0x3C, (byte) 0x08, (byte) 0xD7,
				(byte) 0x89, (byte) 0xD6, (byte) 0x38, (byte) 0x05,
				(byte) 0x66, (byte) 0x0F, (byte) 0xBB, (byte) 0x62,
				(byte) 0x9D, (byte) 0xF1, (byte) 0xB4, (byte) 0x88,
				(byte) 0xCF, (byte) 0xA1, (byte) 0xD7, (byte) 0xA1,
				(byte) 0x3E, (byte) 0x9B, (byte) 0x72, (byte) 0x94,
				(byte) 0x37, (byte) 0xEE, (byte) 0xAF, (byte) 0xE7,
				(byte) 0x18, (byte) 0xEF, (byte) 0xA8, (byte) 0x59,
				(byte) 0x34, (byte) 0x8B, (byte) 0xA0, (byte) 0xD7,
				(byte) 0x68, (byte) 0x12, (byte) 0xA9, (byte) 0x9F,
				(byte) 0x31, (byte) 0xCD, (byte) 0x36, (byte) 0x4F,
				(byte) 0x2A, (byte) 0x4F, (byte) 0xD4, (byte) 0x2F };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x8A, (byte) 0xA4, (byte) 0xF4, (byte) 0x64,
				(byte) 0x8F, (byte) 0x0D, (byte) 0xC6, (byte) 0x2A,
				(byte) 0xB6, (byte) 0xAE, (byte) 0xD9, (byte) 0x25,
				(byte) 0x54, (byte) 0xAD, (byte) 0x1A, (byte) 0x83,
				(byte) 0x1B, (byte) 0xAF, (byte) 0xC9, (byte) 0xE4 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Master 1152 bits Test Key FE

	public static EMVCAPK get_capk_mastertest_tFE() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xFE;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xE7, (byte) 0x63, (byte) 0x17, (byte) 0x96,
				(byte) 0x51, (byte) 0x75, (byte) 0xA0, (byte) 0x8B,
				(byte) 0xEE, (byte) 0x51, (byte) 0x0F, (byte) 0x58,
				(byte) 0x83, (byte) 0x0E, (byte) 0x87, (byte) 0xB2,
				(byte) 0x62, (byte) 0xC7, (byte) 0x0D, (byte) 0x52,
				(byte) 0x98, (byte) 0x03, (byte) 0x24, (byte) 0x5F,
				(byte) 0xA8, (byte) 0xB8, (byte) 0x8E, (byte) 0x0C,
				(byte) 0x75, (byte) 0x35, (byte) 0x62, (byte) 0xDE,
				(byte) 0x7A, (byte) 0xEB, (byte) 0x5A, (byte) 0x9E,
				(byte) 0x3E, (byte) 0x6C, (byte) 0x1A, (byte) 0x98,
				(byte) 0xE9, (byte) 0x4D, (byte) 0x8D, (byte) 0xB7,
				(byte) 0xC3, (byte) 0x14, (byte) 0x07, (byte) 0xDA,
				(byte) 0xC5, (byte) 0xD0, (byte) 0x71, (byte) 0xE0,
				(byte) 0x6B, (byte) 0x80, (byte) 0xB0, (byte) 0x9E,
				(byte) 0x14, (byte) 0x6F, (byte) 0x22, (byte) 0xDB,
				(byte) 0x85, (byte) 0xF1, (byte) 0xD7, (byte) 0x2D,
				(byte) 0x1E, (byte) 0xA1, (byte) 0x8D, (byte) 0x22,
				(byte) 0x60, (byte) 0x00, (byte) 0x32, (byte) 0xC6,
				(byte) 0xDD, (byte) 0x40, (byte) 0xE3, (byte) 0x71,
				(byte) 0x4D, (byte) 0x5A, (byte) 0xDA, (byte) 0x7D,
				(byte) 0xE9, (byte) 0xD7, (byte) 0xD0, (byte) 0x1E,
				(byte) 0x88, (byte) 0x39, (byte) 0x1F, (byte) 0x89,
				(byte) 0x31, (byte) 0x56, (byte) 0xD6, (byte) 0xF4,
				(byte) 0xBF, (byte) 0x13, (byte) 0xE9, (byte) 0x06,
				(byte) 0x35, (byte) 0x59, (byte) 0xDA, (byte) 0x07,
				(byte) 0x86, (byte) 0xDE, (byte) 0x9B, (byte) 0xDE,
				(byte) 0x6B, (byte) 0x1C, (byte) 0x9B, (byte) 0x0B,
				(byte) 0xB9, (byte) 0x68, (byte) 0xED, (byte) 0xDE,
				(byte) 0x07, (byte) 0x14, (byte) 0x5A, (byte) 0xBF,
				(byte) 0x87, (byte) 0x7B, (byte) 0x93, (byte) 0x16,
				(byte) 0x82, (byte) 0xCC, (byte) 0xB1, (byte) 0xFB,
				(byte) 0x80, (byte) 0x07, (byte) 0x28, (byte) 0x72,
				(byte) 0x4D, (byte) 0x04, (byte) 0xAF, (byte) 0x24,
				(byte) 0x1E, (byte) 0x28, (byte) 0x27, (byte) 0xE0,
				(byte) 0xFA, (byte) 0x1F, (byte) 0x62, (byte) 0x59,
				(byte) 0x19, (byte) 0x14, (byte) 0xFF, (byte) 0x25 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x85, (byte) 0x35, (byte) 0xF1, (byte) 0x4C,
				(byte) 0xBD, (byte) 0x6B, (byte) 0x4A, (byte) 0xE5,
				(byte) 0x02, (byte) 0x86, (byte) 0x18, (byte) 0xFA,
				(byte) 0xB5, (byte) 0xAC, (byte) 0x11, (byte) 0x06,
				(byte) 0x54, (byte) 0x9F, (byte) 0xD0, (byte) 0x3C };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Master 1984 bits Test Key FC

	public static EMVCAPK get_capk_mastertest_tFC() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xFC;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xB3, (byte) 0x29, (byte) 0x6C, (byte) 0x91,
				(byte) 0xF4, (byte) 0x79, (byte) 0x5B, (byte) 0xD9,
				(byte) 0x71, (byte) 0x12, (byte) 0x60, (byte) 0x69,
				(byte) 0x03, (byte) 0x40, (byte) 0x7B, (byte) 0x6E,
				(byte) 0xFF, (byte) 0x3A, (byte) 0xB3, (byte) 0x92,
				(byte) 0x46, (byte) 0xE9, (byte) 0x10, (byte) 0x95,
				(byte) 0xE5, (byte) 0x1D, (byte) 0x17, (byte) 0x86,
				(byte) 0x7D, (byte) 0xA4, (byte) 0xAD, (byte) 0xE5,
				(byte) 0x9A, (byte) 0x48, (byte) 0xBE, (byte) 0x2F,
				(byte) 0xE9, (byte) 0xB5, (byte) 0x27, (byte) 0x10,
				(byte) 0x28, (byte) 0x3D, (byte) 0x3D, (byte) 0x32,
				(byte) 0x26, (byte) 0x0E, (byte) 0x2C, (byte) 0x7D,
				(byte) 0x24, (byte) 0x72, (byte) 0x14, (byte) 0xC5,
				(byte) 0x7D, (byte) 0x46, (byte) 0xAA, (byte) 0x64,
				(byte) 0x65, (byte) 0xE4, (byte) 0x7E, (byte) 0x0A,
				(byte) 0x4B, (byte) 0x3F, (byte) 0xFA, (byte) 0xAD,
				(byte) 0x8A, (byte) 0x7F, (byte) 0x6A, (byte) 0x19,
				(byte) 0x07, (byte) 0x55, (byte) 0xBC, (byte) 0xCF,
				(byte) 0xE3, (byte) 0xF3, (byte) 0xFB, (byte) 0x39,
				(byte) 0x89, (byte) 0xA9, (byte) 0xF6, (byte) 0xB1,
				(byte) 0xC9, (byte) 0xE1, (byte) 0x84, (byte) 0x5B,
				(byte) 0xCC, (byte) 0xCA, (byte) 0xD6, (byte) 0xF2,
				(byte) 0x0B, (byte) 0x1D, (byte) 0xAC, (byte) 0x60,
				(byte) 0x33, (byte) 0x60, (byte) 0x02, (byte) 0x34,
				(byte) 0xE8, (byte) 0x1D, (byte) 0xAC, (byte) 0x41,
				(byte) 0x53, (byte) 0x21, (byte) 0x2B, (byte) 0x0F,
				(byte) 0x76, (byte) 0x0C, (byte) 0x23, (byte) 0x09,
				(byte) 0x91, (byte) 0x92, (byte) 0xAA, (byte) 0x6C,
				(byte) 0x4C, (byte) 0x90, (byte) 0x83, (byte) 0xBE,
				(byte) 0xFF, (byte) 0xD9, (byte) 0xA7, (byte) 0x9D,
				(byte) 0x2A, (byte) 0x27, (byte) 0xB0, (byte) 0x8F,
				(byte) 0xEC, (byte) 0xC8, (byte) 0xE5, (byte) 0xD4,
				(byte) 0x37, (byte) 0xD6, (byte) 0xC6, (byte) 0x85,
				(byte) 0x50, (byte) 0xA8, (byte) 0x39, (byte) 0xB1,
				(byte) 0x29, (byte) 0x41, (byte) 0x51, (byte) 0xDA,
				(byte) 0xBA, (byte) 0x9D, (byte) 0x9C, (byte) 0xB2,
				(byte) 0xF1, (byte) 0x60, (byte) 0xF6, (byte) 0x0F,
				(byte) 0x74, (byte) 0x92, (byte) 0x89, (byte) 0xF5,
				(byte) 0x00, (byte) 0xC8, (byte) 0xC7, (byte) 0xF3,
				(byte) 0x34, (byte) 0xBD, (byte) 0x20, (byte) 0xEB,
				(byte) 0xAC, (byte) 0x4A, (byte) 0xB1, (byte) 0x09,
				(byte) 0xCF, (byte) 0x3C, (byte) 0x18, (byte) 0x2F,
				(byte) 0x1B, (byte) 0x78, (byte) 0x1C, (byte) 0x7C,
				(byte) 0x09, (byte) 0x7A, (byte) 0x79, (byte) 0x03,
				(byte) 0x53, (byte) 0x07, (byte) 0x46, (byte) 0xC4,
				(byte) 0x49, (byte) 0xB9, (byte) 0x9E, (byte) 0x39,
				(byte) 0xE4, (byte) 0xDB, (byte) 0x64, (byte) 0x93,
				(byte) 0xDD, (byte) 0x2A, (byte) 0x02, (byte) 0xE3,
				(byte) 0x7C, (byte) 0x62, (byte) 0xAE, (byte) 0x8B,
				(byte) 0xC9, (byte) 0xA7, (byte) 0x47, (byte) 0x0E,
				(byte) 0xCC, (byte) 0xCF, (byte) 0x8D, (byte) 0xC0,
				(byte) 0x6A, (byte) 0x18, (byte) 0xC3, (byte) 0x3C,
				(byte) 0xD2, (byte) 0x4B, (byte) 0x30, (byte) 0xD5,
				(byte) 0x6F, (byte) 0x25, (byte) 0xD2, (byte) 0x75,
				(byte) 0x5C, (byte) 0xE8, (byte) 0x2A, (byte) 0xA4,
				(byte) 0xDE, (byte) 0x4D, (byte) 0x2E, (byte) 0xAE,
				(byte) 0xC0, (byte) 0x77, (byte) 0x50, (byte) 0xA0,
				(byte) 0x3D, (byte) 0xB7, (byte) 0x5E, (byte) 0xBD,
				(byte) 0x0D, (byte) 0x8E, (byte) 0xBC, (byte) 0x9F,
				(byte) 0x2A, (byte) 0x1D, (byte) 0x85, (byte) 0xA0,
				(byte) 0xD2, (byte) 0x52, (byte) 0xEF, (byte) 0xF4,
				(byte) 0x03, (byte) 0x29, (byte) 0xBE, (byte) 0x05 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xDB, (byte) 0x50, (byte) 0xB5, (byte) 0xB0,
				(byte) 0xD9, (byte) 0x66, (byte) 0x30, (byte) 0x07,
				(byte) 0x60, (byte) 0xB1, (byte) 0xE4, (byte) 0x21,
				(byte) 0x25, (byte) 0x27, (byte) 0x7B, (byte) 0xA8,
				(byte) 0x33, (byte) 0xB6, (byte) 0x52, (byte) 0x34 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Master 1984 bits Test Key FA

	public static EMVCAPK get_capk_mastertest_tFA() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xFA;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xA4, (byte) 0x20, (byte) 0x3E, (byte) 0x0C,
				(byte) 0x7B, (byte) 0xEB, (byte) 0x27, (byte) 0x09,
				(byte) 0x7B, (byte) 0x63, (byte) 0xC1, (byte) 0x03,
				(byte) 0xC1, (byte) 0x9F, (byte) 0xDC, (byte) 0xDA,
				(byte) 0x67, (byte) 0x1A, (byte) 0xEA, (byte) 0x7F,
				(byte) 0x81, (byte) 0x30, (byte) 0x65, (byte) 0x75,
				(byte) 0x6F, (byte) 0x3B, (byte) 0x9B, (byte) 0x81,
				(byte) 0x81, (byte) 0x0C, (byte) 0xBD, (byte) 0x4B,
				(byte) 0xC4, (byte) 0xDE, (byte) 0xC5, (byte) 0x48,
				(byte) 0xFB, (byte) 0xF1, (byte) 0xF3, (byte) 0xCD,
				(byte) 0xAE, (byte) 0x51, (byte) 0xF8, (byte) 0x47,
				(byte) 0x23, (byte) 0x5C, (byte) 0xBF, (byte) 0x2C,
				(byte) 0x8B, (byte) 0xAD, (byte) 0xD8, (byte) 0xAC,
				(byte) 0xA7, (byte) 0xC9, (byte) 0x3B, (byte) 0xEA,
				(byte) 0x3D, (byte) 0x44, (byte) 0xE8, (byte) 0x0E,
				(byte) 0xD6, (byte) 0xA7, (byte) 0xB7, (byte) 0x0E,
				(byte) 0x29, (byte) 0x62, (byte) 0x26, (byte) 0x19,
				(byte) 0xDB, (byte) 0x42, (byte) 0x0A, (byte) 0xCC,
				(byte) 0xCE, (byte) 0x07, (byte) 0xE1, (byte) 0xDD,
				(byte) 0x4E, (byte) 0x6C, (byte) 0x35, (byte) 0x4F,
				(byte) 0x35, (byte) 0x9F, (byte) 0xBD, (byte) 0xC9,
				(byte) 0xC5, (byte) 0xB7, (byte) 0x08, (byte) 0x13,
				(byte) 0x92, (byte) 0x6F, (byte) 0x77, (byte) 0xD8,
				(byte) 0x27, (byte) 0xE5, (byte) 0x2B, (byte) 0x19,
				(byte) 0xDA, (byte) 0xF0, (byte) 0x9B, (byte) 0xFA,
				(byte) 0xE5, (byte) 0x27, (byte) 0x44, (byte) 0x38,
				(byte) 0xBB, (byte) 0x8F, (byte) 0x61, (byte) 0xD1,
				(byte) 0x77, (byte) 0x53, (byte) 0xC9, (byte) 0xEC,
				(byte) 0x0A, (byte) 0x8E, (byte) 0xFA, (byte) 0x3B,
				(byte) 0x7E, (byte) 0x46, (byte) 0xF0, (byte) 0x26,
				(byte) 0x92, (byte) 0x16, (byte) 0x0D, (byte) 0x26,
				(byte) 0x53, (byte) 0xCD, (byte) 0xBC, (byte) 0xC7,
				(byte) 0x1B, (byte) 0x7D, (byte) 0x48, (byte) 0xBD,
				(byte) 0x37, (byte) 0x96, (byte) 0x83, (byte) 0x16,
				(byte) 0xEB, (byte) 0x44, (byte) 0x4F, (byte) 0x65,
				(byte) 0x04, (byte) 0xB9, (byte) 0x42, (byte) 0x1B,
				(byte) 0x7D, (byte) 0xD3, (byte) 0x03, (byte) 0x5A,
				(byte) 0x2C, (byte) 0x11, (byte) 0x7D, (byte) 0x8B,
				(byte) 0x1F, (byte) 0x76, (byte) 0xA8, (byte) 0x97,
				(byte) 0x54, (byte) 0x40, (byte) 0xDA, (byte) 0x95,
				(byte) 0x63, (byte) 0x61, (byte) 0x81, (byte) 0x02,
				(byte) 0x39, (byte) 0x7B, (byte) 0x88, (byte) 0x1C,
				(byte) 0xEF, (byte) 0x8A, (byte) 0xDA, (byte) 0x76,
				(byte) 0x89, (byte) 0xED, (byte) 0xFA, (byte) 0xCE,
				(byte) 0x32, (byte) 0x48, (byte) 0x2A, (byte) 0x2D,
				(byte) 0xFF, (byte) 0xED, (byte) 0x65, (byte) 0x6E,
				(byte) 0x7F, (byte) 0x95, (byte) 0x1D, (byte) 0xB8,
				(byte) 0x41, (byte) 0xDA, (byte) 0x78, (byte) 0x36,
				(byte) 0x8C, (byte) 0x62, (byte) 0x93, (byte) 0xBF,
				(byte) 0xC1, (byte) 0x05, (byte) 0x3A, (byte) 0x86,
				(byte) 0xA8, (byte) 0x45, (byte) 0xBF, (byte) 0xA6,
				(byte) 0x57, (byte) 0x8E, (byte) 0x4B, (byte) 0x69,
				(byte) 0xF1, (byte) 0x00, (byte) 0xB4, (byte) 0x2B,
				(byte) 0x55, (byte) 0x8F, (byte) 0xDE, (byte) 0x1A,
				(byte) 0xEC, (byte) 0xEC, (byte) 0x6D, (byte) 0x25,
				(byte) 0x07, (byte) 0x41, (byte) 0xBC, (byte) 0x78,
				(byte) 0x3A, (byte) 0xA8, (byte) 0xA6, (byte) 0x8A,
				(byte) 0x42, (byte) 0x61, (byte) 0xE7, (byte) 0xBB,
				(byte) 0x92, (byte) 0x46, (byte) 0xB1, (byte) 0x05,
				(byte) 0x87, (byte) 0xA4, (byte) 0x98, (byte) 0xD6,
				(byte) 0x8D, (byte) 0xD9, (byte) 0x55, (byte) 0xCE,
				(byte) 0x8B, (byte) 0x2B, (byte) 0x24, (byte) 0x33 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x7F, (byte) 0x5A, (byte) 0xCB, (byte) 0xB9,
				(byte) 0x6B, (byte) 0x58, (byte) 0x9F, (byte) 0x74,
				(byte) 0xCB, (byte) 0x95, (byte) 0x9E, (byte) 0xD1,
				(byte) 0xC3, (byte) 0x5B, (byte) 0xDB, (byte) 0x96,
				(byte) 0x5C, (byte) 0x3F, (byte) 0x41, (byte) 0x06 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Master 1152 bits Test Key FB

	public static EMVCAPK get_capk_mastertest_tFB() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xFB;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0x9B, (byte) 0x17, (byte) 0x06, (byte) 0x03,
				(byte) 0xA4, (byte) 0x89, (byte) 0xC7, (byte) 0x54,
				(byte) 0x6C, (byte) 0x45, (byte) 0xDA, (byte) 0x57,
				(byte) 0xB8, (byte) 0xFF, (byte) 0xD1, (byte) 0xDB,
				(byte) 0x20, (byte) 0x61, (byte) 0x24, (byte) 0x0F,
				(byte) 0x0E, (byte) 0x8C, (byte) 0x6D, (byte) 0x1F,
				(byte) 0x9A, (byte) 0xBD, (byte) 0xC6, (byte) 0xB2,
				(byte) 0x65, (byte) 0xAA, (byte) 0x89, (byte) 0x11,
				(byte) 0x91, (byte) 0x5C, (byte) 0x1A, (byte) 0x4E,
				(byte) 0xAB, (byte) 0xD8, (byte) 0xD0, (byte) 0xED,
				(byte) 0x47, (byte) 0x55, (byte) 0xD1, (byte) 0xB9,
				(byte) 0x02, (byte) 0xBA, (byte) 0x06, (byte) 0xFE,
				(byte) 0x5A, (byte) 0x64, (byte) 0x5B, (byte) 0x78,
				(byte) 0x6C, (byte) 0xD2, (byte) 0x41, (byte) 0x29,
				(byte) 0x55, (byte) 0x17, (byte) 0xD4, (byte) 0x4E,
				(byte) 0xF1, (byte) 0xA7, (byte) 0xC2, (byte) 0x5D,
				(byte) 0x75, (byte) 0xAF, (byte) 0xE0, (byte) 0xEB,
				(byte) 0x28, (byte) 0x06, (byte) 0x6E, (byte) 0x4D,
				(byte) 0x69, (byte) 0xFE, (byte) 0xE7, (byte) 0xAB,
				(byte) 0xAF, (byte) 0xDD, (byte) 0x5E, (byte) 0xEB,
				(byte) 0x23, (byte) 0x0F, (byte) 0x14, (byte) 0xE4,
				(byte) 0x02, (byte) 0xC9, (byte) 0x84, (byte) 0x08,
				(byte) 0x25, (byte) 0xFA, (byte) 0x77, (byte) 0xEA,
				(byte) 0xD1, (byte) 0x2B, (byte) 0x5F, (byte) 0x1C,
				(byte) 0x54, (byte) 0x94, (byte) 0x70, (byte) 0x1D,
				(byte) 0xE1, (byte) 0x89, (byte) 0x7F, (byte) 0x65,
				(byte) 0xFE, (byte) 0x6B, (byte) 0xF1, (byte) 0x06,
				(byte) 0xD4, (byte) 0x75, (byte) 0x45, (byte) 0xEB,
				(byte) 0xF7, (byte) 0x0C, (byte) 0xE7, (byte) 0xC1,
				(byte) 0x58, (byte) 0x06, (byte) 0x8C, (byte) 0x61,
				(byte) 0xF0, (byte) 0x77, (byte) 0x35, (byte) 0x34,
				(byte) 0xDB, (byte) 0x74, (byte) 0x2A, (byte) 0xB8,
				(byte) 0x3C, (byte) 0x28, (byte) 0x03, (byte) 0x8C,
				(byte) 0x14, (byte) 0x94, (byte) 0xF1, (byte) 0x59,
				(byte) 0x05, (byte) 0xD0, (byte) 0xAD, (byte) 0x17,
				(byte) 0xCF, (byte) 0x1B, (byte) 0xD3, (byte) 0x8D };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xFC, (byte) 0x78, (byte) 0x7D, (byte) 0xB1,
				(byte) 0x38, (byte) 0xF9, (byte) 0x94, (byte) 0xA0,
				(byte) 0xC5, (byte) 0x54, (byte) 0xCC, (byte) 0x67,
				(byte) 0x34, (byte) 0xEB, (byte) 0x3E, (byte) 0x48,
				(byte) 0xA5, (byte) 0x50, (byte) 0x66, (byte) 0xCC };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Master 1152 bits Test Key FD

	public static EMVCAPK get_capk_mastertest_tFD() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xFD;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xC9, (byte) 0x48, (byte) 0x5D, (byte) 0xBE,
				(byte) 0xB5, (byte) 0xE4, (byte) 0x04, (byte) 0x15,
				(byte) 0xD1, (byte) 0xB3, (byte) 0x97, (byte) 0x52,
				(byte) 0x4F, (byte) 0x47, (byte) 0x68, (byte) 0x5F,
				(byte) 0x30, (byte) 0x6C, (byte) 0xFD, (byte) 0xC4,
				(byte) 0x99, (byte) 0xD4, (byte) 0xE2, (byte) 0xE7,
				(byte) 0xD0, (byte) 0xCB, (byte) 0xAF, (byte) 0x22,
				(byte) 0x2C, (byte) 0xFA, (byte) 0x81, (byte) 0x84,
				(byte) 0xBD, (byte) 0x11, (byte) 0x1D, (byte) 0xAE,
				(byte) 0xED, (byte) 0xC9, (byte) 0xCC, (byte) 0x6E,
				(byte) 0xC8, (byte) 0x54, (byte) 0x0C, (byte) 0x3F,
				(byte) 0x72, (byte) 0x71, (byte) 0xEA, (byte) 0x99,
				(byte) 0x90, (byte) 0x11, (byte) 0x9C, (byte) 0xC5,
				(byte) 0xC4, (byte) 0x31, (byte) 0x80, (byte) 0x50,
				(byte) 0x1D, (byte) 0x9F, (byte) 0x45, (byte) 0x25,
				(byte) 0x2D, (byte) 0x68, (byte) 0x35, (byte) 0x05,
				(byte) 0x3F, (byte) 0xAE, (byte) 0x35, (byte) 0x69,
				(byte) 0x6A, (byte) 0xE8, (byte) 0xCD, (byte) 0x67,
				(byte) 0xA3, (byte) 0x25, (byte) 0x64, (byte) 0x74,
				(byte) 0x49, (byte) 0xCF, (byte) 0x5E, (byte) 0x59,
				(byte) 0x4D, (byte) 0xA8, (byte) 0xF6, (byte) 0x27,
				(byte) 0x20, (byte) 0x9F, (byte) 0x7F, (byte) 0x03,
				(byte) 0xAE, (byte) 0x8D, (byte) 0x6D, (byte) 0xFC,
				(byte) 0x0D, (byte) 0xB3, (byte) 0xE7, (byte) 0x9E,
				(byte) 0x28, (byte) 0xE4, (byte) 0x15, (byte) 0xDF,
				(byte) 0x29, (byte) 0xA5, (byte) 0xB5, (byte) 0x7D,
				(byte) 0x68, (byte) 0x14, (byte) 0x85, (byte) 0x6C,
				(byte) 0xC3, (byte) 0x0A, (byte) 0x96, (byte) 0xDA,
				(byte) 0x5B, (byte) 0x88, (byte) 0x90, (byte) 0x36,
				(byte) 0x3E, (byte) 0x50, (byte) 0x7F, (byte) 0xCB,
				(byte) 0x2E, (byte) 0x28, (byte) 0x3D, (byte) 0xA1,
				(byte) 0xEB, (byte) 0xB5, (byte) 0xF1, (byte) 0x8E,
				(byte) 0x8E, (byte) 0x24, (byte) 0x10, (byte) 0x2B,
				(byte) 0x7D, (byte) 0x01, (byte) 0x92, (byte) 0xBB,
				(byte) 0x8E, (byte) 0x35, (byte) 0xA4, (byte) 0xF7,
				(byte) 0xCD, (byte) 0x05, (byte) 0xA4, (byte) 0x35 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xFC, (byte) 0x50, (byte) 0x5E, (byte) 0x4A,
				(byte) 0x83, (byte) 0xFF, (byte) 0x29, (byte) 0xA3,
				(byte) 0xB1, (byte) 0xBD, (byte) 0x28, (byte) 0xDA,
				(byte) 0xBF, (byte) 0x52, (byte) 0x59, (byte) 0x9B,
				(byte) 0x2A, (byte) 0xE9, (byte) 0xCB, (byte) 0x14 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// Master 1152 bits Test Key FF

	public static EMVCAPK get_capk_mastertest_tFF() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04 };
		byte KeyID = (byte) 0xFF;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xF6, (byte) 0x9D, (byte) 0xBB, (byte) 0x5E,
				(byte) 0x15, (byte) 0x98, (byte) 0x3E, (byte) 0xAE,
				(byte) 0x3C, (byte) 0xCF, (byte) 0x31, (byte) 0xCF,
				(byte) 0x4E, (byte) 0x47, (byte) 0x09, (byte) 0x8C,
				(byte) 0x2F, (byte) 0xC1, (byte) 0x6F, (byte) 0x97,
				(byte) 0xA0, (byte) 0xC7, (byte) 0x10, (byte) 0xF8,
				(byte) 0x47, (byte) 0x77, (byte) 0xEF, (byte) 0xA9,
				(byte) 0x96, (byte) 0x22, (byte) 0xD8, (byte) 0x65,
				(byte) 0x02, (byte) 0xB1, (byte) 0x38, (byte) 0x72,
				(byte) 0x8A, (byte) 0xB1, (byte) 0x2E, (byte) 0x34,
				(byte) 0x81, (byte) 0xA8, (byte) 0x4D, (byte) 0x20,
				(byte) 0xE0, (byte) 0x14, (byte) 0xAD, (byte) 0x2D,
				(byte) 0x63, (byte) 0x4D, (byte) 0x28, (byte) 0x36,
				(byte) 0xF2, (byte) 0x7F, (byte) 0x29, (byte) 0x49,
				(byte) 0x24, (byte) 0xB8, (byte) 0x95, (byte) 0xA8,
				(byte) 0x7F, (byte) 0x91, (byte) 0xF8, (byte) 0x1B,
				(byte) 0x81, (byte) 0x69, (byte) 0xD4, (byte) 0xDF,
				(byte) 0xDA, (byte) 0xD8, (byte) 0xD7, (byte) 0xCB,
				(byte) 0xD7, (byte) 0x41, (byte) 0x80, (byte) 0x4C,
				(byte) 0xD6, (byte) 0x1B, (byte) 0x46, (byte) 0x7C,
				(byte) 0x7A, (byte) 0x9A, (byte) 0xCF, (byte) 0xEC,
				(byte) 0xEB, (byte) 0x71, (byte) 0x18, (byte) 0x8C,
				(byte) 0xAA, (byte) 0x73, (byte) 0xA9, (byte) 0x07,
				(byte) 0x54, (byte) 0x76, (byte) 0x99, (byte) 0xD4,
				(byte) 0x5C, (byte) 0x9C, (byte) 0x7D, (byte) 0x20,
				(byte) 0x98, (byte) 0xAC, (byte) 0x29, (byte) 0x66,
				(byte) 0x26, (byte) 0x64, (byte) 0x17, (byte) 0xF6,
				(byte) 0x65, (byte) 0xA4, (byte) 0x6B, (byte) 0xDD,
				(byte) 0x01, (byte) 0x2C, (byte) 0x09, (byte) 0x7D,
				(byte) 0xBD, (byte) 0x33, (byte) 0xD1, (byte) 0xD1,
				(byte) 0x1A, (byte) 0xFF, (byte) 0x6E, (byte) 0xC8,
				(byte) 0xA9, (byte) 0xC0, (byte) 0xAD, (byte) 0x81,
				(byte) 0x4A, (byte) 0x65, (byte) 0xB4, (byte) 0x82,
				(byte) 0x62, (byte) 0xCA, (byte) 0x01, (byte) 0x16,
				(byte) 0x36, (byte) 0x07, (byte) 0x9A, (byte) 0x32,
				(byte) 0x8C, (byte) 0x1A, (byte) 0xAE, (byte) 0xB7 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x43, (byte) 0x9E, (byte) 0xB2, (byte) 0x3D,
				(byte) 0x8A, (byte) 0x71, (byte) 0xB9, (byte) 0x9F,
				(byte) 0x87, (byte) 0x9C, (byte) 0x1A, (byte) 0x1F,
				(byte) 0x17, (byte) 0x65, (byte) 0x25, (byte) 0x2D,
				(byte) 0x84, (byte) 0x0B, (byte) 0x9A, (byte) 0x74 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// JCB 1024 bits Test Key 02

	public static EMVCAPK get_capk_jcbtest_t02() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x65 };
		byte KeyID = (byte) 0x02;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 128;
		byte[] Modul = { (byte) 0xBB, (byte) 0x7F, (byte) 0x51, (byte) 0x98,
				(byte) 0x3F, (byte) 0xD8, (byte) 0x70, (byte) 0x7F,
				(byte) 0xD6, (byte) 0x22, (byte) 0x7C, (byte) 0x23,
				(byte) 0xDE, (byte) 0xF5, (byte) 0xD5, (byte) 0x37,
				(byte) 0x7A, (byte) 0x5A, (byte) 0x73, (byte) 0x7C,
				(byte) 0xEF, (byte) 0x3C, (byte) 0x52, (byte) 0x52,
				(byte) 0xE5, (byte) 0x78, (byte) 0xEF, (byte) 0xE1,
				(byte) 0x36, (byte) 0xDF, (byte) 0x87, (byte) 0xB5,
				(byte) 0x04, (byte) 0x73, (byte) 0xF9, (byte) 0x34,
				(byte) 0x1F, (byte) 0x16, (byte) 0x40, (byte) 0xC8,
				(byte) 0xD2, (byte) 0x58, (byte) 0x03, (byte) 0x4E,
				(byte) 0x14, (byte) 0xC1, (byte) 0x69, (byte) 0x93,
				(byte) 0xFC, (byte) 0xE6, (byte) 0xC6, (byte) 0xB8,
				(byte) 0xC3, (byte) 0xCE, (byte) 0xEB, (byte) 0x65,
				(byte) 0xFC, (byte) 0x8F, (byte) 0xBC, (byte) 0xD8,
				(byte) 0xEB, (byte) 0x77, (byte) 0xB3, (byte) 0xB0,
				(byte) 0x5A, (byte) 0xC7, (byte) 0xC4, (byte) 0xD0,
				(byte) 0x9E, (byte) 0x0F, (byte) 0xA1, (byte) 0xBA,
				(byte) 0x2E, (byte) 0xFE, (byte) 0x87, (byte) 0xD3,
				(byte) 0x18, (byte) 0x4D, (byte) 0xB6, (byte) 0x71,
				(byte) 0x8A, (byte) 0xE4, (byte) 0x1A, (byte) 0x7C,
				(byte) 0xAD, (byte) 0x89, (byte) 0xB8, (byte) 0xDC,
				(byte) 0xE0, (byte) 0xFE, (byte) 0x80, (byte) 0xCE,
				(byte) 0xB5, (byte) 0x23, (byte) 0xD5, (byte) 0xD6,
				(byte) 0x47, (byte) 0xF9, (byte) 0xDB, (byte) 0x58,
				(byte) 0xA3, (byte) 0x1D, (byte) 0x2E, (byte) 0x71,
				(byte) 0xAC, (byte) 0x67, (byte) 0x7E, (byte) 0x67,
				(byte) 0xFA, (byte) 0x6E, (byte) 0x75, (byte) 0x82,
				(byte) 0x07, (byte) 0x36, (byte) 0xC9, (byte) 0x89,
				(byte) 0x37, (byte) 0x61, (byte) 0xEE, (byte) 0x4A,
				(byte) 0xCD, (byte) 0x11, (byte) 0xF3, (byte) 0x1D,
				(byte) 0xBD, (byte) 0xC3, (byte) 0x49, (byte) 0xEF };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB9, (byte) 0x73, (byte) 0xE9, (byte) 0xF3,
				(byte) 0x77, (byte) 0xB4, (byte) 0x19, (byte) 0xC3,
				(byte) 0x6A, (byte) 0xC9, (byte) 0x69, (byte) 0x6E,
				(byte) 0xD9, (byte) 0x5F, (byte) 0xFB, (byte) 0x25,
				(byte) 0xC8, (byte) 0x02, (byte) 0x06, (byte) 0x87 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// JCB 1984 bits Test Key 03

	public static EMVCAPK get_capk_jcbtest_t03() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x65 };
		byte KeyID = (byte) 0x03;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xC9, (byte) 0xE6, (byte) 0xC1, (byte) 0xF3,
				(byte) 0xC6, (byte) 0x94, (byte) 0x9A, (byte) 0x8A,
				(byte) 0x42, (byte) 0xA9, (byte) 0x1F, (byte) 0x8D,
				(byte) 0x02, (byte) 0x24, (byte) 0x13, (byte) 0x2B,
				(byte) 0x28, (byte) 0x65, (byte) 0xE6, (byte) 0xD9,
				(byte) 0x53, (byte) 0xA5, (byte) 0xB5, (byte) 0xA5,
				(byte) 0x4C, (byte) 0xFF, (byte) 0xB0, (byte) 0x41,
				(byte) 0x24, (byte) 0x39, (byte) 0xD5, (byte) 0x4A,
				(byte) 0xEB, (byte) 0xA7, (byte) 0x9E, (byte) 0x9B,
				(byte) 0x39, (byte) 0x9A, (byte) 0x6C, (byte) 0x10,
				(byte) 0x46, (byte) 0x84, (byte) 0xDF, (byte) 0x3F,
				(byte) 0xB7, (byte) 0x27, (byte) 0xC7, (byte) 0xF5,
				(byte) 0x59, (byte) 0x84, (byte) 0xDB, (byte) 0x7A,
				(byte) 0x45, (byte) 0x0E, (byte) 0x6A, (byte) 0xA9,
				(byte) 0x17, (byte) 0xE1, (byte) 0x10, (byte) 0xA7,
				(byte) 0xF2, (byte) 0x34, (byte) 0x3A, (byte) 0x00,
				(byte) 0x24, (byte) 0xD2, (byte) 0x78, (byte) 0x5D,
				(byte) 0x9E, (byte) 0xBE, (byte) 0x09, (byte) 0xF6,
				(byte) 0x01, (byte) 0xD5, (byte) 0x92, (byte) 0x36,
				(byte) 0x2F, (byte) 0xDB, (byte) 0x23, (byte) 0x77,
				(byte) 0x00, (byte) 0xB5, (byte) 0x67, (byte) 0xBA,
				(byte) 0x14, (byte) 0xBB, (byte) 0xE2, (byte) 0xA6,
				(byte) 0xD3, (byte) 0xD2, (byte) 0x3C, (byte) 0xF1,
				(byte) 0x27, (byte) 0x0B, (byte) 0x3D, (byte) 0xD8,
				(byte) 0x22, (byte) 0xB5, (byte) 0x49, (byte) 0x65,
				(byte) 0x49, (byte) 0xBF, (byte) 0x88, (byte) 0x49,
				(byte) 0x48, (byte) 0xF5, (byte) 0x5A, (byte) 0x0D,
				(byte) 0x30, (byte) 0x83, (byte) 0x48, (byte) 0xC4,
				(byte) 0xB7, (byte) 0x23, (byte) 0xBA, (byte) 0xFB,
				(byte) 0x6A, (byte) 0x7F, (byte) 0x39, (byte) 0x75,
				(byte) 0xAC, (byte) 0x39, (byte) 0x7C, (byte) 0xAD,
				(byte) 0x3C, (byte) 0x5D, (byte) 0x0F, (byte) 0xC2,
				(byte) 0xD1, (byte) 0x78, (byte) 0x71, (byte) 0x6F,
				(byte) 0x5E, (byte) 0x8E, (byte) 0x79, (byte) 0xE7,
				(byte) 0x5B, (byte) 0xEB, (byte) 0x1C, (byte) 0x84,
				(byte) 0xFA, (byte) 0x20, (byte) 0x2F, (byte) 0x80,
				(byte) 0xE6, (byte) 0x80, (byte) 0x69, (byte) 0xA9,
				(byte) 0x84, (byte) 0xE0, (byte) 0x08, (byte) 0x70,
				(byte) 0x6B, (byte) 0x30, (byte) 0xC2, (byte) 0x12,
				(byte) 0x30, (byte) 0x54, (byte) 0x56, (byte) 0x20,
				(byte) 0x15, (byte) 0x40, (byte) 0x78, (byte) 0x79,
				(byte) 0x25, (byte) 0xE8, (byte) 0x6A, (byte) 0x8B,
				(byte) 0x28, (byte) 0xB1, (byte) 0x29, (byte) 0xA1,
				(byte) 0x1A, (byte) 0xF2, (byte) 0x04, (byte) 0xB3,
				(byte) 0x87, (byte) 0xCB, (byte) 0x6E, (byte) 0xE4,
				(byte) 0x3D, (byte) 0xB5, (byte) 0x3D, (byte) 0x15,
				(byte) 0xA4, (byte) 0x6E, (byte) 0x13, (byte) 0x90,
				(byte) 0x1B, (byte) 0xEB, (byte) 0xD5, (byte) 0xCE,
				(byte) 0xCF, (byte) 0x48, (byte) 0x54, (byte) 0x25,
				(byte) 0x1D, (byte) 0x9E, (byte) 0x98, (byte) 0x75,
				(byte) 0xB1, (byte) 0x6E, (byte) 0x82, (byte) 0xAD,
				(byte) 0x1C, (byte) 0x59, (byte) 0x38, (byte) 0xA9,
				(byte) 0x72, (byte) 0x84, (byte) 0x2C, (byte) 0x8F,
				(byte) 0x1A, (byte) 0x42, (byte) 0xEB, (byte) 0xB5,
				(byte) 0xAE, (byte) 0x53, (byte) 0x36, (byte) 0xB0,
				(byte) 0x4F, (byte) 0xF3, (byte) 0xDA, (byte) 0x8B,
				(byte) 0x8D, (byte) 0xFB, (byte) 0xE6, (byte) 0x06,
				(byte) 0xFC, (byte) 0xA8, (byte) 0xB9, (byte) 0x08,
				(byte) 0x4E, (byte) 0xE0, (byte) 0x5B, (byte) 0xF6,
				(byte) 0x79, (byte) 0x50, (byte) 0xBA, (byte) 0x89,
				(byte) 0x89, (byte) 0x7C, (byte) 0xD0, (byte) 0x89,
				(byte) 0xF9, (byte) 0x24, (byte) 0xDB, (byte) 0xCD };
		byte ExponentLen = 1;
		byte[] Exponent = { (byte) 0x03 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x7D, (byte) 0xC4, (byte) 0x35, (byte) 0xDB,
				(byte) 0xDE, (byte) 0x09, (byte) 0x3D, (byte) 0x1F,
				(byte) 0x0A, (byte) 0xD0, (byte) 0xBA, (byte) 0xE0,
				(byte) 0xFE, (byte) 0xA4, (byte) 0xDC, (byte) 0x12,
				(byte) 0x05, (byte) 0x64, (byte) 0x13, (byte) 0xDC };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// AMEX 1152 bits Test Key 60

	public static EMVCAPK get_capk_amextest_t60() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x25 };
		byte KeyID = (byte) 0x60;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xA8, (byte) 0xEE, (byte) 0x74, (byte) 0xED,
				(byte) 0xEF, (byte) 0x3C, (byte) 0x0D, (byte) 0xCA,
				(byte) 0x51, (byte) 0x02, (byte) 0xFF, (byte) 0x9B,
				(byte) 0x57, (byte) 0x07, (byte) 0x97, (byte) 0x5F,
				(byte) 0xF6, (byte) 0x7B, (byte) 0x60, (byte) 0xD6,
				(byte) 0x4B, (byte) 0x5E, (byte) 0x73, (byte) 0x22,
				(byte) 0xD4, (byte) 0x8D, (byte) 0xE9, (byte) 0xD3,
				(byte) 0xBB, (byte) 0x61, (byte) 0x53, (byte) 0xF6,
				(byte) 0x35, (byte) 0x12, (byte) 0xA0, (byte) 0x91,
				(byte) 0xB6, (byte) 0x06, (byte) 0xDD, (byte) 0x8F,
				(byte) 0xD5, (byte) 0xF6, (byte) 0xA1, (byte) 0x45,
				(byte) 0x88, (byte) 0x32, (byte) 0x4E, (byte) 0xF8,
				(byte) 0x82, (byte) 0x78, (byte) 0x44, (byte) 0xC7,
				(byte) 0xFF, (byte) 0xC0, (byte) 0xBA, (byte) 0xB2,
				(byte) 0x33, (byte) 0x4A, (byte) 0xE5, (byte) 0x20,
				(byte) 0x77, (byte) 0x70, (byte) 0x07, (byte) 0x8B,
				(byte) 0x69, (byte) 0xCD, (byte) 0xC3, (byte) 0xF2,
				(byte) 0xC6, (byte) 0x66, (byte) 0xCF, (byte) 0x69,
				(byte) 0xE2, (byte) 0x8E, (byte) 0x16, (byte) 0xE1,
				(byte) 0x81, (byte) 0x67, (byte) 0x14, (byte) 0xC4,
				(byte) 0xDF, (byte) 0x31, (byte) 0x3B, (byte) 0xEF,
				(byte) 0x53, (byte) 0x9C, (byte) 0xC0, (byte) 0x1D,
				(byte) 0xA9, (byte) 0xDD, (byte) 0x2D, (byte) 0x6F,
				(byte) 0x47, (byte) 0xDE, (byte) 0x4F, (byte) 0x24,
				(byte) 0x7C, (byte) 0x50, (byte) 0x0B, (byte) 0x56,
				(byte) 0x1C, (byte) 0x09, (byte) 0x91, (byte) 0x66,
				(byte) 0xAD, (byte) 0x4F, (byte) 0xC1, (byte) 0x6D,
				(byte) 0xF1, (byte) 0x2D, (byte) 0xFB, (byte) 0x68,
				(byte) 0x4A, (byte) 0xC4, (byte) 0x8D, (byte) 0x35,
				(byte) 0xCD, (byte) 0xD2, (byte) 0xC4, (byte) 0x7A,
				(byte) 0x13, (byte) 0xA8, (byte) 0x6A, (byte) 0x5A,
				(byte) 0x16, (byte) 0x23, (byte) 0x06, (byte) 0xF6,
				(byte) 0x4E, (byte) 0x33, (byte) 0xB0, (byte) 0x92,
				(byte) 0xAB, (byte) 0x74, (byte) 0xED, (byte) 0xA7,
				(byte) 0x1A, (byte) 0x40, (byte) 0x91, (byte) 0xD9,
				(byte) 0x6E, (byte) 0x3D, (byte) 0xAA, (byte) 0x47 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x89, (byte) 0x4B, (byte) 0x8D, (byte) 0xF1,
				(byte) 0x9B, (byte) 0xDC, (byte) 0x69, (byte) 0x11,
				(byte) 0x03, (byte) 0xC3, (byte) 0xB9, (byte) 0x39,
				(byte) 0x79, (byte) 0xF5, (byte) 0xEE, (byte) 0x28,
				(byte) 0xC0, (byte) 0x58, (byte) 0x88, (byte) 0xA7 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}// AMEX 1984 bits Test Key 61

	public static EMVCAPK get_capk_amextest_t61() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x25 };
		byte KeyID = (byte) 0x61;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0x86, (byte) 0xC7, (byte) 0x25, (byte) 0x46,
				(byte) 0x65, (byte) 0xE1, (byte) 0x7C, (byte) 0xE6,
				(byte) 0x93, (byte) 0x4D, (byte) 0xF7, (byte) 0xD0,
				(byte) 0x82, (byte) 0x56, (byte) 0x9F, (byte) 0x20,
				(byte) 0x8D, (byte) 0x1C, (byte) 0xC1, (byte) 0xAD,
				(byte) 0x8E, (byte) 0x9F, (byte) 0xB2, (byte) 0xFE,
				(byte) 0x23, (byte) 0xE3, (byte) 0xD7, (byte) 0x46,
				(byte) 0x7B, (byte) 0xE5, (byte) 0x0B, (byte) 0x4F,
				(byte) 0x87, (byte) 0x4F, (byte) 0x90, (byte) 0x6A,
				(byte) 0xDF, (byte) 0x22, (byte) 0x80, (byte) 0xEC,
				(byte) 0x9D, (byte) 0x20, (byte) 0x4F, (byte) 0x6D,
				(byte) 0x10, (byte) 0xC0, (byte) 0x37, (byte) 0xA2,
				(byte) 0x3C, (byte) 0xE5, (byte) 0xFD, (byte) 0x82,
				(byte) 0x83, (byte) 0xC9, (byte) 0xED, (byte) 0x47,
				(byte) 0xD1, (byte) 0xC6, (byte) 0x69, (byte) 0xAB,
				(byte) 0xDD, (byte) 0x7C, (byte) 0x1C, (byte) 0xB3,
				(byte) 0x56, (byte) 0xC7, (byte) 0x0B, (byte) 0xCD,
				(byte) 0xC4, (byte) 0x4E, (byte) 0x5C, (byte) 0x8A,
				(byte) 0xE2, (byte) 0x31, (byte) 0x55, (byte) 0x5F,
				(byte) 0x7B, (byte) 0x78, (byte) 0x6A, (byte) 0xC9,
				(byte) 0xC3, (byte) 0x15, (byte) 0x5B, (byte) 0xCD,
				(byte) 0x51, (byte) 0xF2, (byte) 0x8E, (byte) 0xFB,
				(byte) 0xC1, (byte) 0xB3, (byte) 0x3C, (byte) 0xC8,
				(byte) 0x72, (byte) 0x77, (byte) 0x04, (byte) 0x92,
				(byte) 0x19, (byte) 0xB2, (byte) 0xC8, (byte) 0x90,
				(byte) 0x95, (byte) 0x27, (byte) 0x36, (byte) 0xC4,
				(byte) 0x71, (byte) 0x34, (byte) 0x87, (byte) 0x11,
				(byte) 0x16, (byte) 0x78, (byte) 0x91, (byte) 0x1D,
				(byte) 0x9F, (byte) 0x42, (byte) 0xE0, (byte) 0x80,
				(byte) 0x74, (byte) 0xCF, (byte) 0x52, (byte) 0x4E,
				(byte) 0x65, (byte) 0xD7, (byte) 0x21, (byte) 0xD7,
				(byte) 0x27, (byte) 0xF0, (byte) 0x54, (byte) 0xE6,
				(byte) 0xB5, (byte) 0xE8, (byte) 0x5E, (byte) 0xC9,
				(byte) 0x2B, (byte) 0x3E, (byte) 0xB5, (byte) 0x9F,
				(byte) 0xFE, (byte) 0xE9, (byte) 0x26, (byte) 0xDD,
				(byte) 0x6C, (byte) 0x31, (byte) 0x4D, (byte) 0xF5,
				(byte) 0x55, (byte) 0xC9, (byte) 0x4A, (byte) 0xD4,
				(byte) 0x87, (byte) 0xA9, (byte) 0x9B, (byte) 0x67,
				(byte) 0xCB, (byte) 0x7C, (byte) 0x7B, (byte) 0xA5,
				(byte) 0xE4, (byte) 0x6A, (byte) 0x5B, (byte) 0x81,
				(byte) 0x3D, (byte) 0xDB, (byte) 0x91, (byte) 0x8B,
				(byte) 0x8E, (byte) 0x3E, (byte) 0x04, (byte) 0x23,
				(byte) 0xF4, (byte) 0x30, (byte) 0x2A, (byte) 0x58,
				(byte) 0x68, (byte) 0x6D, (byte) 0x12, (byte) 0x63,
				(byte) 0xC0, (byte) 0xBA, (byte) 0xCA, (byte) 0x9E,
				(byte) 0x82, (byte) 0x06, (byte) 0x8C, (byte) 0x49,
				(byte) 0x32, (byte) 0x89, (byte) 0xE3, (byte) 0xE6,
				(byte) 0x93, (byte) 0x6E, (byte) 0xCA, (byte) 0x5F,
				(byte) 0x9F, (byte) 0x77, (byte) 0xE0, (byte) 0x6B,
				(byte) 0x0D, (byte) 0x6F, (byte) 0xBD, (byte) 0xA7,
				(byte) 0x18, (byte) 0x81, (byte) 0x8B, (byte) 0x83,
				(byte) 0x50, (byte) 0x20, (byte) 0x09, (byte) 0x8C,
				(byte) 0x67, (byte) 0x1C, (byte) 0x5D, (byte) 0xD7,
				(byte) 0xE9, (byte) 0xB8, (byte) 0xE8, (byte) 0xE8,
				(byte) 0x41, (byte) 0xD2, (byte) 0xDF, (byte) 0x32,
				(byte) 0xEE, (byte) 0x94, (byte) 0xA7, (byte) 0xF4,
				(byte) 0x74, (byte) 0x84, (byte) 0x84, (byte) 0xCA,
				(byte) 0x44, (byte) 0x10, (byte) 0x8A, (byte) 0xB2,
				(byte) 0x41, (byte) 0xA5, (byte) 0x26, (byte) 0x3B,
				(byte) 0xA1, (byte) 0xFF, (byte) 0x00, (byte) 0xD5,
				(byte) 0x13, (byte) 0x60, (byte) 0xDD, (byte) 0xDC,
				(byte) 0x74, (byte) 0x9D, (byte) 0x30, (byte) 0xA1 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xCC, (byte) 0xCF, (byte) 0x27, (byte) 0xC4,
				(byte) 0x9C, (byte) 0x15, (byte) 0xB2, (byte) 0xA9,
				(byte) 0x41, (byte) 0x0E, (byte) 0xC6, (byte) 0x08,
				(byte) 0x92, (byte) 0x23, (byte) 0xA3, (byte) 0xA0,
				(byte) 0x1E, (byte) 0xA8, (byte) 0x43, (byte) 0x3E };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_discover_tD0() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x52 };
		byte KeyID = (byte) 0xD0;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xD0, (byte) 0x5C, (byte) 0x2A, (byte) 0x09,
				(byte) 0xD0, (byte) 0x9C, (byte) 0x90, (byte) 0x31,
				(byte) 0x36, (byte) 0x6E, (byte) 0xC0, (byte) 0x92,
				(byte) 0xBC, (byte) 0xAC, (byte) 0x67, (byte) 0xD4,
				(byte) 0xB1, (byte) 0xB4, (byte) 0xF8, (byte) 0x8B,
				(byte) 0x10, (byte) 0x00, (byte) 0x5E, (byte) 0x1F,
				(byte) 0xC4, (byte) 0x5C, (byte) 0x1B, (byte) 0x48,
				(byte) 0x3A, (byte) 0xE7, (byte) 0xEB, (byte) 0x86,
				(byte) 0xFF, (byte) 0x0E, (byte) 0x88, (byte) 0x4A,
				(byte) 0x19, (byte) 0xC0, (byte) 0x59, (byte) 0x5A,
				(byte) 0x6C, (byte) 0x34, (byte) 0xF0, (byte) 0x63,
				(byte) 0x86, (byte) 0xD7, (byte) 0x76, (byte) 0xA2,
				(byte) 0x1D, (byte) 0x62, (byte) 0x0F, (byte) 0xC9,
				(byte) 0xF9, (byte) 0xC4, (byte) 0x98, (byte) 0xAD,
				(byte) 0xCA, (byte) 0x00, (byte) 0xE6, (byte) 0x6D,
				(byte) 0x12, (byte) 0x9B, (byte) 0xCD, (byte) 0xD4,
				(byte) 0x78, (byte) 0x98, (byte) 0x37, (byte) 0xB9,
				(byte) 0x6D, (byte) 0xCC, (byte) 0x7F, (byte) 0x09,
				(byte) 0xDA, (byte) 0x94, (byte) 0xCC, (byte) 0xAC,
				(byte) 0x5A, (byte) 0xC7, (byte) 0xCF, (byte) 0xC0,
				(byte) 0x7F, (byte) 0x46, (byte) 0x00, (byte) 0xDF,
				(byte) 0x78, (byte) 0xE4, (byte) 0x93, (byte) 0xDC,
				(byte) 0x19, (byte) 0x57, (byte) 0xDE, (byte) 0xBA,
				(byte) 0x3F, (byte) 0x48, (byte) 0x38, (byte) 0xA4,
				(byte) 0xB8, (byte) 0xBD, (byte) 0x4C, (byte) 0xEF,
				(byte) 0xE4, (byte) 0xE4, (byte) 0xC6, (byte) 0x11,
				(byte) 0x90, (byte) 0x85, (byte) 0xE5, (byte) 0xBB,
				(byte) 0x21, (byte) 0x07, (byte) 0x73, (byte) 0x41,
				(byte) 0xC5, (byte) 0x68, (byte) 0xA2, (byte) 0x1D,
				(byte) 0x65, (byte) 0xD0, (byte) 0x49, (byte) 0xD6,
				(byte) 0x66, (byte) 0x80, (byte) 0x7C, (byte) 0x39,
				(byte) 0xC4, (byte) 0x01, (byte) 0xCD, (byte) 0xFE,
				(byte) 0xE7, (byte) 0xF7, (byte) 0xF9, (byte) 0x9B,
				(byte) 0x8F, (byte) 0x9C, (byte) 0xB3, (byte) 0x4A,
				(byte) 0x88, (byte) 0x41, (byte) 0xEA, (byte) 0x62,
				(byte) 0xE8, (byte) 0x3E, (byte) 0x8D, (byte) 0x63 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xDE, (byte) 0x1B, (byte) 0xB8, (byte) 0xA3,
				(byte) 0x7C, (byte) 0xDD, (byte) 0xBC, (byte) 0xEA,
				(byte) 0xAB, (byte) 0x04, (byte) 0x3A, (byte) 0xAE,
				(byte) 0xF8, (byte) 0x16, (byte) 0x34, (byte) 0x12,
				(byte) 0x03, (byte) 0x49, (byte) 0x72, (byte) 0x6D };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_discover_tD1() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x52 };
		byte KeyID = (byte) 0xD1;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0xA7, (byte) 0x1A, (byte) 0xF9, (byte) 0x77,
				(byte) 0xC1, (byte) 0x07, (byte) 0x93, (byte) 0x04,
				(byte) 0xD6, (byte) 0xDF, (byte) 0xF3, (byte) 0xF6,
				(byte) 0x65, (byte) 0xAB, (byte) 0x6D, (byte) 0xB3,
				(byte) 0xFB, (byte) 0xDF, (byte) 0xA1, (byte) 0xB1,
				(byte) 0x70, (byte) 0x28, (byte) 0x7A, (byte) 0xC6,
				(byte) 0xD7, (byte) 0xBC, (byte) 0x0A, (byte) 0xFC,
				(byte) 0xB7, (byte) 0xA2, (byte) 0x02, (byte) 0xA4,
				(byte) 0xC8, (byte) 0x15, (byte) 0xE1, (byte) 0xFC,
				(byte) 0x2E, (byte) 0x34, (byte) 0xF7, (byte) 0x5A,
				(byte) 0x05, (byte) 0x25, (byte) 0x64, (byte) 0xEE,
				(byte) 0x21, (byte) 0x48, (byte) 0xA3, (byte) 0x9C,
				(byte) 0xD6, (byte) 0xB0, (byte) 0xF3, (byte) 0x9C,
				(byte) 0xFA, (byte) 0xEF, (byte) 0x95, (byte) 0xF0,
				(byte) 0x29, (byte) 0x4A, (byte) 0x86, (byte) 0xC3,
				(byte) 0x19, (byte) 0x8E, (byte) 0x34, (byte) 0x9F,
				(byte) 0xF8, (byte) 0x2E, (byte) 0xEC, (byte) 0xE6,
				(byte) 0x33, (byte) 0xD5, (byte) 0x0E, (byte) 0x58,
				(byte) 0x60, (byte) 0xA1, (byte) 0x50, (byte) 0x82,
				(byte) 0xB4, (byte) 0xB3, (byte) 0x42, (byte) 0xA9,
				(byte) 0x09, (byte) 0x28, (byte) 0x02, (byte) 0x40,
				(byte) 0x57, (byte) 0xDD, (byte) 0x51, (byte) 0xA2,
				(byte) 0x40, (byte) 0x1D, (byte) 0x78, (byte) 0x1B,
				(byte) 0x67, (byte) 0xAE, (byte) 0x75, (byte) 0x98,
				(byte) 0xD5, (byte) 0xD1, (byte) 0xFF, (byte) 0x26,
				(byte) 0xA4, (byte) 0x41, (byte) 0x97, (byte) 0x0A,
				(byte) 0x19, (byte) 0xA3, (byte) 0xA5, (byte) 0x80,
				(byte) 0x11, (byte) 0xCA, (byte) 0x19, (byte) 0x28,
				(byte) 0x42, (byte) 0x79, (byte) 0xA8, (byte) 0x55,
				(byte) 0x67, (byte) 0xD3, (byte) 0x11, (byte) 0x92,
				(byte) 0x64, (byte) 0x80, (byte) 0x6C, (byte) 0xAF,
				(byte) 0x76, (byte) 0x11, (byte) 0x22, (byte) 0xA7,
				(byte) 0x1F, (byte) 0xC0, (byte) 0x49, (byte) 0x2A,
				(byte) 0xC8, (byte) 0xD8, (byte) 0xD4, (byte) 0x2B,
				(byte) 0x03, (byte) 0x6C, (byte) 0x39, (byte) 0x4F,
				(byte) 0xC4, (byte) 0x94, (byte) 0xE0, (byte) 0x3B,
				(byte) 0x43, (byte) 0x60, (byte) 0x0D, (byte) 0x7E,
				(byte) 0x02, (byte) 0xCB, (byte) 0x52, (byte) 0x67,
				(byte) 0x75, (byte) 0x5A, (byte) 0xCE, (byte) 0x64,
				(byte) 0x43, (byte) 0x7C, (byte) 0xFA, (byte) 0x7B,
				(byte) 0x47, (byte) 0x5A, (byte) 0xD4, (byte) 0x0D,
				(byte) 0xDC, (byte) 0x93, (byte) 0xB8, (byte) 0xC9,
				(byte) 0xBC, (byte) 0xAD, (byte) 0x63, (byte) 0x80,
				(byte) 0x1F, (byte) 0xC4, (byte) 0x92, (byte) 0xFD,
				(byte) 0x25, (byte) 0x16, (byte) 0x40, (byte) 0xE4,
				(byte) 0x1F, (byte) 0xD1, (byte) 0x3F, (byte) 0x6E,
				(byte) 0x23, (byte) 0x1F, (byte) 0x56, (byte) 0xF9,
				(byte) 0x72, (byte) 0x83, (byte) 0x44, (byte) 0x7A,
				(byte) 0xB4, (byte) 0x4C, (byte) 0xBE, (byte) 0x11,
				(byte) 0x91, (byte) 0x0D, (byte) 0xB3, (byte) 0xC7,
				(byte) 0x52, (byte) 0x43, (byte) 0x78, (byte) 0x4A,
				(byte) 0xA9, (byte) 0xBD, (byte) 0xF5, (byte) 0x75,
				(byte) 0x39, (byte) 0xC3, (byte) 0x1B, (byte) 0x51,
				(byte) 0xC9, (byte) 0xF3, (byte) 0x5B, (byte) 0xF8,
				(byte) 0xBC, (byte) 0x24, (byte) 0x95, (byte) 0x76,
				(byte) 0x28, (byte) 0x81, (byte) 0x25, (byte) 0x54,
				(byte) 0x78, (byte) 0x26, (byte) 0x4B, (byte) 0x79,
				(byte) 0x2B, (byte) 0xBD, (byte) 0xCA, (byte) 0x64,
				(byte) 0x98, (byte) 0x77, (byte) 0x7A, (byte) 0xE9,
				(byte) 0x12, (byte) 0x0E, (byte) 0xD9, (byte) 0x35,
				(byte) 0xBB, (byte) 0x3E, (byte) 0x8B, (byte) 0xEA,
				(byte) 0x3E, (byte) 0xAB, (byte) 0x13, (byte) 0xD9 };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xFF, (byte) 0xDA, (byte) 0x85, (byte) 0x8C,
				(byte) 0xB2, (byte) 0xAF, (byte) 0x08, (byte) 0xB7,
				(byte) 0x9D, (byte) 0x75, (byte) 0x0C, (byte) 0xC9,
				(byte) 0x7F, (byte) 0xA6, (byte) 0xEF, (byte) 0xE2,
				(byte) 0xEF, (byte) 0x22, (byte) 0x8D, (byte) 0xDA };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_pboc_vC0() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0xC0;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 144;
		byte[] Modul = { (byte) 0xC7, (byte) 0xCD, (byte) 0xB6, (byte) 0xF2,
				(byte) 0xA3, (byte) 0xFE, (byte) 0x80, (byte) 0xA8,
				(byte) 0x83, (byte) 0x4C, (byte) 0xDD, (byte) 0xDD,
				(byte) 0x32, (byte) 0x6E, (byte) 0x10, (byte) 0x82,
				(byte) 0xAA, (byte) 0x22, (byte) 0x88, (byte) 0xF4,
				(byte) 0x7C, (byte) 0x46, (byte) 0x4D, (byte) 0x57,
				(byte) 0xB3, (byte) 0x47, (byte) 0x18, (byte) 0x19,
				(byte) 0x34, (byte) 0x31, (byte) 0x71, (byte) 0x1A,
				(byte) 0x44, (byte) 0x11, (byte) 0x91, (byte) 0x48,
				(byte) 0x05, (byte) 0x50, (byte) 0x44, (byte) 0xCF,
				(byte) 0xE3, (byte) 0x31, (byte) 0x37, (byte) 0x08,
				(byte) 0xBE, (byte) 0xD0, (byte) 0xC9, (byte) 0x8E,
				(byte) 0x1C, (byte) 0x58, (byte) 0x9B, (byte) 0x0F,
				(byte) 0x53, (byte) 0xCF, (byte) 0x6D, (byte) 0x7E,
				(byte) 0x82, (byte) 0x9F, (byte) 0xCD, (byte) 0x90,
				(byte) 0x6D, (byte) 0x21, (byte) 0xA9, (byte) 0x0F,
				(byte) 0xD4, (byte) 0xCB, (byte) 0x6B, (byte) 0xAF,
				(byte) 0x13, (byte) 0x11, (byte) 0x0C, (byte) 0x46,
				(byte) 0x85, (byte) 0x10, (byte) 0x7C, (byte) 0x27,
				(byte) 0xE0, (byte) 0x09, (byte) 0x81, (byte) 0xDB,
				(byte) 0x29, (byte) 0xDC, (byte) 0x0A, (byte) 0xC1,
				(byte) 0x86, (byte) 0xE6, (byte) 0xD7, (byte) 0x01,
				(byte) 0x57, (byte) 0x7F, (byte) 0x23, (byte) 0x86,
				(byte) 0x56, (byte) 0x26, (byte) 0x24, (byte) 0x4E,
				(byte) 0x1F, (byte) 0x9B, (byte) 0x2C, (byte) 0xD1,
				(byte) 0xDD, (byte) 0xFC, (byte) 0xB9, (byte) 0xE8,
				(byte) 0x99, (byte) 0xB4, (byte) 0x1F, (byte) 0x50,
				(byte) 0x84, (byte) 0xD8, (byte) 0xCC, (byte) 0xC1,
				(byte) 0x78, (byte) 0xA7, (byte) 0xC3, (byte) 0xF4,
				(byte) 0x54, (byte) 0x6C, (byte) 0xF9, (byte) 0x31,
				(byte) 0x87, (byte) 0x10, (byte) 0x6F, (byte) 0xAB,
				(byte) 0x05, (byte) 0x5A, (byte) 0x7A, (byte) 0xC6,
				(byte) 0x7D, (byte) 0xF6, (byte) 0x2E, (byte) 0x77,
				(byte) 0x8C, (byte) 0xB8, (byte) 0x88, (byte) 0x23,
				(byte) 0xBA, (byte) 0x58, (byte) 0xCF, (byte) 0x75,
				(byte) 0x46, (byte) 0xC2, (byte) 0xB0, (byte) 0x9F };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0x8B, (byte) 0x09, (byte) 0x4D, (byte) 0x26,
				(byte) 0x0B, (byte) 0xDF, (byte) 0x8B, (byte) 0xFC,
				(byte) 0x8B, (byte) 0x9A, (byte) 0x88, (byte) 0xB0,
				(byte) 0xC1, (byte) 0x77, (byte) 0xA4, (byte) 0x3F,
				(byte) 0xE2, (byte) 0xFA, (byte) 0xE7, (byte) 0x65 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}

	public static EMVCAPK get_capk_pboc_vC1() {
		byte[] RID = { (byte) 0xA0, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x33 };
		byte KeyID = (byte) 0xC1;
		byte HashInd = (byte) 0x01;
		byte ArithInd = (byte) 0x01;
		byte ModulLen = (byte) 248;
		byte[] Modul = { (byte) 0x92, (byte) 0xF0, (byte) 0x83, (byte) 0xCB,
				(byte) 0xE4, (byte) 0x6F, (byte) 0x8D, (byte) 0xCC,
				(byte) 0x0C, (byte) 0x04, (byte) 0xE4, (byte) 0x98,
				(byte) 0xBA, (byte) 0x99, (byte) 0x52, (byte) 0xBA,
				(byte) 0x9D, (byte) 0x4C, (byte) 0x09, (byte) 0xC8,
				(byte) 0x0D, (byte) 0xD2, (byte) 0x77, (byte) 0xE5,
				(byte) 0x79, (byte) 0xF0, (byte) 0x7E, (byte) 0x45,
				(byte) 0x77, (byte) 0x28, (byte) 0x46, (byte) 0xFA,
				(byte) 0x43, (byte) 0xDD, (byte) 0x3A, (byte) 0xB3,
				(byte) 0x1C, (byte) 0xC6, (byte) 0xB0, (byte) 0x8D,
				(byte) 0xD1, (byte) 0x86, (byte) 0x95, (byte) 0x71,
				(byte) 0x59, (byte) 0x49, (byte) 0xFB, (byte) 0x10,
				(byte) 0x8E, (byte) 0x53, (byte) 0xA0, (byte) 0x71,
				(byte) 0xD3, (byte) 0x93, (byte) 0xA7, (byte) 0xFD,
				(byte) 0xDB, (byte) 0xF9, (byte) 0xC5, (byte) 0xFB,
				(byte) 0x0B, (byte) 0x05, (byte) 0x07, (byte) 0x13,
				(byte) 0x87, (byte) 0x97, (byte) 0x31, (byte) 0x74,
				(byte) 0x80, (byte) 0xFC, (byte) 0x48, (byte) 0xD6,
				(byte) 0x33, (byte) 0xED, (byte) 0x38, (byte) 0xB4,
				(byte) 0x01, (byte) 0xA4, (byte) 0x51, (byte) 0x44,
				(byte) 0x3A, (byte) 0xD7, (byte) 0xF1, (byte) 0x5F,
				(byte) 0xAC, (byte) 0xDA, (byte) 0x45, (byte) 0xA6,
				(byte) 0x2A, (byte) 0xBE, (byte) 0x24, (byte) 0xFF,
				(byte) 0x63, (byte) 0x43, (byte) 0xAD, (byte) 0xD0,
				(byte) 0x90, (byte) 0x9E, (byte) 0xA8, (byte) 0x38,
				(byte) 0x93, (byte) 0x48, (byte) 0xE5, (byte) 0x4E,
				(byte) 0x26, (byte) 0xF8, (byte) 0x42, (byte) 0x88,
				(byte) 0x0D, (byte) 0x1A, (byte) 0x69, (byte) 0xF9,
				(byte) 0x21, (byte) 0x43, (byte) 0x68, (byte) 0xBA,
				(byte) 0x30, (byte) 0xC1, (byte) 0x8D, (byte) 0xE5,
				(byte) 0xC5, (byte) 0xE0, (byte) 0xCB, (byte) 0x92,
				(byte) 0x53, (byte) 0xB5, (byte) 0xAB, (byte) 0xC5,
				(byte) 0x5F, (byte) 0xB6, (byte) 0xEF, (byte) 0x0A,
				(byte) 0x73, (byte) 0x8D, (byte) 0x92, (byte) 0x74,
				(byte) 0x94, (byte) 0xA3, (byte) 0x0B, (byte) 0xBF,
				(byte) 0x82, (byte) 0xE3, (byte) 0x40, (byte) 0x28,
				(byte) 0x53, (byte) 0x63, (byte) 0xB6, (byte) 0xFA,
				(byte) 0xA1, (byte) 0x56, (byte) 0x73, (byte) 0x82,
				(byte) 0x9D, (byte) 0xBB, (byte) 0x21, (byte) 0x0E,
				(byte) 0x71, (byte) 0x0D, (byte) 0xA5, (byte) 0x8E,
				(byte) 0xE9, (byte) 0xE5, (byte) 0x78, (byte) 0xE7,
				(byte) 0xCE, (byte) 0x55, (byte) 0xDC, (byte) 0x81,
				(byte) 0x2A, (byte) 0xB7, (byte) 0xD6, (byte) 0xDC,
				(byte) 0xCE, (byte) 0x0E, (byte) 0x3B, (byte) 0x1A,
				(byte) 0xE1, (byte) 0x79, (byte) 0xD6, (byte) 0x64,
				(byte) 0xF3, (byte) 0x35, (byte) 0x6E, (byte) 0xB9,
				(byte) 0x51, (byte) 0xE3, (byte) 0xC9, (byte) 0x1A,
				(byte) 0x1C, (byte) 0xBB, (byte) 0xF6, (byte) 0xA7,
				(byte) 0xCA, (byte) 0x8D, (byte) 0x0C, (byte) 0x7E,
				(byte) 0xC9, (byte) 0xC6, (byte) 0xAF, (byte) 0x7A,
				(byte) 0x49, (byte) 0x41, (byte) 0xC5, (byte) 0x05,
				(byte) 0x10, (byte) 0x99, (byte) 0xB9, (byte) 0x78,
				(byte) 0x4E, (byte) 0x56, (byte) 0xC9, (byte) 0x16,
				(byte) 0x20, (byte) 0x67, (byte) 0xB8, (byte) 0xC3,
				(byte) 0xB1, (byte) 0x5C, (byte) 0x5F, (byte) 0xA4,
				(byte) 0x48, (byte) 0x0A, (byte) 0x64, (byte) 0x5C,
				(byte) 0xD2, (byte) 0x52, (byte) 0x6A, (byte) 0x69,
				(byte) 0xC8, (byte) 0x0B, (byte) 0xA8, (byte) 0xEF,
				(byte) 0x36, (byte) 0x1B, (byte) 0xE2, (byte) 0xAA,
				(byte) 0x94, (byte) 0x17, (byte) 0xDE, (byte) 0xFC,
				(byte) 0xE3, (byte) 0x5B, (byte) 0x62, (byte) 0xB0,
				(byte) 0xC9, (byte) 0xCF, (byte) 0x09, (byte) 0x7D };
		byte ExponentLen = 3;
		byte[] Exponent = { (byte) 0x01, (byte) 0x00, (byte) 0x01 };
		byte[] ExpDate = { (byte) 0x15, (byte) 0x12, (byte) 0x31 };
		byte[] CheckSum = { (byte) 0xB6, (byte) 0x37, (byte) 0x2D, (byte) 0xB9,
				(byte) 0x91, (byte) 0x9F, (byte) 0x8C, (byte) 0x6C,
				(byte) 0x9C, (byte) 0x88, (byte) 0xE8, (byte) 0x3D,
				(byte) 0x3C, (byte) 0x60, (byte) 0x0A, (byte) 0x4A,
				(byte) 0xD8, (byte) 0xAD, (byte) 0xC7, (byte) 0xA9 };
		EMVCAPK capk = new EMVCAPK(RID, KeyID, HashInd, ArithInd, ModulLen,
				Modul, ExponentLen, Exponent, ExpDate, CheckSum);
		return capk;
	}
}
